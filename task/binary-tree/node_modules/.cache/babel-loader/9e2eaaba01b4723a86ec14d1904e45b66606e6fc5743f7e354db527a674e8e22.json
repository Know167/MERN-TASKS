{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nfunction BinaryTree(props) {\n  _s();\n  const [tree, setTree] = useState({\n    value: props.root,\n    left: null,\n    right: null\n  });\n  function insert(value) {\n    const newNode = {\n      left: null,\n      value: value,\n      right: null\n    };\n    let currentNode = tree;\n    while (true) {\n      if (value < currentNode.value) {\n        if (currentNode.left == null) {\n          currentNode.left = newNode;\n          break;\n        }\n        currentNode = currentNode.left;\n      } else {\n        if (value === currentNode.value) {\n          console.log('');\n        }\n      }\n    }\n    setTree(tree);\n  }\n  useEffect(() => {\n    insert(2);\n    insert(3);\n    insert(5);\n    console.log(tree);\n  }, []);\n  return null;\n}\n_s(BinaryTree, \"OcEbuuASv/BzcWNaORYP3ehV9G4=\");\n_c = BinaryTree;\nexport default BinaryTree;\nvar _c;\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"names":["React","useEffect","useState","BinaryTree","props","_s","tree","setTree","value","root","left","right","insert","newNode","currentNode","console","log","_c","$RefreshReg$"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/BinaryTree.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction BinaryTree(props) {\r\n  const [tree, setTree] = useState({\r\n    value: props.root,\r\n    left: null,\r\n    right: null,\r\n  });\r\n\r\n  function insert(value) {\r\n    const newNode = {\r\n      left: null,\r\n      value: value,\r\n      right: null,\r\n    };\r\n\r\n    let currentNode = tree;\r\n\r\n    while (true) {\r\n      if (value < currentNode.value) {\r\n        if (currentNode.left == null) {\r\n            currentNode.left = newNode;\r\n            break;\r\n          }\r\n          currentNode = currentNode.left;\r\n        }\r\n      else {\r\n          if (value === currentNode.value) {\r\n              console.log('')\r\n          }\r\n        }\r\n    }\r\n\r\n    setTree(tree);\r\n  }\r\n\r\n  useEffect(() => {\r\n    insert(2);\r\n    insert(3);\r\n    insert(5);\r\n    console.log(tree);\r\n  }, []);\r\n\r\n  return null;\r\n}\r\n\r\nexport default BinaryTree;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,SAASC,UAAUA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC;IAC/BM,KAAK,EAAEJ,KAAK,CAACK,IAAI;IACjBC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,SAASC,MAAMA,CAACJ,KAAK,EAAE;IACrB,MAAMK,OAAO,GAAG;MACdH,IAAI,EAAE,IAAI;MACVF,KAAK,EAAEA,KAAK;MACZG,KAAK,EAAE;IACT,CAAC;IAED,IAAIG,WAAW,GAAGR,IAAI;IAEtB,OAAO,IAAI,EAAE;MACX,IAAIE,KAAK,GAAGM,WAAW,CAACN,KAAK,EAAE;QAC7B,IAAIM,WAAW,CAACJ,IAAI,IAAI,IAAI,EAAE;UAC1BI,WAAW,CAACJ,IAAI,GAAGG,OAAO;UAC1B;QACF;QACAC,WAAW,GAAGA,WAAW,CAACJ,IAAI;MAChC,CAAC,MACE;QACD,IAAIF,KAAK,KAAKM,WAAW,CAACN,KAAK,EAAE;UAC7BO,OAAO,CAACC,GAAG,CAAC,EAAE,CAAC;QACnB;MACF;IACJ;IAEAT,OAAO,CAACD,IAAI,CAAC;EACf;EAEAL,SAAS,CAAC,MAAM;IACdW,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,CAAC,CAAC;IACTG,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,IAAI;AACb;AAACD,EAAA,CA1CQF,UAAU;AAAAc,EAAA,GAAVd,UAAU;AA4CnB,eAAeA,UAAU;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}