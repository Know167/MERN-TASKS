{"ast":null,"code":"import React from 'react';\nclass NodeItem extends React.Component {\n  constructor(key, value) {\n    this.value = value;\n    this.key = key;\n    this.left = null;\n    this.right = null;\n  }\n  // Cost: O(1)\n  free() {\n    this.left = null;\n    this.right = null;\n  }\n  insert(key, value) {\n    if (!Number.isInteger(key)) return;\n    const newNode = new BinaryNode(key, value);\n    if (this.root === null) this.root = newNode;else this.insertNode(this.root, newNode);\n  }\n  insertNode(node, newNode) {\n    if (newNode.key < node.key) {\n      if (node.left === null) node.left = newNode;else this.insertNode(node.left, newNode);\n    } else if (newNode.key === node.key) {\n      node.value = newNode.value;\n    } else {\n      if (node.right === null) node.right = newNode;else this.insertNode(node.right, newNode);\n    }\n  }\n}\nexport default NodeItem;","map":{"version":3,"names":["React","NodeItem","Component","constructor","key","value","left","right","free","insert","Number","isInteger","newNode","BinaryNode","root","insertNode","node"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/NodeItem.js"],"sourcesContent":["import React from 'react'\r\n\r\nclass NodeItem extends React.Component{\r\n  constructor(key, value) {\r\n    this.value = value;\r\n    this.key = key;\r\n    this.left = null;\r\n    this.right = null;\r\n  }\r\n  // Cost: O(1)\r\n  free() {\r\n    this.left = null;\r\n    this.right = null;\r\n  }\r\n\r\ninsert(key, value) {\r\n    if (!Number.isInteger(key)) return;\r\n    const newNode = new BinaryNode(key, value);\r\n    if (this.root === null) this.root = newNode;\r\n    else this.insertNode(this.root, newNode);\r\n  }\r\n\r\n  insertNode(node, newNode) {\r\n    if (newNode.key < node.key) {\r\n      if (node.left === null) node.left = newNode;\r\n      else this.insertNode(node.left, newNode);\r\n    } else if (newNode.key === node.key) {\r\n      node.value = newNode.value;\r\n    } else {\r\n      if (node.right === null) node.right = newNode;\r\n      else this.insertNode(node.right, newNode);\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default NodeItem"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,SAASD,KAAK,CAACE,SAAS;EACpCC,WAAWA,CAACC,GAAG,EAAEC,KAAK,EAAE;IACtB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACD,GAAG,GAAGA,GAAG;IACd,IAAI,CAACE,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,KAAK,GAAG,IAAI;EACnB;EACA;EACAC,IAAIA,CAAA,EAAG;IACL,IAAI,CAACF,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,KAAK,GAAG,IAAI;EACnB;EAEFE,MAAMA,CAACL,GAAG,EAAEC,KAAK,EAAE;IACf,IAAI,CAACK,MAAM,CAACC,SAAS,CAACP,GAAG,CAAC,EAAE;IAC5B,MAAMQ,OAAO,GAAG,IAAIC,UAAU,CAACT,GAAG,EAAEC,KAAK,CAAC;IAC1C,IAAI,IAAI,CAACS,IAAI,KAAK,IAAI,EAAE,IAAI,CAACA,IAAI,GAAGF,OAAO,CAAC,KACvC,IAAI,CAACG,UAAU,CAAC,IAAI,CAACD,IAAI,EAAEF,OAAO,CAAC;EAC1C;EAEAG,UAAUA,CAACC,IAAI,EAAEJ,OAAO,EAAE;IACxB,IAAIA,OAAO,CAACR,GAAG,GAAGY,IAAI,CAACZ,GAAG,EAAE;MAC1B,IAAIY,IAAI,CAACV,IAAI,KAAK,IAAI,EAAEU,IAAI,CAACV,IAAI,GAAGM,OAAO,CAAC,KACvC,IAAI,CAACG,UAAU,CAACC,IAAI,CAACV,IAAI,EAAEM,OAAO,CAAC;IAC1C,CAAC,MAAM,IAAIA,OAAO,CAACR,GAAG,KAAKY,IAAI,CAACZ,GAAG,EAAE;MACnCY,IAAI,CAACX,KAAK,GAAGO,OAAO,CAACP,KAAK;IAC5B,CAAC,MAAM;MACL,IAAIW,IAAI,CAACT,KAAK,KAAK,IAAI,EAAES,IAAI,CAACT,KAAK,GAAGK,OAAO,CAAC,KACzC,IAAI,CAACG,UAAU,CAACC,IAAI,CAACT,KAAK,EAAEK,OAAO,CAAC;IAC3C;EACF;AACF;AAGA,eAAeX,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}