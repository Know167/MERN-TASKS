{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectionPool = exports.PoolState = void 0;\nconst Denque = require(\"denque\");\nconst timers_1 = require(\"timers\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst logger_1 = require(\"../logger\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\nconst connect_1 = require(\"./connect\");\nconst connection_1 = require(\"./connection\");\nconst connection_pool_events_1 = require(\"./connection_pool_events\");\nconst errors_1 = require(\"./errors\");\nconst metrics_1 = require(\"./metrics\");\n/** @internal */\nconst kLogger = Symbol('logger');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n/** @internal */\nexports.PoolState = Object.freeze({\n  paused: 'paused',\n  ready: 'ready',\n  closed: 'closed'\n});\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n  /** @internal */\n  constructor(options) {\n    var _a, _b, _c, _d, _e;\n    super();\n    this.options = Object.freeze({\n      ...options,\n      connectionType: connection_1.Connection,\n      maxPoolSize: (_a = options.maxPoolSize) !== null && _a !== void 0 ? _a : 100,\n      minPoolSize: (_b = options.minPoolSize) !== null && _b !== void 0 ? _b : 0,\n      maxConnecting: (_c = options.maxConnecting) !== null && _c !== void 0 ? _c : 2,\n      maxIdleTimeMS: (_d = options.maxIdleTimeMS) !== null && _d !== void 0 ? _d : 0,\n      waitQueueTimeoutMS: (_e = options.waitQueueTimeoutMS) !== null && _e !== void 0 ? _e : 0,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n    }\n    this[kPoolState] = exports.PoolState.paused;\n    this[kLogger] = new logger_1.Logger('ConnectionPool');\n    this[kConnections] = new Denque();\n    this[kPending] = 0;\n    this[kCheckedOut] = 0;\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new Denque();\n    this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n    this[kProcessingWaitQueue] = false;\n    process.nextTick(() => {\n      this.emit(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n      this.ensureMinPoolSize();\n    });\n  }\n  /** The address of the endpoint the pool is connected to */\n  get address() {\n    return this.options.hostAddress.toString();\n  }\n  /**\n   * Check if the pool has been closed\n   *\n   * TODO(NODE-3263): We can remove this property once shell no longer needs it\n   */\n  get closed() {\n    return this[kPoolState] === exports.PoolState.closed;\n  }\n  /** An integer representing the SDAM generation of the pool */\n  get generation() {\n    return this[kGeneration];\n  }\n  /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n  get totalConnectionCount() {\n    return this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount;\n  }\n  /** An integer expressing how many connections are currently available in the pool. */\n  get availableConnectionCount() {\n    return this[kConnections].length;\n  }\n  get pendingConnectionCount() {\n    return this[kPending];\n  }\n  get currentCheckedOutCount() {\n    return this[kCheckedOut];\n  }\n  get waitQueueSize() {\n    return this[kWaitQueue].length;\n  }\n  get loadBalanced() {\n    return this.options.loadBalanced;\n  }\n  get serviceGenerations() {\n    return this[kServiceGenerations];\n  }\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n  waitQueueErrorMetrics() {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n  /**\n   * Set the pool state to \"ready\"\n   */\n  ready() {\n    this[kPoolState] = exports.PoolState.ready;\n  }\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n  checkOut(callback) {\n    this.emit(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n    if (this.closed) {\n      this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'poolClosed'));\n      callback(new errors_1.PoolClosedError(this));\n      return;\n    }\n    const waitQueueMember = {\n      callback\n    };\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n    if (waitQueueTimeoutMS) {\n      waitQueueMember.timer = (0, timers_1.setTimeout)(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout'));\n        waitQueueMember.callback(new errors_1.WaitQueueTimeoutError(this.loadBalanced ? this.waitQueueErrorMetrics() : 'Timed out while checking out a connection from connection pool', this.address));\n      }, waitQueueTimeoutMS);\n    }\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(() => this.processWaitQueue());\n  }\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n  checkIn(connection) {\n    const poolClosed = this.closed;\n    const stale = this.connectionIsStale(connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n    this[kCheckedOut]--;\n    this.emit(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      this.destroyConnection(connection, reason);\n    }\n    process.nextTick(() => this.processWaitQueue());\n  }\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n  clear(serviceId) {\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n      if (generation == null) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n    } else {\n      this[kGeneration] += 1;\n    }\n    this.emit(ConnectionPool.CONNECTION_POOL_CLEARED, new connection_pool_events_1.ConnectionPoolClearedEvent(this, serviceId));\n  }\n  close(_options, _cb) {\n    let options = _options;\n    const callback = _cb !== null && _cb !== void 0 ? _cb : _options;\n    if (typeof options === 'function') {\n      options = {};\n    }\n    options = Object.assign({\n      force: false\n    }, options);\n    if (this.closed) {\n      return callback();\n    }\n    // immediately cancel any in-flight connections\n    this[kCancellationToken].emit('cancel');\n    // drain the wait queue\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].pop();\n      if (waitQueueMember) {\n        if (waitQueueMember.timer) {\n          (0, timers_1.clearTimeout)(waitQueueMember.timer);\n        }\n        if (!waitQueueMember[kCancelled]) {\n          // TODO(NODE-3483): Replace with MongoConnectionPoolClosedError\n          waitQueueMember.callback(new error_1.MongoRuntimeError('Connection pool closed'));\n        }\n      }\n    }\n    // clear the min pool size timer\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n    if (minPoolSizeTimer) {\n      (0, timers_1.clearTimeout)(minPoolSizeTimer);\n    }\n    // end the connection counter\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    }\n    // mark the pool as closed immediately\n    this[kPoolState] = exports.PoolState.closed;\n    (0, utils_1.eachAsync)(this[kConnections].toArray(), (conn, cb) => {\n      this.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n      conn.destroy(options, cb);\n    }, err => {\n      this[kConnections].clear();\n      this.emit(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n      callback(err);\n    });\n  }\n  /**\n   * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n   * has completed by calling back.\n   *\n   * NOTE: please note the required signature of `fn`\n   *\n   * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n   *   In these cases we pass the connection in to this method to ensure it is used and a new\n   *   connection is not checked out.\n   *\n   * @param conn - A pinned connection for use in load balancing mode.\n   * @param fn - A function which operates on a managed connection\n   * @param callback - The original callback\n   */\n  withConnection(conn, fn, callback) {\n    if (conn) {\n      // use the provided connection, and do _not_ check it in after execution\n      fn(undefined, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n      });\n      return;\n    }\n    this.checkOut((err, conn) => {\n      // don't callback with `err` here, we might want to act upon it inside `fn`\n      fn(err, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n        if (conn) {\n          this.checkIn(conn);\n        }\n      });\n    });\n  }\n  destroyConnection(connection, reason) {\n    this.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, connection, reason));\n    // destroy the connection\n    process.nextTick(() => connection.destroy());\n  }\n  connectionIsStale(connection) {\n    const serviceId = connection.serviceId;\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      return connection.generation !== generation;\n    }\n    return connection.generation !== this[kGeneration];\n  }\n  connectionIsIdle(connection) {\n    return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n  }\n  connectionIsPerished(connection) {\n    const isStale = this.connectionIsStale(connection);\n    const isIdle = this.connectionIsIdle(connection);\n    if (!isStale && !isIdle && !connection.closed) {\n      return false;\n    }\n    const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    this.destroyConnection(connection, reason);\n    return true;\n  }\n  createConnection(callback) {\n    const connectOptions = {\n      ...this.options,\n      id: this[kConnectionCounter].next().value,\n      generation: this[kGeneration],\n      cancellationToken: this[kCancellationToken]\n    };\n    this[kPending]++;\n    // This is our version of a \"virtual\" no-I/O connection as the spec requires\n    this.emit(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(this, {\n      id: connectOptions.id\n    }));\n    (0, connect_1.connect)(connectOptions, (err, connection) => {\n      if (err || !connection) {\n        this[kLogger].debug(`connection attempt failed with error [${JSON.stringify(err)}]`);\n        callback(err);\n        return;\n      }\n      // The pool might have closed since we started trying to create a connection\n      if (this.closed) {\n        this[kPending]--;\n        connection.destroy({\n          force: true\n        });\n        return;\n      }\n      // forward all events from the connection to the pool\n      for (const event of [...constants_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n        connection.on(event, e => this.emit(event, e));\n      }\n      if (this.loadBalanced) {\n        connection.on(connection_1.Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n        connection.on(connection_1.Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n        const serviceId = connection.serviceId;\n        if (serviceId) {\n          let generation;\n          const sid = serviceId.toHexString();\n          if (generation = this.serviceGenerations.get(sid)) {\n            connection.generation = generation;\n          } else {\n            this.serviceGenerations.set(sid, 0);\n            connection.generation = 0;\n          }\n        }\n      }\n      connection.markAvailable();\n      this.emit(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(this, connection));\n      callback(undefined, connection);\n      return;\n    });\n  }\n  ensureMinPoolSize() {\n    const minPoolSize = this.options.minPoolSize;\n    if (this.closed || minPoolSize === 0) {\n      return;\n    }\n    if (this.totalConnectionCount < minPoolSize && this.pendingConnectionCount < this.options.maxConnecting) {\n      // NOTE: ensureMinPoolSize should not try to get all the pending\n      // connection permits because that potentially delays the availability of\n      // the connection to a checkout request\n      this.createConnection((err, connection) => {\n        this[kPending]--;\n        if (!err && connection) {\n          this[kConnections].push(connection);\n          process.nextTick(() => this.processWaitQueue());\n        }\n        this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), 10);\n      });\n    } else {\n      this[kMinPoolSizeTimer] = (0, timers_1.setTimeout)(() => this.ensureMinPoolSize(), 100);\n    }\n  }\n  processWaitQueue() {\n    if (this.closed || this[kProcessingWaitQueue]) {\n      return;\n    }\n    this[kProcessingWaitQueue] = true;\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].peekFront();\n      if (!waitQueueMember) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n      if (waitQueueMember[kCancelled]) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n      if (!this.availableConnectionCount) {\n        break;\n      }\n      const connection = this[kConnections].shift();\n      if (!connection) {\n        break;\n      }\n      if (!this.connectionIsPerished(connection)) {\n        this[kCheckedOut]++;\n        this.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n        if (waitQueueMember.timer) {\n          (0, timers_1.clearTimeout)(waitQueueMember.timer);\n        }\n        this[kWaitQueue].shift();\n        waitQueueMember.callback(undefined, connection);\n      }\n    }\n    const {\n      maxPoolSize,\n      maxConnecting\n    } = this.options;\n    while (this.waitQueueSize > 0 && this.pendingConnectionCount < maxConnecting && (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)) {\n      const waitQueueMember = this[kWaitQueue].shift();\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        continue;\n      }\n      this.createConnection((err, connection) => {\n        this[kPending]--;\n        if (waitQueueMember[kCancelled]) {\n          if (!err && connection) {\n            this[kConnections].push(connection);\n          }\n        } else {\n          if (err) {\n            this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, err));\n          } else if (connection) {\n            this[kCheckedOut]++;\n            this.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(this, connection));\n          }\n          if (waitQueueMember.timer) {\n            (0, timers_1.clearTimeout)(waitQueueMember.timer);\n          }\n          waitQueueMember.callback(err, connection);\n        }\n        process.nextTick(() => this.processWaitQueue());\n      });\n    }\n    this[kProcessingWaitQueue] = false;\n  }\n}\nexports.ConnectionPool = ConnectionPool;\n/**\n * Emitted when the connection pool is created.\n * @event\n */\nConnectionPool.CONNECTION_POOL_CREATED = constants_1.CONNECTION_POOL_CREATED;\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLOSED = constants_1.CONNECTION_POOL_CLOSED;\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLEARED = constants_1.CONNECTION_POOL_CLEARED;\n/**\n * Emitted when a connection is created.\n * @event\n */\nConnectionPool.CONNECTION_CREATED = constants_1.CONNECTION_CREATED;\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\nConnectionPool.CONNECTION_READY = constants_1.CONNECTION_READY;\n/**\n * Emitted when a connection is closed\n * @event\n */\nConnectionPool.CONNECTION_CLOSED = constants_1.CONNECTION_CLOSED;\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = constants_1.CONNECTION_CHECK_OUT_STARTED;\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = constants_1.CONNECTION_CHECK_OUT_FAILED;\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_OUT = constants_1.CONNECTION_CHECKED_OUT;\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_IN = constants_1.CONNECTION_CHECKED_IN;","map":{"version":3,"names":["Denque","require","timers_1","constants_1","error_1","logger_1","mongo_types_1","utils_1","connect_1","connection_1","connection_pool_events_1","errors_1","metrics_1","kLogger","Symbol","kConnections","kPending","kCheckedOut","kMinPoolSizeTimer","kGeneration","kServiceGenerations","kConnectionCounter","kCancellationToken","kWaitQueue","kCancelled","kMetrics","kProcessingWaitQueue","kPoolState","exports","PoolState","Object","freeze","paused","ready","closed","ConnectionPool","TypedEventEmitter","constructor","options","connectionType","Connection","maxPoolSize","_a","minPoolSize","_b","maxConnecting","_c","maxIdleTimeMS","_d","waitQueueTimeoutMS","_e","autoEncrypter","metadata","MongoInvalidArgumentError","Logger","undefined","Map","makeCounter","CancellationToken","setMaxListeners","Infinity","ConnectionPoolMetrics","process","nextTick","emit","CONNECTION_POOL_CREATED","ConnectionPoolCreatedEvent","ensureMinPoolSize","address","hostAddress","toString","generation","totalConnectionCount","availableConnectionCount","pendingConnectionCount","currentCheckedOutCount","length","waitQueueSize","loadBalanced","serviceGenerations","waitQueueErrorMetrics","info","checkOut","callback","CONNECTION_CHECK_OUT_STARTED","ConnectionCheckOutStartedEvent","CONNECTION_CHECK_OUT_FAILED","ConnectionCheckOutFailedEvent","PoolClosedError","waitQueueMember","timer","setTimeout","WaitQueueTimeoutError","push","processWaitQueue","checkIn","connection","poolClosed","stale","connectionIsStale","willDestroy","markAvailable","unshift","CONNECTION_CHECKED_IN","ConnectionCheckedInEvent","reason","destroyConnection","clear","serviceId","sid","toHexString","get","MongoRuntimeError","set","CONNECTION_POOL_CLEARED","ConnectionPoolClearedEvent","close","_options","_cb","assign","force","pop","clearTimeout","minPoolSizeTimer","return","eachAsync","toArray","conn","cb","CONNECTION_CLOSED","ConnectionClosedEvent","destroy","err","CONNECTION_POOL_CLOSED","ConnectionPoolClosedEvent","withConnection","fn","fnErr","result","connectionIsIdle","idleTime","connectionIsPerished","isStale","isIdle","createConnection","connectOptions","id","next","value","cancellationToken","CONNECTION_CREATED","ConnectionCreatedEvent","connect","debug","JSON","stringify","event","APM_EVENTS","CLUSTER_TIME_RECEIVED","on","e","PINNED","pinType","markPinned","UNPINNED","markUnpinned","CONNECTION_READY","ConnectionReadyEvent","peekFront","shift","CONNECTION_CHECKED_OUT","ConnectionCheckedOutEvent"],"sources":["C:\\Users\\Jatin\\node_modules\\mongodb\\src\\cmap\\connection_pool.ts"],"sourcesContent":["import Denque = require('denque');\nimport { clearTimeout, setTimeout } from 'timers';\n\nimport type { ObjectId } from '../bson';\nimport {\n  APM_EVENTS,\n  CONNECTION_CHECK_OUT_FAILED,\n  CONNECTION_CHECK_OUT_STARTED,\n  CONNECTION_CHECKED_IN,\n  CONNECTION_CHECKED_OUT,\n  CONNECTION_CLOSED,\n  CONNECTION_CREATED,\n  CONNECTION_POOL_CLEARED,\n  CONNECTION_POOL_CLOSED,\n  CONNECTION_POOL_CREATED,\n  CONNECTION_READY\n} from '../constants';\nimport { MongoError, MongoInvalidArgumentError, MongoRuntimeError } from '../error';\nimport { Logger } from '../logger';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport { Callback, eachAsync, makeCounter } from '../utils';\nimport { connect } from './connect';\nimport { Connection, ConnectionEvents, ConnectionOptions } from './connection';\nimport {\n  ConnectionCheckedInEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionPoolClearedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionPoolCreatedEvent,\n  ConnectionReadyEvent\n} from './connection_pool_events';\nimport { PoolClosedError, WaitQueueTimeoutError } from './errors';\nimport { ConnectionPoolMetrics } from './metrics';\n\n/** @internal */\nconst kLogger = Symbol('logger');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPending = Symbol('pending');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/** @internal */\nconst kPoolState = Symbol('poolState');\n\n/** @public */\nexport interface ConnectionPoolOptions extends Omit<ConnectionOptions, 'id' | 'generation'> {\n  /** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections. */\n  maxPoolSize: number;\n  /** The minimum number of connections that MUST exist at any moment in a single connection pool. */\n  minPoolSize: number;\n  /** The maximum number of connections that may be in the process of being established concurrently by the connection pool. */\n  maxConnecting: number;\n  /** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. */\n  maxIdleTimeMS: number;\n  /** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit. */\n  waitQueueTimeoutMS: number;\n  /** If we are in load balancer mode. */\n  loadBalanced: boolean;\n}\n\n/** @internal */\nexport interface WaitQueueMember {\n  callback: Callback<Connection>;\n  timer?: NodeJS.Timeout;\n  [kCancelled]?: boolean;\n}\n\n/** @internal */\nexport const PoolState = Object.freeze({\n  paused: 'paused',\n  ready: 'ready',\n  closed: 'closed'\n} as const);\n\n/** @public */\nexport interface CloseOptions {\n  force?: boolean;\n}\n\n/** @public */\nexport type ConnectionPoolEvents = {\n  connectionPoolCreated(event: ConnectionPoolCreatedEvent): void;\n  connectionPoolClosed(event: ConnectionPoolClosedEvent): void;\n  connectionPoolCleared(event: ConnectionPoolClearedEvent): void;\n  connectionCreated(event: ConnectionCreatedEvent): void;\n  connectionReady(event: ConnectionReadyEvent): void;\n  connectionClosed(event: ConnectionClosedEvent): void;\n  connectionCheckOutStarted(event: ConnectionCheckOutStartedEvent): void;\n  connectionCheckOutFailed(event: ConnectionCheckOutFailedEvent): void;\n  connectionCheckedOut(event: ConnectionCheckedOutEvent): void;\n  connectionCheckedIn(event: ConnectionCheckedInEvent): void;\n} & Omit<ConnectionEvents, 'close' | 'message'>;\n\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nexport class ConnectionPool extends TypedEventEmitter<ConnectionPoolEvents> {\n  options: Readonly<ConnectionPoolOptions>;\n  /** @internal */\n  [kPoolState]: typeof PoolState[keyof typeof PoolState];\n  /** @internal */\n  [kLogger]: Logger;\n  /** @internal */\n  [kConnections]: Denque<Connection>;\n  /** @internal */\n  [kPending]: number;\n  /** @internal */\n  [kCheckedOut]: number;\n  /** @internal */\n  [kMinPoolSizeTimer]?: NodeJS.Timeout;\n  /**\n   * An integer representing the SDAM generation of the pool\n   * @internal\n   */\n  [kGeneration]: number;\n  /** A map of generations to service ids\n   * @internal\n   */\n  [kServiceGenerations]: Map<string, number>;\n  /** @internal */\n  [kConnectionCounter]: Generator<number>;\n  /** @internal */\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kWaitQueue]: Denque<WaitQueueMember>;\n  /** @internal */\n  [kMetrics]: ConnectionPoolMetrics;\n  /** @internal */\n  [kProcessingWaitQueue]: boolean;\n\n  /**\n   * Emitted when the connection pool is created.\n   * @event\n   */\n  static readonly CONNECTION_POOL_CREATED = CONNECTION_POOL_CREATED;\n  /**\n   * Emitted once when the connection pool is closed\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLOSED = CONNECTION_POOL_CLOSED;\n  /**\n   * Emitted each time the connection pool is cleared and it's generation incremented\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLEARED = CONNECTION_POOL_CLEARED;\n  /**\n   * Emitted when a connection is created.\n   * @event\n   */\n  static readonly CONNECTION_CREATED = CONNECTION_CREATED;\n  /**\n   * Emitted when a connection becomes established, and is ready to use\n   * @event\n   */\n  static readonly CONNECTION_READY = CONNECTION_READY;\n  /**\n   * Emitted when a connection is closed\n   * @event\n   */\n  static readonly CONNECTION_CLOSED = CONNECTION_CLOSED;\n  /**\n   * Emitted when an attempt to check out a connection begins\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_STARTED = CONNECTION_CHECK_OUT_STARTED;\n  /**\n   * Emitted when an attempt to check out a connection fails\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_FAILED = CONNECTION_CHECK_OUT_FAILED;\n  /**\n   * Emitted each time a connection is successfully checked out of the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_OUT = CONNECTION_CHECKED_OUT;\n  /**\n   * Emitted each time a connection is successfully checked into the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_IN = CONNECTION_CHECKED_IN;\n\n  /** @internal */\n  constructor(options: ConnectionPoolOptions) {\n    super();\n\n    this.options = Object.freeze({\n      ...options,\n      connectionType: Connection,\n      maxPoolSize: options.maxPoolSize ?? 100,\n      minPoolSize: options.minPoolSize ?? 0,\n      maxConnecting: options.maxConnecting ?? 2,\n      maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n      waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new MongoInvalidArgumentError(\n        'Connection pool minimum size must not be greater than maximum pool size'\n      );\n    }\n\n    this[kPoolState] = PoolState.paused;\n    this[kLogger] = new Logger('ConnectionPool');\n    this[kConnections] = new Denque();\n    this[kPending] = 0;\n    this[kCheckedOut] = 0;\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = makeCounter(1);\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new Denque();\n    this[kMetrics] = new ConnectionPoolMetrics();\n    this[kProcessingWaitQueue] = false;\n\n    process.nextTick(() => {\n      this.emit(ConnectionPool.CONNECTION_POOL_CREATED, new ConnectionPoolCreatedEvent(this));\n      this.ensureMinPoolSize();\n    });\n  }\n\n  /** The address of the endpoint the pool is connected to */\n  get address(): string {\n    return this.options.hostAddress.toString();\n  }\n\n  /**\n   * Check if the pool has been closed\n   *\n   * TODO(NODE-3263): We can remove this property once shell no longer needs it\n   */\n  get closed(): boolean {\n    return this[kPoolState] === PoolState.closed;\n  }\n\n  /** An integer representing the SDAM generation of the pool */\n  get generation(): number {\n    return this[kGeneration];\n  }\n\n  /** An integer expressing how many total connections (available + pending + in use) the pool currently has */\n  get totalConnectionCount(): number {\n    return (\n      this.availableConnectionCount + this.pendingConnectionCount + this.currentCheckedOutCount\n    );\n  }\n\n  /** An integer expressing how many connections are currently available in the pool. */\n  get availableConnectionCount(): number {\n    return this[kConnections].length;\n  }\n\n  get pendingConnectionCount(): number {\n    return this[kPending];\n  }\n\n  get currentCheckedOutCount(): number {\n    return this[kCheckedOut];\n  }\n\n  get waitQueueSize(): number {\n    return this[kWaitQueue].length;\n  }\n\n  get loadBalanced(): boolean {\n    return this.options.loadBalanced;\n  }\n\n  get serviceGenerations(): Map<string, number> {\n    return this[kServiceGenerations];\n  }\n\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n  private waitQueueErrorMetrics(): string {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n\n  /**\n   * Set the pool state to \"ready\"\n   */\n  ready(): void {\n    this[kPoolState] = PoolState.ready;\n  }\n\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n  checkOut(callback: Callback<Connection>): void {\n    this.emit(\n      ConnectionPool.CONNECTION_CHECK_OUT_STARTED,\n      new ConnectionCheckOutStartedEvent(this)\n    );\n\n    if (this.closed) {\n      this.emit(\n        ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n        new ConnectionCheckOutFailedEvent(this, 'poolClosed')\n      );\n      callback(new PoolClosedError(this));\n      return;\n    }\n\n    const waitQueueMember: WaitQueueMember = { callback };\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n    if (waitQueueTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n\n        this.emit(\n          ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n          new ConnectionCheckOutFailedEvent(this, 'timeout')\n        );\n        waitQueueMember.callback(\n          new WaitQueueTimeoutError(\n            this.loadBalanced\n              ? this.waitQueueErrorMetrics()\n              : 'Timed out while checking out a connection from connection pool',\n            this.address\n          )\n        );\n      }, waitQueueTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(() => this.processWaitQueue());\n  }\n\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n  checkIn(connection: Connection): void {\n    const poolClosed = this.closed;\n    const stale = this.connectionIsStale(connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n\n    this[kCheckedOut]--;\n    this.emit(ConnectionPool.CONNECTION_CHECKED_IN, new ConnectionCheckedInEvent(this, connection));\n\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      this.destroyConnection(connection, reason);\n    }\n\n    process.nextTick(() => this.processWaitQueue());\n  }\n\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n  clear(serviceId?: ObjectId): void {\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n      if (generation == null) {\n        // TODO(NODE-3483)\n        throw new MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n    } else {\n      this[kGeneration] += 1;\n    }\n\n    this.emit(\n      ConnectionPool.CONNECTION_POOL_CLEARED,\n      new ConnectionPoolClearedEvent(this, serviceId)\n    );\n  }\n\n  /** Close the pool */\n  close(callback: Callback<void>): void;\n  close(options: CloseOptions, callback: Callback<void>): void;\n  close(_options?: CloseOptions | Callback<void>, _cb?: Callback<void>): void {\n    let options = _options as CloseOptions;\n    const callback = (_cb ?? _options) as Callback<void>;\n    if (typeof options === 'function') {\n      options = {};\n    }\n\n    options = Object.assign({ force: false }, options);\n    if (this.closed) {\n      return callback();\n    }\n\n    // immediately cancel any in-flight connections\n    this[kCancellationToken].emit('cancel');\n\n    // drain the wait queue\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].pop();\n      if (waitQueueMember) {\n        if (waitQueueMember.timer) {\n          clearTimeout(waitQueueMember.timer);\n        }\n        if (!waitQueueMember[kCancelled]) {\n          // TODO(NODE-3483): Replace with MongoConnectionPoolClosedError\n          waitQueueMember.callback(new MongoRuntimeError('Connection pool closed'));\n        }\n      }\n    }\n\n    // clear the min pool size timer\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n    if (minPoolSizeTimer) {\n      clearTimeout(minPoolSizeTimer);\n    }\n\n    // end the connection counter\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    }\n\n    // mark the pool as closed immediately\n    this[kPoolState] = PoolState.closed;\n    eachAsync<Connection>(\n      this[kConnections].toArray(),\n      (conn, cb) => {\n        this.emit(\n          ConnectionPool.CONNECTION_CLOSED,\n          new ConnectionClosedEvent(this, conn, 'poolClosed')\n        );\n        conn.destroy(options, cb);\n      },\n      err => {\n        this[kConnections].clear();\n        this.emit(ConnectionPool.CONNECTION_POOL_CLOSED, new ConnectionPoolClosedEvent(this));\n        callback(err);\n      }\n    );\n  }\n\n  /**\n   * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n   * has completed by calling back.\n   *\n   * NOTE: please note the required signature of `fn`\n   *\n   * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n   *   In these cases we pass the connection in to this method to ensure it is used and a new\n   *   connection is not checked out.\n   *\n   * @param conn - A pinned connection for use in load balancing mode.\n   * @param fn - A function which operates on a managed connection\n   * @param callback - The original callback\n   */\n  withConnection(\n    conn: Connection | undefined,\n    fn: WithConnectionCallback,\n    callback?: Callback<Connection>\n  ): void {\n    if (conn) {\n      // use the provided connection, and do _not_ check it in after execution\n      fn(undefined, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n      });\n\n      return;\n    }\n\n    this.checkOut((err, conn) => {\n      // don't callback with `err` here, we might want to act upon it inside `fn`\n      fn(err as MongoError, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n\n        if (conn) {\n          this.checkIn(conn);\n        }\n      });\n    });\n  }\n\n  private destroyConnection(connection: Connection, reason: string) {\n    this.emit(\n      ConnectionPool.CONNECTION_CLOSED,\n      new ConnectionClosedEvent(this, connection, reason)\n    );\n\n    // destroy the connection\n    process.nextTick(() => connection.destroy());\n  }\n\n  private connectionIsStale(connection: Connection) {\n    const serviceId = connection.serviceId;\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      return connection.generation !== generation;\n    }\n\n    return connection.generation !== this[kGeneration];\n  }\n\n  private connectionIsIdle(connection: Connection) {\n    return !!(this.options.maxIdleTimeMS && connection.idleTime > this.options.maxIdleTimeMS);\n  }\n\n  private connectionIsPerished(connection: Connection) {\n    const isStale = this.connectionIsStale(connection);\n    const isIdle = this.connectionIsIdle(connection);\n    if (!isStale && !isIdle && !connection.closed) {\n      return false;\n    }\n    const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n    this.destroyConnection(connection, reason);\n    return true;\n  }\n\n  private createConnection(callback: Callback<Connection>) {\n    const connectOptions: ConnectionOptions = {\n      ...this.options,\n      id: this[kConnectionCounter].next().value,\n      generation: this[kGeneration],\n      cancellationToken: this[kCancellationToken]\n    };\n\n    this[kPending]++;\n    // This is our version of a \"virtual\" no-I/O connection as the spec requires\n    this.emit(\n      ConnectionPool.CONNECTION_CREATED,\n      new ConnectionCreatedEvent(this, { id: connectOptions.id })\n    );\n\n    connect(connectOptions, (err, connection) => {\n      if (err || !connection) {\n        this[kLogger].debug(`connection attempt failed with error [${JSON.stringify(err)}]`);\n        callback(err);\n        return;\n      }\n\n      // The pool might have closed since we started trying to create a connection\n      if (this.closed) {\n        this[kPending]--;\n        connection.destroy({ force: true });\n        return;\n      }\n\n      // forward all events from the connection to the pool\n      for (const event of [...APM_EVENTS, Connection.CLUSTER_TIME_RECEIVED]) {\n        connection.on(event, (e: any) => this.emit(event, e));\n      }\n\n      if (this.loadBalanced) {\n        connection.on(Connection.PINNED, pinType => this[kMetrics].markPinned(pinType));\n        connection.on(Connection.UNPINNED, pinType => this[kMetrics].markUnpinned(pinType));\n\n        const serviceId = connection.serviceId;\n        if (serviceId) {\n          let generation;\n          const sid = serviceId.toHexString();\n          if ((generation = this.serviceGenerations.get(sid))) {\n            connection.generation = generation;\n          } else {\n            this.serviceGenerations.set(sid, 0);\n            connection.generation = 0;\n          }\n        }\n      }\n\n      connection.markAvailable();\n      this.emit(ConnectionPool.CONNECTION_READY, new ConnectionReadyEvent(this, connection));\n\n      callback(undefined, connection);\n      return;\n    });\n  }\n\n  private ensureMinPoolSize() {\n    const minPoolSize = this.options.minPoolSize;\n    if (this.closed || minPoolSize === 0) {\n      return;\n    }\n\n    if (\n      this.totalConnectionCount < minPoolSize &&\n      this.pendingConnectionCount < this.options.maxConnecting\n    ) {\n      // NOTE: ensureMinPoolSize should not try to get all the pending\n      // connection permits because that potentially delays the availability of\n      // the connection to a checkout request\n      this.createConnection((err, connection) => {\n        this[kPending]--;\n        if (!err && connection) {\n          this[kConnections].push(connection);\n          process.nextTick(() => this.processWaitQueue());\n        }\n        this[kMinPoolSizeTimer] = setTimeout(() => this.ensureMinPoolSize(), 10);\n      });\n    } else {\n      this[kMinPoolSizeTimer] = setTimeout(() => this.ensureMinPoolSize(), 100);\n    }\n  }\n\n  private processWaitQueue() {\n    if (this.closed || this[kProcessingWaitQueue]) {\n      return;\n    }\n\n    this[kProcessingWaitQueue] = true;\n\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].peekFront();\n      if (!waitQueueMember) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (waitQueueMember[kCancelled]) {\n        this[kWaitQueue].shift();\n        continue;\n      }\n\n      if (!this.availableConnectionCount) {\n        break;\n      }\n\n      const connection = this[kConnections].shift();\n      if (!connection) {\n        break;\n      }\n\n      if (!this.connectionIsPerished(connection)) {\n        this[kCheckedOut]++;\n        this.emit(\n          ConnectionPool.CONNECTION_CHECKED_OUT,\n          new ConnectionCheckedOutEvent(this, connection)\n        );\n        if (waitQueueMember.timer) {\n          clearTimeout(waitQueueMember.timer);\n        }\n\n        this[kWaitQueue].shift();\n        waitQueueMember.callback(undefined, connection);\n      }\n    }\n\n    const { maxPoolSize, maxConnecting } = this.options;\n    while (\n      this.waitQueueSize > 0 &&\n      this.pendingConnectionCount < maxConnecting &&\n      (maxPoolSize === 0 || this.totalConnectionCount < maxPoolSize)\n    ) {\n      const waitQueueMember = this[kWaitQueue].shift();\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        continue;\n      }\n      this.createConnection((err, connection) => {\n        this[kPending]--;\n        if (waitQueueMember[kCancelled]) {\n          if (!err && connection) {\n            this[kConnections].push(connection);\n          }\n        } else {\n          if (err) {\n            this.emit(\n              ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n              new ConnectionCheckOutFailedEvent(this, err)\n            );\n          } else if (connection) {\n            this[kCheckedOut]++;\n            this.emit(\n              ConnectionPool.CONNECTION_CHECKED_OUT,\n              new ConnectionCheckedOutEvent(this, connection)\n            );\n          }\n\n          if (waitQueueMember.timer) {\n            clearTimeout(waitQueueMember.timer);\n          }\n          waitQueueMember.callback(err, connection);\n        }\n        process.nextTick(() => this.processWaitQueue());\n      });\n    }\n    this[kProcessingWaitQueue] = false;\n  }\n}\n\n/**\n * A callback provided to `withConnection`\n * @internal\n *\n * @param error - An error instance representing the error during the execution.\n * @param connection - The managed connection which was checked out of the pool.\n * @param callback - A function to call back after connection management is complete\n */\nexport type WithConnectionCallback = (\n  error: MongoError | undefined,\n  connection: Connection | undefined,\n  callback: Callback<Connection>\n) => void;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}