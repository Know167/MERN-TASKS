{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IndexInformationOperation = exports.IndexExistsOperation = exports.ListIndexesOperation = exports.DropIndexesOperation = exports.DropIndexOperation = exports.EnsureIndexOperation = exports.CreateIndexOperation = exports.CreateIndexesOperation = exports.IndexesOperation = void 0;\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst common_functions_1 = require(\"./common_functions\");\nconst operation_1 = require(\"./operation\");\nconst VALID_INDEX_OPTIONS = new Set(['background', 'unique', 'name', 'partialFilterExpression', 'sparse', 'hidden', 'expireAfterSeconds', 'storageEngine', 'collation', 'version',\n// text indexes\n'weights', 'default_language', 'language_override', 'textIndexVersion',\n// 2d-sphere indexes\n'2dsphereIndexVersion',\n// 2d indexes\n'bits', 'min', 'max',\n// geoHaystack Indexes\n'bucketSize',\n// wildcard indexes\n'wildcardProjection']);\nfunction makeIndexSpec(indexSpec, options) {\n  const indexParameters = (0, utils_1.parseIndexOptions)(indexSpec);\n  // Generate the index name\n  const name = typeof options.name === 'string' ? options.name : indexParameters.name;\n  // Set up the index\n  const finalIndexSpec = {\n    name,\n    key: indexParameters.fieldHash\n  };\n  // merge valid index options into the index spec\n  for (const optionName in options) {\n    if (VALID_INDEX_OPTIONS.has(optionName)) {\n      finalIndexSpec[optionName] = options[optionName];\n    }\n  }\n  return finalIndexSpec;\n}\n/** @internal */\nclass IndexesOperation extends operation_1.AbstractOperation {\n  constructor(collection, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const options = this.options;\n    (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n      full: true,\n      ...options,\n      readPreference: this.readPreference,\n      session\n    }, callback);\n  }\n}\nexports.IndexesOperation = IndexesOperation;\n/** @internal */\nclass CreateIndexesOperation extends command_1.CommandOperation {\n  constructor(parent, collectionName, indexes, options) {\n    super(parent, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.collectionName = collectionName;\n    this.indexes = indexes;\n  }\n  execute(server, session, callback) {\n    const options = this.options;\n    const indexes = this.indexes;\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    // Ensure we generate the correct name if the parameter is not set\n    for (let i = 0; i < indexes.length; i++) {\n      // Did the user pass in a collation, check if our write server supports it\n      if (indexes[i].collation && serverWireVersion < 5) {\n        callback(new error_1.MongoCompatibilityError(`Server ${server.name}, which reports wire version ${serverWireVersion}, ` + 'does not support collation'));\n        return;\n      }\n      if (indexes[i].name == null) {\n        const keys = [];\n        for (const name in indexes[i].key) {\n          keys.push(`${name}_${indexes[i].key[name]}`);\n        }\n        // Set the name\n        indexes[i].name = keys.join('_');\n      }\n    }\n    const cmd = {\n      createIndexes: this.collectionName,\n      indexes\n    };\n    if (options.commitQuorum != null) {\n      if (serverWireVersion < 9) {\n        callback(new error_1.MongoCompatibilityError('Option `commitQuorum` for `createIndexes` not supported on servers < 4.4'));\n        return;\n      }\n      cmd.commitQuorum = options.commitQuorum;\n    }\n    // collation is set on each index, it should not be defined at the root\n    this.options.collation = undefined;\n    super.executeCommand(server, session, cmd, err => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      const indexNames = indexes.map(index => index.name || '');\n      callback(undefined, indexNames);\n    });\n  }\n}\nexports.CreateIndexesOperation = CreateIndexesOperation;\n/** @internal */\nclass CreateIndexOperation extends CreateIndexesOperation {\n  constructor(parent, collectionName, indexSpec, options) {\n    // createIndex can be called with a variety of styles:\n    //   coll.createIndex('a');\n    //   coll.createIndex({ a: 1 });\n    //   coll.createIndex([['a', 1]]);\n    // createIndexes is always called with an array of index spec objects\n    super(parent, collectionName, [makeIndexSpec(indexSpec, options)], options);\n  }\n  execute(server, session, callback) {\n    super.execute(server, session, (err, indexNames) => {\n      if (err || !indexNames) return callback(err);\n      return callback(undefined, indexNames[0]);\n    });\n  }\n}\nexports.CreateIndexOperation = CreateIndexOperation;\n/** @internal */\nclass EnsureIndexOperation extends CreateIndexOperation {\n  constructor(db, collectionName, indexSpec, options) {\n    super(db, collectionName, indexSpec, options);\n    this.readPreference = read_preference_1.ReadPreference.primary;\n    this.db = db;\n    this.collectionName = collectionName;\n  }\n  execute(server, session, callback) {\n    const indexName = this.indexes[0].name;\n    const cursor = this.db.collection(this.collectionName).listIndexes({\n      session\n    });\n    cursor.toArray((err, indexes) => {\n      /// ignore \"NamespaceNotFound\" errors\n      if (err && err.code !== error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n        return callback(err);\n      }\n      if (indexes) {\n        indexes = Array.isArray(indexes) ? indexes : [indexes];\n        if (indexes.some(index => index.name === indexName)) {\n          callback(undefined, indexName);\n          return;\n        }\n      }\n      super.execute(server, session, callback);\n    });\n  }\n}\nexports.EnsureIndexOperation = EnsureIndexOperation;\n/** @internal */\nclass DropIndexOperation extends command_1.CommandOperation {\n  constructor(collection, indexName, options) {\n    super(collection, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.collection = collection;\n    this.indexName = indexName;\n  }\n  execute(server, session, callback) {\n    const cmd = {\n      dropIndexes: this.collection.collectionName,\n      index: this.indexName\n    };\n    super.executeCommand(server, session, cmd, callback);\n  }\n}\nexports.DropIndexOperation = DropIndexOperation;\n/** @internal */\nclass DropIndexesOperation extends DropIndexOperation {\n  constructor(collection, options) {\n    super(collection, '*', options);\n  }\n  execute(server, session, callback) {\n    super.execute(server, session, err => {\n      if (err) return callback(err, false);\n      callback(undefined, true);\n    });\n  }\n}\nexports.DropIndexesOperation = DropIndexesOperation;\n/** @internal */\nclass ListIndexesOperation extends command_1.CommandOperation {\n  constructor(collection, options) {\n    super(collection, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.collectionNamespace = collection.s.namespace;\n  }\n  execute(server, session, callback) {\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    const cursor = this.options.batchSize ? {\n      batchSize: this.options.batchSize\n    } : {};\n    const command = {\n      listIndexes: this.collectionNamespace.collection,\n      cursor\n    };\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n      command.comment = this.options.comment;\n    }\n    super.executeCommand(server, session, command, callback);\n  }\n}\nexports.ListIndexesOperation = ListIndexesOperation;\n/** @internal */\nclass IndexExistsOperation extends operation_1.AbstractOperation {\n  constructor(collection, indexes, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.indexes = indexes;\n  }\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const indexes = this.indexes;\n    (0, common_functions_1.indexInformation)(coll.s.db, coll.collectionName, {\n      ...this.options,\n      readPreference: this.readPreference,\n      session\n    }, (err, indexInformation) => {\n      // If we have an error return\n      if (err != null) return callback(err);\n      // Let's check for the index names\n      if (!Array.isArray(indexes)) return callback(undefined, indexInformation[indexes] != null);\n      // Check in list of indexes\n      for (let i = 0; i < indexes.length; i++) {\n        if (indexInformation[indexes[i]] == null) {\n          return callback(undefined, false);\n        }\n      }\n      // All keys found return true\n      return callback(undefined, true);\n    });\n  }\n}\nexports.IndexExistsOperation = IndexExistsOperation;\n/** @internal */\nclass IndexInformationOperation extends operation_1.AbstractOperation {\n  constructor(db, name, options) {\n    super(options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.db = db;\n    this.name = name;\n  }\n  execute(server, session, callback) {\n    const db = this.db;\n    const name = this.name;\n    (0, common_functions_1.indexInformation)(db, name, {\n      ...this.options,\n      readPreference: this.readPreference,\n      session\n    }, callback);\n  }\n}\nexports.IndexInformationOperation = IndexInformationOperation;\n(0, operation_1.defineAspects)(ListIndexesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.CURSOR_CREATING]);\n(0, operation_1.defineAspects)(CreateIndexesOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(CreateIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(EnsureIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropIndexOperation, [operation_1.Aspect.WRITE_OPERATION]);\n(0, operation_1.defineAspects)(DropIndexesOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"names":["error_1","require","read_preference_1","utils_1","command_1","common_functions_1","operation_1","VALID_INDEX_OPTIONS","Set","makeIndexSpec","indexSpec","options","indexParameters","parseIndexOptions","name","finalIndexSpec","key","fieldHash","optionName","has","IndexesOperation","AbstractOperation","constructor","collection","execute","server","session","callback","coll","indexInformation","s","db","collectionName","full","readPreference","exports","CreateIndexesOperation","CommandOperation","parent","indexes","serverWireVersion","maxWireVersion","i","length","collation","MongoCompatibilityError","keys","push","join","cmd","createIndexes","commitQuorum","undefined","executeCommand","err","indexNames","map","index","CreateIndexOperation","EnsureIndexOperation","ReadPreference","primary","indexName","cursor","listIndexes","toArray","code","MONGODB_ERROR_CODES","NamespaceNotFound","Array","isArray","some","DropIndexOperation","dropIndexes","DropIndexesOperation","ListIndexesOperation","collectionNamespace","namespace","batchSize","command","comment","IndexExistsOperation","IndexInformationOperation","defineAspects","Aspect","READ_OPERATION","RETRYABLE","CURSOR_CREATING","WRITE_OPERATION"],"sources":["C:\\Users\\Jatin\\node_modules\\mongodb\\src\\operations\\indexes.ts"],"sourcesContent":["import type { Document } from '../bson';\nimport type { Collection } from '../collection';\nimport type { Db } from '../db';\nimport { MongoCompatibilityError, MONGODB_ERROR_CODES, MongoServerError } from '../error';\nimport type { OneOrMore } from '../mongo_types';\nimport { ReadPreference } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { Callback, maxWireVersion, MongoDBNamespace, parseIndexOptions } from '../utils';\nimport {\n  CollationOptions,\n  CommandOperation,\n  CommandOperationOptions,\n  OperationParent\n} from './command';\nimport { indexInformation, IndexInformationOptions } from './common_functions';\nimport { AbstractOperation, Aspect, defineAspects } from './operation';\n\nconst VALID_INDEX_OPTIONS = new Set([\n  'background',\n  'unique',\n  'name',\n  'partialFilterExpression',\n  'sparse',\n  'hidden',\n  'expireAfterSeconds',\n  'storageEngine',\n  'collation',\n  'version',\n\n  // text indexes\n  'weights',\n  'default_language',\n  'language_override',\n  'textIndexVersion',\n\n  // 2d-sphere indexes\n  '2dsphereIndexVersion',\n\n  // 2d indexes\n  'bits',\n  'min',\n  'max',\n\n  // geoHaystack Indexes\n  'bucketSize',\n\n  // wildcard indexes\n  'wildcardProjection'\n]);\n\n/** @public */\nexport type IndexDirection = -1 | 1 | '2d' | '2dsphere' | 'text' | 'geoHaystack' | number;\n\n/** @public */\nexport type IndexSpecification = OneOrMore<\n  | string\n  | [string, IndexDirection]\n  | { [key: string]: IndexDirection }\n  | [string, IndexDirection][]\n  | { [key: string]: IndexDirection }[]\n>;\n\n/** @public */\nexport interface IndexDescription\n  extends Pick<\n    CreateIndexesOptions,\n    | 'background'\n    | 'unique'\n    | 'partialFilterExpression'\n    | 'sparse'\n    | 'hidden'\n    | 'expireAfterSeconds'\n    | 'storageEngine'\n    | 'version'\n    | 'weights'\n    | 'default_language'\n    | 'language_override'\n    | 'textIndexVersion'\n    | '2dsphereIndexVersion'\n    | 'bits'\n    | 'min'\n    | 'max'\n    | 'bucketSize'\n    | 'wildcardProjection'\n  > {\n  collation?: CollationOptions;\n  name?: string;\n  key: Document;\n}\n\n/** @public */\nexport interface CreateIndexesOptions extends CommandOperationOptions {\n  /** Creates the index in the background, yielding whenever possible. */\n  background?: boolean;\n  /** Creates an unique index. */\n  unique?: boolean;\n  /** Override the autogenerated index name (useful if the resulting name is larger than 128 bytes) */\n  name?: string;\n  /** Creates a partial index based on the given filter object (MongoDB 3.2 or higher) */\n  partialFilterExpression?: Document;\n  /** Creates a sparse index. */\n  sparse?: boolean;\n  /** Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher) */\n  expireAfterSeconds?: number;\n  /** Allows users to configure the storage engine on a per-index basis when creating an index. (MongoDB 3.0 or higher) */\n  storageEngine?: Document;\n  /** (MongoDB 4.4. or higher) Specifies how many data-bearing members of a replica set, including the primary, must complete the index builds successfully before the primary marks the indexes as ready. This option accepts the same values for the \"w\" field in a write concern plus \"votingMembers\", which indicates all voting data-bearing nodes. */\n  commitQuorum?: number | string;\n  /** Specifies the index version number, either 0 or 1. */\n  version?: number;\n  // text indexes\n  weights?: Document;\n  default_language?: string;\n  language_override?: string;\n  textIndexVersion?: number;\n  // 2d-sphere indexes\n  '2dsphereIndexVersion'?: number;\n  // 2d indexes\n  bits?: number;\n  /** For geospatial indexes set the lower bound for the co-ordinates. */\n  min?: number;\n  /** For geospatial indexes set the high bound for the co-ordinates. */\n  max?: number;\n  // geoHaystack Indexes\n  bucketSize?: number;\n  // wildcard indexes\n  wildcardProjection?: Document;\n  /** Specifies that the index should exist on the target collection but should not be used by the query planner when executing operations. (MongoDB 4.4 or higher) */\n  hidden?: boolean;\n}\n\nfunction makeIndexSpec(indexSpec: IndexSpecification, options: any): IndexDescription {\n  const indexParameters = parseIndexOptions(indexSpec);\n\n  // Generate the index name\n  const name = typeof options.name === 'string' ? options.name : indexParameters.name;\n\n  // Set up the index\n  const finalIndexSpec: Document = { name, key: indexParameters.fieldHash };\n\n  // merge valid index options into the index spec\n  for (const optionName in options) {\n    if (VALID_INDEX_OPTIONS.has(optionName)) {\n      finalIndexSpec[optionName] = options[optionName];\n    }\n  }\n\n  return finalIndexSpec as IndexDescription;\n}\n\n/** @internal */\nexport class IndexesOperation extends AbstractOperation<Document[]> {\n  override options: IndexInformationOptions;\n  collection: Collection;\n\n  constructor(collection: Collection, options: IndexInformationOptions) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document[]>\n  ): void {\n    const coll = this.collection;\n    const options = this.options;\n\n    indexInformation(\n      coll.s.db,\n      coll.collectionName,\n      { full: true, ...options, readPreference: this.readPreference, session },\n      callback\n    );\n  }\n}\n\n/** @internal */\nexport class CreateIndexesOperation<\n  T extends string | string[] = string[]\n> extends CommandOperation<T> {\n  override options: CreateIndexesOptions;\n  collectionName: string;\n  indexes: IndexDescription[];\n\n  constructor(\n    parent: OperationParent,\n    collectionName: string,\n    indexes: IndexDescription[],\n    options?: CreateIndexesOptions\n  ) {\n    super(parent, options);\n\n    this.options = options ?? {};\n    this.collectionName = collectionName;\n\n    this.indexes = indexes;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<T>\n  ): void {\n    const options = this.options;\n    const indexes = this.indexes;\n\n    const serverWireVersion = maxWireVersion(server);\n\n    // Ensure we generate the correct name if the parameter is not set\n    for (let i = 0; i < indexes.length; i++) {\n      // Did the user pass in a collation, check if our write server supports it\n      if (indexes[i].collation && serverWireVersion < 5) {\n        callback(\n          new MongoCompatibilityError(\n            `Server ${server.name}, which reports wire version ${serverWireVersion}, ` +\n              'does not support collation'\n          )\n        );\n        return;\n      }\n\n      if (indexes[i].name == null) {\n        const keys = [];\n\n        for (const name in indexes[i].key) {\n          keys.push(`${name}_${indexes[i].key[name]}`);\n        }\n\n        // Set the name\n        indexes[i].name = keys.join('_');\n      }\n    }\n\n    const cmd: Document = { createIndexes: this.collectionName, indexes };\n\n    if (options.commitQuorum != null) {\n      if (serverWireVersion < 9) {\n        callback(\n          new MongoCompatibilityError(\n            'Option `commitQuorum` for `createIndexes` not supported on servers < 4.4'\n          )\n        );\n        return;\n      }\n      cmd.commitQuorum = options.commitQuorum;\n    }\n\n    // collation is set on each index, it should not be defined at the root\n    this.options.collation = undefined;\n\n    super.executeCommand(server, session, cmd, err => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const indexNames = indexes.map(index => index.name || '');\n      callback(undefined, indexNames as T);\n    });\n  }\n}\n\n/** @internal */\nexport class CreateIndexOperation extends CreateIndexesOperation<string> {\n  constructor(\n    parent: OperationParent,\n    collectionName: string,\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions\n  ) {\n    // createIndex can be called with a variety of styles:\n    //   coll.createIndex('a');\n    //   coll.createIndex({ a: 1 });\n    //   coll.createIndex([['a', 1]]);\n    // createIndexes is always called with an array of index spec objects\n\n    super(parent, collectionName, [makeIndexSpec(indexSpec, options)], options);\n  }\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<string>\n  ): void {\n    super.execute(server, session, (err, indexNames) => {\n      if (err || !indexNames) return callback(err);\n      return callback(undefined, indexNames[0]);\n    });\n  }\n}\n\n/** @internal */\nexport class EnsureIndexOperation extends CreateIndexOperation {\n  db: Db;\n\n  constructor(\n    db: Db,\n    collectionName: string,\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions\n  ) {\n    super(db, collectionName, indexSpec, options);\n\n    this.readPreference = ReadPreference.primary;\n    this.db = db;\n    this.collectionName = collectionName;\n  }\n\n  override execute(server: Server, session: ClientSession | undefined, callback: Callback): void {\n    const indexName = this.indexes[0].name;\n    const cursor = this.db.collection(this.collectionName).listIndexes({ session });\n    cursor.toArray((err, indexes) => {\n      /// ignore \"NamespaceNotFound\" errors\n      if (err && (err as MongoServerError).code !== MONGODB_ERROR_CODES.NamespaceNotFound) {\n        return callback(err);\n      }\n\n      if (indexes) {\n        indexes = Array.isArray(indexes) ? indexes : [indexes];\n        if (indexes.some(index => index.name === indexName)) {\n          callback(undefined, indexName);\n          return;\n        }\n      }\n\n      super.execute(server, session, callback);\n    });\n  }\n}\n\n/** @public */\nexport type DropIndexesOptions = CommandOperationOptions;\n\n/** @internal */\nexport class DropIndexOperation extends CommandOperation<Document> {\n  override options: DropIndexesOptions;\n  collection: Collection;\n  indexName: string;\n\n  constructor(collection: Collection, indexName: string, options?: DropIndexesOptions) {\n    super(collection, options);\n\n    this.options = options ?? {};\n    this.collection = collection;\n    this.indexName = indexName;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const cmd = { dropIndexes: this.collection.collectionName, index: this.indexName };\n    super.executeCommand(server, session, cmd, callback);\n  }\n}\n\n/** @internal */\nexport class DropIndexesOperation extends DropIndexOperation {\n  constructor(collection: Collection, options: DropIndexesOptions) {\n    super(collection, '*', options);\n  }\n\n  override execute(server: Server, session: ClientSession | undefined, callback: Callback): void {\n    super.execute(server, session, err => {\n      if (err) return callback(err, false);\n      callback(undefined, true);\n    });\n  }\n}\n\n/** @public */\nexport interface ListIndexesOptions extends CommandOperationOptions {\n  /** The batchSize for the returned command cursor or if pre 2.8 the systems batch collection */\n  batchSize?: number;\n}\n\n/** @internal */\nexport class ListIndexesOperation extends CommandOperation<Document> {\n  override options: ListIndexesOptions;\n  collectionNamespace: MongoDBNamespace;\n\n  constructor(collection: Collection, options?: ListIndexesOptions) {\n    super(collection, options);\n\n    this.options = options ?? {};\n    this.collectionNamespace = collection.s.namespace;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const serverWireVersion = maxWireVersion(server);\n\n    const cursor = this.options.batchSize ? { batchSize: this.options.batchSize } : {};\n\n    const command: Document = { listIndexes: this.collectionNamespace.collection, cursor };\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (serverWireVersion >= 9 && this.options.comment !== undefined) {\n      command.comment = this.options.comment;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\n/** @internal */\nexport class IndexExistsOperation extends AbstractOperation<boolean> {\n  override options: IndexInformationOptions;\n  collection: Collection;\n  indexes: string | string[];\n\n  constructor(\n    collection: Collection,\n    indexes: string | string[],\n    options: IndexInformationOptions\n  ) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.indexes = indexes;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<boolean>\n  ): void {\n    const coll = this.collection;\n    const indexes = this.indexes;\n\n    indexInformation(\n      coll.s.db,\n      coll.collectionName,\n      { ...this.options, readPreference: this.readPreference, session },\n      (err, indexInformation) => {\n        // If we have an error return\n        if (err != null) return callback(err);\n        // Let's check for the index names\n        if (!Array.isArray(indexes)) return callback(undefined, indexInformation[indexes] != null);\n        // Check in list of indexes\n        for (let i = 0; i < indexes.length; i++) {\n          if (indexInformation[indexes[i]] == null) {\n            return callback(undefined, false);\n          }\n        }\n\n        // All keys found return true\n        return callback(undefined, true);\n      }\n    );\n  }\n}\n\n/** @internal */\nexport class IndexInformationOperation extends AbstractOperation<Document> {\n  override options: IndexInformationOptions;\n  db: Db;\n  name: string;\n\n  constructor(db: Db, name: string, options?: IndexInformationOptions) {\n    super(options);\n    this.options = options ?? {};\n    this.db = db;\n    this.name = name;\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<Document>\n  ): void {\n    const db = this.db;\n    const name = this.name;\n\n    indexInformation(\n      db,\n      name,\n      { ...this.options, readPreference: this.readPreference, session },\n      callback\n    );\n  }\n}\n\ndefineAspects(ListIndexesOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.CURSOR_CREATING\n]);\ndefineAspects(CreateIndexesOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(CreateIndexOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(EnsureIndexOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(DropIndexOperation, [Aspect.WRITE_OPERATION]);\ndefineAspects(DropIndexesOperation, [Aspect.WRITE_OPERATION]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}