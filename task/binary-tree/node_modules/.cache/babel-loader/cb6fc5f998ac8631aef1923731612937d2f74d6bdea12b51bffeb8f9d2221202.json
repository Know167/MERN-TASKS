{"ast":null,"code":"\"use strict\";\n\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateSessionFromResponse = exports.applySession = exports.ServerSessionPool = exports.ServerSession = exports.maybeClearPinnedConnection = exports.ClientSession = void 0;\nconst bson_1 = require(\"./bson\");\nconst metrics_1 = require(\"./cmap/metrics\");\nconst shared_1 = require(\"./cmap/wire_protocol/shared\");\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst promise_provider_1 = require(\"./promise_provider\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst common_1 = require(\"./sdam/common\");\nconst transactions_1 = require(\"./transactions\");\nconst utils_1 = require(\"./utils\");\nconst minWireVersionForShardedTransactions = 8;\n/** @internal */\nconst kServerSession = Symbol('serverSession');\n/** @internal */\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\nconst kPinnedConnection = Symbol('pinnedConnection');\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */\nconst kTxnNumberIncrement = Symbol('txnNumberIncrement');\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nclass ClientSession extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a client session.\n   * @internal\n   * @param client - The current client\n   * @param sessionPool - The server session pool (Internal Class)\n   * @param options - Optional settings\n   * @param clientOptions - Optional settings provided when creating a MongoClient\n   */\n  constructor(client, sessionPool, options, clientOptions) {\n    super();\n    /** @internal */\n    this[_a] = false;\n    if (client == null) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a MongoClient');\n    }\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n    }\n    options = options !== null && options !== void 0 ? options : {};\n    if (options.snapshot === true) {\n      this[kSnapshotEnabled] = true;\n      if (options.causalConsistency === true) {\n        throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n      }\n    }\n    this.client = client;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n    this.explicit = !!options.explicit;\n    this[kServerSession] = this.explicit ? this.sessionPool.acquire() : null;\n    this[kTxnNumberIncrement] = 0;\n    this.supports = {\n      causalConsistency: options.snapshot !== true && options.causalConsistency !== false\n    };\n    this.clusterTime = options.initialClusterTime;\n    this.operationTime = undefined;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new transactions_1.Transaction();\n  }\n  /** The server id associated with this session */\n  get id() {\n    var _b;\n    return (_b = this[kServerSession]) === null || _b === void 0 ? void 0 : _b.id;\n  }\n  get serverSession() {\n    let serverSession = this[kServerSession];\n    if (serverSession == null) {\n      if (this.explicit) {\n        throw new error_1.MongoRuntimeError('Unexpected null serverSession for an explicit session');\n      }\n      if (this.hasEnded) {\n        throw new error_1.MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n      }\n      serverSession = this.sessionPool.acquire();\n      this[kServerSession] = serverSession;\n    }\n    return serverSession;\n  }\n  /** Whether or not this session is configured for snapshot reads */\n  get snapshotEnabled() {\n    return this[kSnapshotEnabled];\n  }\n  get loadBalanced() {\n    var _b;\n    return ((_b = this.client.topology) === null || _b === void 0 ? void 0 : _b.description.type) === common_1.TopologyType.LoadBalanced;\n  }\n  /** @internal */\n  get pinnedConnection() {\n    return this[kPinnedConnection];\n  }\n  /** @internal */\n  pin(conn) {\n    if (this[kPinnedConnection]) {\n      throw TypeError('Cannot pin multiple connections to the same session');\n    }\n    this[kPinnedConnection] = conn;\n    conn.emit(constants_1.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n  }\n  /** @internal */\n  unpin(options) {\n    if (this.loadBalanced) {\n      return maybeClearPinnedConnection(this, options);\n    }\n    this.transaction.unpinServer();\n  }\n  get isPinned() {\n    return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n  }\n  endSession(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    const finalOptions = {\n      force: true,\n      ...options\n    };\n    return (0, utils_1.maybePromise)(callback, done => {\n      if (this.hasEnded) {\n        maybeClearPinnedConnection(this, finalOptions);\n        return done();\n      }\n      const completeEndSession = () => {\n        maybeClearPinnedConnection(this, finalOptions);\n        const serverSession = this[kServerSession];\n        if (serverSession != null) {\n          // release the server session back to the pool\n          this.sessionPool.release(serverSession);\n          // Make sure a new serverSession never makes it onto this ClientSession\n          Object.defineProperty(this, kServerSession, {\n            value: ServerSession.clone(serverSession),\n            writable: false\n          });\n        }\n        // mark the session as ended, and emit a signal\n        this.hasEnded = true;\n        this.emit('ended', this);\n        // spec indicates that we should ignore all errors for `endSessions`\n        done();\n      };\n      if (this.inTransaction()) {\n        // If we've reached endSession and the transaction is still active\n        // by default we abort it\n        this.abortTransaction(err => {\n          if (err) return done(err);\n          completeEndSession();\n        });\n        return;\n      }\n      completeEndSession();\n    });\n  }\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n  advanceOperationTime(operationTime) {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n  /**\n   * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n   *\n   * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n   */\n  advanceClusterTime(clusterTime) {\n    var _b, _c;\n    if (!clusterTime || typeof clusterTime !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n    }\n    if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n      throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n    }\n    if (!clusterTime.signature || ((_b = clusterTime.signature.hash) === null || _b === void 0 ? void 0 : _b._bsontype) !== 'Binary' || typeof clusterTime.signature.keyId !== 'number' && ((_c = clusterTime.signature.keyId) === null || _c === void 0 ? void 0 : _c._bsontype) !== 'Long' // apparently we decode the key to number?\n    ) {\n      throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n    }\n    (0, common_1._advanceClusterTime)(this, clusterTime);\n  }\n  /**\n   * Used to determine if this session equals another\n   *\n   * @param session - The session to compare to\n   */\n  equals(session) {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n    if (this.id == null || session.id == null) {\n      return false;\n    }\n    return this.id.id.buffer.equals(session.id.id.buffer);\n  }\n  /**\n   * Increment the transaction number on the internal ServerSession\n   *\n   * @privateRemarks\n   * This helper increments a value stored on the client session that will be\n   * added to the serverSession's txnNumber upon applying it to a command.\n   * This is because the serverSession is lazily acquired after a connection is obtained\n   */\n  incrementTransactionNumber() {\n    this[kTxnNumberIncrement] += 1;\n  }\n  /** @returns whether this session is currently in a transaction or not */\n  inTransaction() {\n    return this.transaction.isActive;\n  }\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param options - Options for the transaction\n   */\n  startTransaction(options) {\n    var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    if (this[kSnapshotEnabled]) {\n      throw new error_1.MongoCompatibilityError('Transactions are not allowed with snapshot sessions');\n    }\n    if (this.inTransaction()) {\n      throw new error_1.MongoTransactionError('Transaction already in progress');\n    }\n    if (this.isPinned && this.transaction.isCommitted) {\n      this.unpin();\n    }\n    const topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.client.topology);\n    if ((0, shared_1.isSharded)(this.client.topology) && topologyMaxWireVersion != null && topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n      throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n    }\n    // increment txnNumber\n    this.incrementTransactionNumber();\n    // create transaction state\n    this.transaction = new transactions_1.Transaction({\n      readConcern: (_c = (_b = options === null || options === void 0 ? void 0 : options.readConcern) !== null && _b !== void 0 ? _b : this.defaultTransactionOptions.readConcern) !== null && _c !== void 0 ? _c : (_d = this.clientOptions) === null || _d === void 0 ? void 0 : _d.readConcern,\n      writeConcern: (_f = (_e = options === null || options === void 0 ? void 0 : options.writeConcern) !== null && _e !== void 0 ? _e : this.defaultTransactionOptions.writeConcern) !== null && _f !== void 0 ? _f : (_g = this.clientOptions) === null || _g === void 0 ? void 0 : _g.writeConcern,\n      readPreference: (_j = (_h = options === null || options === void 0 ? void 0 : options.readPreference) !== null && _h !== void 0 ? _h : this.defaultTransactionOptions.readPreference) !== null && _j !== void 0 ? _j : (_k = this.clientOptions) === null || _k === void 0 ? void 0 : _k.readPreference,\n      maxCommitTimeMS: (_l = options === null || options === void 0 ? void 0 : options.maxCommitTimeMS) !== null && _l !== void 0 ? _l : this.defaultTransactionOptions.maxCommitTimeMS\n    });\n    this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n  }\n  commitTransaction(callback) {\n    return (0, utils_1.maybePromise)(callback, cb => endTransaction(this, 'commitTransaction', cb));\n  }\n  abortTransaction(callback) {\n    return (0, utils_1.maybePromise)(callback, cb => endTransaction(this, 'abortTransaction', cb));\n  }\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   */\n  toBSON() {\n    throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n  }\n  /**\n   * Runs a provided callback within a transaction, retrying either the commitTransaction operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * **IMPORTANT:** This method requires the user to return a Promise, and `await` all operations.\n   * Any callbacks that do not return a Promise will result in undefined behavior.\n   *\n   * @remarks\n   * This function:\n   * - Will return the command response from the final commitTransaction if every operation is successful (can be used as a truthy object)\n   * - Will return `undefined` if the transaction is explicitly aborted with `await session.abortTransaction()`\n   * - Will throw if one of the operations throws or `throw` statement is used inside the `withTransaction` callback\n   *\n   * Checkout a descriptive example here:\n   * @see https://www.mongodb.com/developer/quickstart/node-transactions/\n   *\n   * @param fn - callback to run within a transaction\n   * @param options - optional settings for the transaction\n   * @returns A raw command response or undefined\n   */\n  withTransaction(fn, options) {\n    const startTime = (0, utils_1.now)();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n}\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set(['CannotSatisfyWriteConcern', 'UnknownReplWriteConcern', 'UnsatisfiableWriteConcern']);\nfunction hasNotTimedOut(startTime, max) {\n  return (0, utils_1.calculateDurationInMs)(startTime) < max;\n}\nfunction isUnknownTransactionCommitResult(err) {\n  const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError && err.codeName && NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n  return isMaxTimeMSExpiredError(err) || !isNonDeterministicWriteConcernError && err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern && err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern;\n}\nfunction maybeClearPinnedConnection(session, options) {\n  // unpin a connection if it has been pinned\n  const conn = session[kPinnedConnection];\n  const error = options === null || options === void 0 ? void 0 : options.error;\n  if (session.inTransaction() && error && error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n    return;\n  }\n  const topology = session.client.topology;\n  // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n  //       to validate that we don't unpin on _all_ errors?\n  if (conn && topology != null) {\n    const servers = Array.from(topology.s.servers.values());\n    const loadBalancer = servers[0];\n    if ((options === null || options === void 0 ? void 0 : options.error) == null || (options === null || options === void 0 ? void 0 : options.force)) {\n      loadBalancer.s.pool.checkIn(conn);\n      conn.emit(constants_1.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n      if (options === null || options === void 0 ? void 0 : options.forceClear) {\n        loadBalancer.s.pool.clear(conn.serviceId);\n      }\n    }\n    session[kPinnedConnection] = undefined;\n  }\n}\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\nfunction isMaxTimeMSExpiredError(err) {\n  if (err == null || !(err instanceof error_1.MongoServerError)) {\n    return false;\n  }\n  return err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired || err.writeConcernError && err.writeConcernError.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n}\nfunction attemptTransactionCommit(session, startTime, fn, options) {\n  return session.commitTransaction().catch(err => {\n    if (err instanceof error_1.MongoError && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) && !isMaxTimeMSExpiredError(err)) {\n      if (err.hasErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult)) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n      if (err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n    throw err;\n  });\n}\nconst USER_EXPLICIT_TXN_END_STATES = new Set([transactions_1.TxnState.NO_TRANSACTION, transactions_1.TxnState.TRANSACTION_COMMITTED, transactions_1.TxnState.TRANSACTION_ABORTED]);\nfunction userExplicitlyEndedTransaction(session) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\nfunction attemptTransaction(session, startTime, fn, options) {\n  const Promise = promise_provider_1.PromiseProvider.get();\n  session.startTransaction(options);\n  let promise;\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n  if (!(0, utils_1.isPromiseLike)(promise)) {\n    session.abortTransaction().catch(() => null);\n    throw new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise');\n  }\n  return promise.then(() => {\n    if (userExplicitlyEndedTransaction(session)) {\n      return;\n    }\n    return attemptTransactionCommit(session, startTime, fn, options);\n  }, err => {\n    function maybeRetryOrThrow(err) {\n      if (err instanceof error_1.MongoError && err.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError) && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n      if (isMaxTimeMSExpiredError(err)) {\n        err.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n      }\n      throw err;\n    }\n    if (session.inTransaction()) {\n      return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n    }\n    return maybeRetryOrThrow(err);\n  });\n}\nfunction endTransaction(session, commandName, callback) {\n  // handle any initial problematic cases\n  const txnState = session.transaction.state;\n  if (txnState === transactions_1.TxnState.NO_TRANSACTION) {\n    callback(new error_1.MongoTransactionError('No transaction started'));\n    return;\n  }\n  if (commandName === 'commitTransaction') {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback();\n      return;\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction'));\n      return;\n    }\n  } else {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n      callback();\n      return;\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction twice'));\n      return;\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction'));\n      return;\n    }\n  }\n  // construct and send the command\n  const command = {\n    [commandName]: 1\n  };\n  // apply a writeConcern if specified\n  let writeConcern;\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.writeConcern) {\n    writeConcern = {\n      w: session.clientOptions.writeConcern.w\n    };\n  }\n  if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({\n      wtimeout: 10000\n    }, writeConcern, {\n      w: 'majority'\n    });\n  }\n  if (writeConcern) {\n    Object.assign(command, {\n      writeConcern\n    });\n  }\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, {\n      maxTimeMS: session.transaction.options.maxTimeMS\n    });\n  }\n  function commandHandler(error, result) {\n    if (commandName !== 'commitTransaction') {\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n      if (session.loadBalanced) {\n        maybeClearPinnedConnection(session, {\n          force: false\n        });\n      }\n      // The spec indicates that we should ignore all errors on `abortTransaction`\n      return callback();\n    }\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n    if (error instanceof error_1.MongoError) {\n      if (error.hasErrorLabel(error_1.MongoErrorLabel.RetryableWriteError) || error instanceof error_1.MongoWriteConcernError || isMaxTimeMSExpiredError(error)) {\n        if (isUnknownTransactionCommitResult(error)) {\n          error.addErrorLabel(error_1.MongoErrorLabel.UnknownTransactionCommitResult);\n          // per txns spec, must unpin session in this case\n          session.unpin({\n            error\n          });\n        }\n      } else if (error.hasErrorLabel(error_1.MongoErrorLabel.TransientTransactionError)) {\n        session.unpin({\n          error\n        });\n      }\n    }\n    callback(error, result);\n  }\n  if (session.transaction.recoveryToken) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  }\n  // send the command\n  (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(undefined, command, {\n    session,\n    readPreference: read_preference_1.ReadPreference.primary,\n    bypassPinningCheck: true\n  }), (error, result) => {\n    if (command.abortTransaction) {\n      // always unpin on abort regardless of command outcome\n      session.unpin();\n    }\n    if (error instanceof error_1.MongoError && error.hasErrorLabel(error_1.MongoErrorLabel.RetryableWriteError)) {\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\n      if (command.commitTransaction) {\n        // per txns spec, must unpin session in this case\n        session.unpin({\n          force: true\n        });\n        command.writeConcern = Object.assign({\n          wtimeout: 10000\n        }, command.writeConcern, {\n          w: 'majority'\n        });\n      }\n      return (0, execute_operation_1.executeOperation)(session.client, new run_command_1.RunAdminCommandOperation(undefined, command, {\n        session,\n        readPreference: read_preference_1.ReadPreference.primary,\n        bypassPinningCheck: true\n      }), commandHandler);\n    }\n    commandHandler(error, result);\n  });\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nclass ServerSession {\n  /** @internal */\n  constructor() {\n    this.id = {\n      id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID)\n    };\n    this.lastUse = (0, utils_1.now)();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n  /**\n   * Determines if the server session has timed out.\n   *\n   * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n   */\n  hasTimedOut(sessionTimeoutMinutes) {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000 % 3600000 / 60000);\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n  /**\n   * @internal\n   * Cloning meant to keep a readable reference to the server session data\n   * after ClientSession has ended\n   */\n  static clone(serverSession) {\n    const arrayBuffer = new ArrayBuffer(16);\n    const idBytes = Buffer.from(arrayBuffer);\n    idBytes.set(serverSession.id.id.buffer);\n    const id = new bson_1.Binary(idBytes, serverSession.id.id.sub_type);\n    // Manual prototype construction to avoid modifying the constructor of this class\n    return Object.setPrototypeOf({\n      id: {\n        id\n      },\n      lastUse: serverSession.lastUse,\n      txnNumber: serverSession.txnNumber,\n      isDirty: serverSession.isDirty\n    }, ServerSession.prototype);\n  }\n}\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nclass ServerSessionPool {\n  constructor(client) {\n    if (client == null) {\n      throw new error_1.MongoRuntimeError('ServerSessionPool requires a MongoClient');\n    }\n    this.client = client;\n    this.sessions = [];\n  }\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession is created.\n   */\n  acquire() {\n    var _b, _c, _d;\n    const sessionTimeoutMinutes = (_c = (_b = this.client.topology) === null || _b === void 0 ? void 0 : _b.logicalSessionTimeoutMinutes) !== null && _c !== void 0 ? _c : 10;\n    let session = null;\n    // Try to obtain from session pool\n    while (this.sessions.length > 0) {\n      const potentialSession = this.sessions.shift();\n      if (potentialSession != null && (!!((_d = this.client.topology) === null || _d === void 0 ? void 0 : _d.loadBalanced) || !potentialSession.hasTimedOut(sessionTimeoutMinutes))) {\n        session = potentialSession;\n        break;\n      }\n    }\n    // If nothing valid came from the pool make a new one\n    if (session == null) {\n      session = new ServerSession();\n    }\n    return session;\n  }\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   *\n   * @param session - The session to release to the pool\n   */\n  release(session) {\n    var _b, _c, _d;\n    const sessionTimeoutMinutes = (_c = (_b = this.client.topology) === null || _b === void 0 ? void 0 : _b.logicalSessionTimeoutMinutes) !== null && _c !== void 0 ? _c : 10;\n    if (((_d = this.client.topology) === null || _d === void 0 ? void 0 : _d.loadBalanced) && !sessionTimeoutMinutes) {\n      this.sessions.unshift(session);\n    }\n    if (!sessionTimeoutMinutes) {\n      return;\n    }\n    while (this.sessions.length) {\n      const pooledSession = this.sessions[this.sessions.length - 1];\n      if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n        this.sessions.pop();\n      } else {\n        break;\n      }\n    }\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      }\n      // otherwise, readd this session to the session pool\n      this.sessions.unshift(session);\n    }\n  }\n}\nexports.ServerSessionPool = ServerSessionPool;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nfunction applySession(session, command, options) {\n  var _b, _c;\n  if (session.hasEnded) {\n    return new error_1.MongoExpiredSessionError();\n  }\n  // May acquire serverSession here\n  const serverSession = session.serverSession;\n  if (serverSession == null) {\n    return new error_1.MongoRuntimeError('Unable to acquire server session');\n  }\n  if (((_b = options.writeConcern) === null || _b === void 0 ? void 0 : _b.w) === 0) {\n    if (session && session.explicit) {\n      // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n      return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n    }\n    return;\n  }\n  // mark the last use of this session, and apply the `lsid`\n  serverSession.lastUse = (0, utils_1.now)();\n  command.lsid = serverSession.id;\n  const inTxnOrTxnCommand = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n  const isRetryableWrite = !!options.willRetryWrite;\n  if (isRetryableWrite || inTxnOrTxnCommand) {\n    serverSession.txnNumber += session[kTxnNumberIncrement];\n    session[kTxnNumberIncrement] = 0;\n    command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n  }\n  if (!inTxnOrTxnCommand) {\n    if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n      session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n    }\n    if (session.supports.causalConsistency && session.operationTime && (0, utils_1.commandSupportsReadConcern)(command, options)) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    } else if (session[kSnapshotEnabled]) {\n      command.readConcern = command.readConcern || {\n        level: read_concern_1.ReadConcernLevel.snapshot\n      };\n      if (session[kSnapshotTime] != null) {\n        Object.assign(command.readConcern, {\n          atClusterTime: session[kSnapshotTime]\n        });\n      }\n    }\n    return;\n  }\n  // now attempt to apply transaction-specific sessions data\n  // `autocommit` must always be false to differentiate from retryable writes\n  command.autocommit = false;\n  if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n    const readConcern = session.transaction.options.readConcern || ((_c = session === null || session === void 0 ? void 0 : session.clientOptions) === null || _c === void 0 ? void 0 : _c.readConcern);\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    }\n  }\n  return;\n}\nexports.applySession = applySession;\nfunction updateSessionFromResponse(session, document) {\n  var _b;\n  if (document.$clusterTime) {\n    (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n  }\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n  if ((session === null || session === void 0 ? void 0 : session[kSnapshotEnabled]) && session[kSnapshotTime] == null) {\n    // find and aggregate commands return atClusterTime on the cursor\n    // distinct includes it in the response body\n    const atClusterTime = ((_b = document.cursor) === null || _b === void 0 ? void 0 : _b.atClusterTime) || document.atClusterTime;\n    if (atClusterTime) {\n      session[kSnapshotTime] = atClusterTime;\n    }\n  }\n}\nexports.updateSessionFromResponse = updateSessionFromResponse;","map":{"version":3,"names":["bson_1","require","metrics_1","shared_1","constants_1","error_1","mongo_types_1","execute_operation_1","run_command_1","promise_provider_1","read_concern_1","read_preference_1","common_1","transactions_1","utils_1","minWireVersionForShardedTransactions","kServerSession","Symbol","kSnapshotTime","kSnapshotEnabled","kPinnedConnection","kTxnNumberIncrement","ClientSession","TypedEventEmitter","constructor","client","sessionPool","options","clientOptions","_a","MongoRuntimeError","ServerSessionPool","snapshot","causalConsistency","MongoInvalidArgumentError","hasEnded","explicit","acquire","supports","clusterTime","initialClusterTime","operationTime","undefined","owner","defaultTransactionOptions","Object","assign","transaction","Transaction","id","_b","serverSession","snapshotEnabled","loadBalanced","topology","description","type","TopologyType","LoadBalanced","pinnedConnection","pin","conn","TypeError","emit","PINNED","inTransaction","ConnectionPoolMetrics","TXN","CURSOR","unpin","maybeClearPinnedConnection","unpinServer","isPinned","endSession","callback","finalOptions","force","maybePromise","done","completeEndSession","release","defineProperty","value","ServerSession","clone","writable","abortTransaction","err","advanceOperationTime","greaterThan","advanceClusterTime","_bsontype","signature","hash","keyId","_c","_advanceClusterTime","equals","session","buffer","incrementTransactionNumber","isActive","startTransaction","MongoCompatibilityError","MongoTransactionError","isCommitted","topologyMaxWireVersion","maxWireVersion","isSharded","readConcern","_d","writeConcern","_f","_e","_g","readPreference","_j","_h","_k","maxCommitTimeMS","_l","transition","TxnState","STARTING_TRANSACTION","commitTransaction","cb","endTransaction","toBSON","withTransaction","fn","startTime","now","attemptTransaction","exports","MAX_WITH_TRANSACTION_TIMEOUT","NON_DETERMINISTIC_WRITE_CONCERN_ERRORS","Set","hasNotTimedOut","max","calculateDurationInMs","isUnknownTransactionCommitResult","isNonDeterministicWriteConcernError","MongoServerError","codeName","has","isMaxTimeMSExpiredError","code","MONGODB_ERROR_CODES","UnsatisfiableWriteConcern","UnknownReplWriteConcern","error","MongoError","hasErrorLabel","MongoErrorLabel","TransientTransactionError","servers","Array","from","s","values","loadBalancer","pool","checkIn","UNPINNED","state","NO_TRANSACTION","forceClear","clear","serviceId","MaxTimeMSExpired","writeConcernError","attemptTransactionCommit","catch","UnknownTransactionCommitResult","USER_EXPLICIT_TXN_END_STATES","TRANSACTION_COMMITTED","TRANSACTION_ABORTED","userExplicitlyEndedTransaction","Promise","PromiseProvider","get","promise","reject","isPromiseLike","then","maybeRetryOrThrow","addErrorLabel","commandName","txnState","TRANSACTION_COMMITTED_EMPTY","command","w","wtimeout","maxTimeMS","commandHandler","result","RetryableWriteError","MongoWriteConcernError","recoveryToken","executeOperation","RunAdminCommandOperation","ReadPreference","primary","bypassPinningCheck","Binary","uuidV4","SUBTYPE_UUID","lastUse","txnNumber","isDirty","hasTimedOut","sessionTimeoutMinutes","idleTimeMinutes","Math","round","arrayBuffer","ArrayBuffer","idBytes","Buffer","set","sub_type","setPrototypeOf","prototype","sessions","logicalSessionTimeoutMinutes","length","potentialSession","shift","unshift","pooledSession","pop","applySession","MongoExpiredSessionError","MongoAPIError","lsid","inTxnOrTxnCommand","isTransactionCommand","isRetryableWrite","willRetryWrite","Long","fromNumber","commandSupportsReadConcern","afterClusterTime","level","ReadConcernLevel","atClusterTime","autocommit","TRANSACTION_IN_PROGRESS","updateSessionFromResponse","document","$clusterTime","_recoveryToken","cursor"],"sources":["C:\\Users\\Jatin\\node_modules\\mongodb\\src\\sessions.ts"],"sourcesContent":["import { Binary, Document, Long, Timestamp } from './bson';\nimport type { CommandOptions, Connection } from './cmap/connection';\nimport { ConnectionPoolMetrics } from './cmap/metrics';\nimport { isSharded } from './cmap/wire_protocol/shared';\nimport { PINNED, UNPINNED } from './constants';\nimport type { AbstractCursor } from './cursor/abstract_cursor';\nimport {\n  AnyError,\n  MongoAPIError,\n  MongoCompatibilityError,\n  MONGODB_ERROR_CODES,\n  MongoDriverError,\n  MongoError,\n  MongoErrorLabel,\n  MongoExpiredSessionError,\n  MongoInvalidArgumentError,\n  MongoRuntimeError,\n  MongoServerError,\n  MongoTransactionError,\n  MongoWriteConcernError\n} from './error';\nimport type { MongoClient, MongoOptions } from './mongo_client';\nimport { TypedEventEmitter } from './mongo_types';\nimport { executeOperation } from './operations/execute_operation';\nimport { RunAdminCommandOperation } from './operations/run_command';\nimport { PromiseProvider } from './promise_provider';\nimport { ReadConcernLevel } from './read_concern';\nimport { ReadPreference } from './read_preference';\nimport { _advanceClusterTime, ClusterTime, TopologyType } from './sdam/common';\nimport { isTransactionCommand, Transaction, TransactionOptions, TxnState } from './transactions';\nimport {\n  calculateDurationInMs,\n  Callback,\n  commandSupportsReadConcern,\n  isPromiseLike,\n  maxWireVersion,\n  maybePromise,\n  now,\n  uuidV4\n} from './utils';\n\nconst minWireVersionForShardedTransactions = 8;\n\n/** @public */\nexport interface ClientSessionOptions {\n  /** Whether causal consistency should be enabled on this session */\n  causalConsistency?: boolean;\n  /** Whether all read operations should be read from the same snapshot for this session (NOTE: not compatible with `causalConsistency=true`) */\n  snapshot?: boolean;\n  /** The default TransactionOptions to use for transactions started on this session. */\n  defaultTransactionOptions?: TransactionOptions;\n\n  /** @internal */\n  owner?: symbol | AbstractCursor;\n  /** @internal */\n  explicit?: boolean;\n  /** @internal */\n  initialClusterTime?: ClusterTime;\n}\n\n/** @public */\nexport type WithTransactionCallback<T = void> = (session: ClientSession) => Promise<T>;\n\n/** @public */\nexport type ClientSessionEvents = {\n  ended(session: ClientSession): void;\n};\n\n/** @internal */\nconst kServerSession = Symbol('serverSession');\n/** @internal */\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\nconst kPinnedConnection = Symbol('pinnedConnection');\n/** @internal Accumulates total number of increments to add to txnNumber when applying session to command */\nconst kTxnNumberIncrement = Symbol('txnNumberIncrement');\n\n/** @public */\nexport interface EndSessionOptions {\n  /**\n   * An optional error which caused the call to end this session\n   * @internal\n   */\n  error?: AnyError;\n  force?: boolean;\n  forceClear?: boolean;\n}\n\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nexport class ClientSession extends TypedEventEmitter<ClientSessionEvents> {\n  /** @internal */\n  client: MongoClient;\n  /** @internal */\n  sessionPool: ServerSessionPool;\n  hasEnded: boolean;\n  clientOptions?: MongoOptions;\n  supports: { causalConsistency: boolean };\n  clusterTime?: ClusterTime;\n  operationTime?: Timestamp;\n  explicit: boolean;\n  /** @internal */\n  owner?: symbol | AbstractCursor;\n  defaultTransactionOptions: TransactionOptions;\n  transaction: Transaction;\n  /** @internal */\n  [kServerSession]: ServerSession | null;\n  /** @internal */\n  [kSnapshotTime]?: Timestamp;\n  /** @internal */\n  [kSnapshotEnabled] = false;\n  /** @internal */\n  [kPinnedConnection]?: Connection;\n  /** @internal */\n  [kTxnNumberIncrement]: number;\n\n  /**\n   * Create a client session.\n   * @internal\n   * @param client - The current client\n   * @param sessionPool - The server session pool (Internal Class)\n   * @param options - Optional settings\n   * @param clientOptions - Optional settings provided when creating a MongoClient\n   */\n  constructor(\n    client: MongoClient,\n    sessionPool: ServerSessionPool,\n    options: ClientSessionOptions,\n    clientOptions?: MongoOptions\n  ) {\n    super();\n\n    if (client == null) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError('ClientSession requires a MongoClient');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options ?? {};\n\n    if (options.snapshot === true) {\n      this[kSnapshotEnabled] = true;\n      if (options.causalConsistency === true) {\n        throw new MongoInvalidArgumentError(\n          'Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive'\n        );\n      }\n    }\n\n    this.client = client;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n\n    this.explicit = !!options.explicit;\n    this[kServerSession] = this.explicit ? this.sessionPool.acquire() : null;\n    this[kTxnNumberIncrement] = 0;\n\n    this.supports = {\n      causalConsistency: options.snapshot !== true && options.causalConsistency !== false\n    };\n\n    this.clusterTime = options.initialClusterTime;\n\n    this.operationTime = undefined;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new Transaction();\n  }\n\n  /** The server id associated with this session */\n  get id(): ServerSessionId | undefined {\n    return this[kServerSession]?.id;\n  }\n\n  get serverSession(): ServerSession {\n    let serverSession = this[kServerSession];\n    if (serverSession == null) {\n      if (this.explicit) {\n        throw new MongoRuntimeError('Unexpected null serverSession for an explicit session');\n      }\n      if (this.hasEnded) {\n        throw new MongoRuntimeError('Unexpected null serverSession for an ended implicit session');\n      }\n      serverSession = this.sessionPool.acquire();\n      this[kServerSession] = serverSession;\n    }\n    return serverSession;\n  }\n\n  /** Whether or not this session is configured for snapshot reads */\n  get snapshotEnabled(): boolean {\n    return this[kSnapshotEnabled];\n  }\n\n  get loadBalanced(): boolean {\n    return this.client.topology?.description.type === TopologyType.LoadBalanced;\n  }\n\n  /** @internal */\n  get pinnedConnection(): Connection | undefined {\n    return this[kPinnedConnection];\n  }\n\n  /** @internal */\n  pin(conn: Connection): void {\n    if (this[kPinnedConnection]) {\n      throw TypeError('Cannot pin multiple connections to the same session');\n    }\n\n    this[kPinnedConnection] = conn;\n    conn.emit(\n      PINNED,\n      this.inTransaction() ? ConnectionPoolMetrics.TXN : ConnectionPoolMetrics.CURSOR\n    );\n  }\n\n  /** @internal */\n  unpin(options?: { force?: boolean; forceClear?: boolean; error?: AnyError }): void {\n    if (this.loadBalanced) {\n      return maybeClearPinnedConnection(this, options);\n    }\n\n    this.transaction.unpinServer();\n  }\n\n  get isPinned(): boolean {\n    return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n  }\n\n  /**\n   * Ends this session on the server\n   *\n   * @param options - Optional settings. Currently reserved for future use\n   * @param callback - Optional callback for completion of this operation\n   */\n  endSession(): Promise<void>;\n  endSession(callback: Callback<void>): void;\n  endSession(options: EndSessionOptions): Promise<void>;\n  endSession(options: EndSessionOptions, callback: Callback<void>): void;\n  endSession(\n    options?: EndSessionOptions | Callback<void>,\n    callback?: Callback<void>\n  ): void | Promise<void> {\n    if (typeof options === 'function') (callback = options), (options = {});\n    const finalOptions = { force: true, ...options };\n\n    return maybePromise(callback, done => {\n      if (this.hasEnded) {\n        maybeClearPinnedConnection(this, finalOptions);\n        return done();\n      }\n\n      const completeEndSession = () => {\n        maybeClearPinnedConnection(this, finalOptions);\n\n        const serverSession = this[kServerSession];\n        if (serverSession != null) {\n          // release the server session back to the pool\n          this.sessionPool.release(serverSession);\n          // Make sure a new serverSession never makes it onto this ClientSession\n          Object.defineProperty(this, kServerSession, {\n            value: ServerSession.clone(serverSession),\n            writable: false\n          });\n        }\n\n        // mark the session as ended, and emit a signal\n        this.hasEnded = true;\n        this.emit('ended', this);\n\n        // spec indicates that we should ignore all errors for `endSessions`\n        done();\n      };\n\n      if (this.inTransaction()) {\n        // If we've reached endSession and the transaction is still active\n        // by default we abort it\n        this.abortTransaction(err => {\n          if (err) return done(err);\n          completeEndSession();\n        });\n\n        return;\n      }\n\n      completeEndSession();\n    });\n  }\n\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n  advanceOperationTime(operationTime: Timestamp): void {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n\n  /**\n   * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n   *\n   * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n   */\n  advanceClusterTime(clusterTime: ClusterTime): void {\n    if (!clusterTime || typeof clusterTime !== 'object') {\n      throw new MongoInvalidArgumentError('input cluster time must be an object');\n    }\n    if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n      throw new MongoInvalidArgumentError(\n        'input cluster time \"clusterTime\" property must be a valid BSON Timestamp'\n      );\n    }\n    if (\n      !clusterTime.signature ||\n      clusterTime.signature.hash?._bsontype !== 'Binary' ||\n      (typeof clusterTime.signature.keyId !== 'number' &&\n        clusterTime.signature.keyId?._bsontype !== 'Long') // apparently we decode the key to number?\n    ) {\n      throw new MongoInvalidArgumentError(\n        'input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId'\n      );\n    }\n\n    _advanceClusterTime(this, clusterTime);\n  }\n\n  /**\n   * Used to determine if this session equals another\n   *\n   * @param session - The session to compare to\n   */\n  equals(session: ClientSession): boolean {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    if (this.id == null || session.id == null) {\n      return false;\n    }\n\n    return this.id.id.buffer.equals(session.id.id.buffer);\n  }\n\n  /**\n   * Increment the transaction number on the internal ServerSession\n   *\n   * @privateRemarks\n   * This helper increments a value stored on the client session that will be\n   * added to the serverSession's txnNumber upon applying it to a command.\n   * This is because the serverSession is lazily acquired after a connection is obtained\n   */\n  incrementTransactionNumber(): void {\n    this[kTxnNumberIncrement] += 1;\n  }\n\n  /** @returns whether this session is currently in a transaction or not */\n  inTransaction(): boolean {\n    return this.transaction.isActive;\n  }\n\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param options - Options for the transaction\n   */\n  startTransaction(options?: TransactionOptions): void {\n    if (this[kSnapshotEnabled]) {\n      throw new MongoCompatibilityError('Transactions are not allowed with snapshot sessions');\n    }\n\n    if (this.inTransaction()) {\n      throw new MongoTransactionError('Transaction already in progress');\n    }\n\n    if (this.isPinned && this.transaction.isCommitted) {\n      this.unpin();\n    }\n\n    const topologyMaxWireVersion = maxWireVersion(this.client.topology);\n    if (\n      isSharded(this.client.topology) &&\n      topologyMaxWireVersion != null &&\n      topologyMaxWireVersion < minWireVersionForShardedTransactions\n    ) {\n      throw new MongoCompatibilityError(\n        'Transactions are not supported on sharded clusters in MongoDB < 4.2.'\n      );\n    }\n\n    // increment txnNumber\n    this.incrementTransactionNumber();\n    // create transaction state\n    this.transaction = new Transaction({\n      readConcern:\n        options?.readConcern ??\n        this.defaultTransactionOptions.readConcern ??\n        this.clientOptions?.readConcern,\n      writeConcern:\n        options?.writeConcern ??\n        this.defaultTransactionOptions.writeConcern ??\n        this.clientOptions?.writeConcern,\n      readPreference:\n        options?.readPreference ??\n        this.defaultTransactionOptions.readPreference ??\n        this.clientOptions?.readPreference,\n      maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n    });\n\n    this.transaction.transition(TxnState.STARTING_TRANSACTION);\n  }\n\n  /**\n   * Commits the currently active transaction in this session.\n   *\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  commitTransaction(): Promise<Document>;\n  commitTransaction(callback: Callback<Document>): void;\n  commitTransaction(callback?: Callback<Document>): Promise<Document> | void {\n    return maybePromise(callback, cb => endTransaction(this, 'commitTransaction', cb));\n  }\n\n  /**\n   * Aborts the currently active transaction in this session.\n   *\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  abortTransaction(): Promise<Document>;\n  abortTransaction(callback: Callback<Document>): void;\n  abortTransaction(callback?: Callback<Document>): Promise<Document> | void {\n    return maybePromise(callback, cb => endTransaction(this, 'abortTransaction', cb));\n  }\n\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   */\n  toBSON(): never {\n    throw new MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n  }\n\n  /**\n   * Runs a provided callback within a transaction, retrying either the commitTransaction operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * **IMPORTANT:** This method requires the user to return a Promise, and `await` all operations.\n   * Any callbacks that do not return a Promise will result in undefined behavior.\n   *\n   * @remarks\n   * This function:\n   * - Will return the command response from the final commitTransaction if every operation is successful (can be used as a truthy object)\n   * - Will return `undefined` if the transaction is explicitly aborted with `await session.abortTransaction()`\n   * - Will throw if one of the operations throws or `throw` statement is used inside the `withTransaction` callback\n   *\n   * Checkout a descriptive example here:\n   * @see https://www.mongodb.com/developer/quickstart/node-transactions/\n   *\n   * @param fn - callback to run within a transaction\n   * @param options - optional settings for the transaction\n   * @returns A raw command response or undefined\n   */\n  withTransaction<T = void>(\n    fn: WithTransactionCallback<T>,\n    options?: TransactionOptions\n  ): Promise<Document | undefined> {\n    const startTime = now();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n}\n\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n  'CannotSatisfyWriteConcern',\n  'UnknownReplWriteConcern',\n  'UnsatisfiableWriteConcern'\n]);\n\nfunction hasNotTimedOut(startTime: number, max: number) {\n  return calculateDurationInMs(startTime) < max;\n}\n\nfunction isUnknownTransactionCommitResult(err: MongoError) {\n  const isNonDeterministicWriteConcernError =\n    err instanceof MongoServerError &&\n    err.codeName &&\n    NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n\n  return (\n    isMaxTimeMSExpiredError(err) ||\n    (!isNonDeterministicWriteConcernError &&\n      err.code !== MONGODB_ERROR_CODES.UnsatisfiableWriteConcern &&\n      err.code !== MONGODB_ERROR_CODES.UnknownReplWriteConcern)\n  );\n}\n\nexport function maybeClearPinnedConnection(\n  session: ClientSession,\n  options?: EndSessionOptions\n): void {\n  // unpin a connection if it has been pinned\n  const conn = session[kPinnedConnection];\n  const error = options?.error;\n\n  if (\n    session.inTransaction() &&\n    error &&\n    error instanceof MongoError &&\n    error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)\n  ) {\n    return;\n  }\n\n  const topology = session.client.topology;\n  // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n  //       to validate that we don't unpin on _all_ errors?\n  if (conn && topology != null) {\n    const servers = Array.from(topology.s.servers.values());\n    const loadBalancer = servers[0];\n\n    if (options?.error == null || options?.force) {\n      loadBalancer.s.pool.checkIn(conn);\n      conn.emit(\n        UNPINNED,\n        session.transaction.state !== TxnState.NO_TRANSACTION\n          ? ConnectionPoolMetrics.TXN\n          : ConnectionPoolMetrics.CURSOR\n      );\n\n      if (options?.forceClear) {\n        loadBalancer.s.pool.clear(conn.serviceId);\n      }\n    }\n\n    session[kPinnedConnection] = undefined;\n  }\n}\n\nfunction isMaxTimeMSExpiredError(err: MongoError) {\n  if (err == null || !(err instanceof MongoServerError)) {\n    return false;\n  }\n\n  return (\n    err.code === MONGODB_ERROR_CODES.MaxTimeMSExpired ||\n    (err.writeConcernError && err.writeConcernError.code === MONGODB_ERROR_CODES.MaxTimeMSExpired)\n  );\n}\n\nfunction attemptTransactionCommit<T>(\n  session: ClientSession,\n  startTime: number,\n  fn: WithTransactionCallback<T>,\n  options?: TransactionOptions\n): Promise<T> {\n  return session.commitTransaction().catch((err: MongoError) => {\n    if (\n      err instanceof MongoError &&\n      hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&\n      !isMaxTimeMSExpiredError(err)\n    ) {\n      if (err.hasErrorLabel(MongoErrorLabel.UnknownTransactionCommitResult)) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel(MongoErrorLabel.TransientTransactionError)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nconst USER_EXPLICIT_TXN_END_STATES = new Set<TxnState>([\n  TxnState.NO_TRANSACTION,\n  TxnState.TRANSACTION_COMMITTED,\n  TxnState.TRANSACTION_ABORTED\n]);\n\nfunction userExplicitlyEndedTransaction(session: ClientSession) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction<TSchema>(\n  session: ClientSession,\n  startTime: number,\n  fn: WithTransactionCallback<TSchema>,\n  options?: TransactionOptions\n): Promise<any> {\n  const Promise = PromiseProvider.get();\n  session.startTransaction(options);\n\n  let promise;\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!isPromiseLike(promise)) {\n    session.abortTransaction().catch(() => null);\n    throw new MongoInvalidArgumentError(\n      'Function provided to `withTransaction` must return a Promise'\n    );\n  }\n\n  return promise.then(\n    () => {\n      if (userExplicitlyEndedTransaction(session)) {\n        return;\n      }\n\n      return attemptTransactionCommit(session, startTime, fn, options);\n    },\n    err => {\n      function maybeRetryOrThrow(err: MongoError): Promise<any> {\n        if (\n          err instanceof MongoError &&\n          err.hasErrorLabel(MongoErrorLabel.TransientTransactionError) &&\n          hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)\n        ) {\n          return attemptTransaction(session, startTime, fn, options);\n        }\n\n        if (isMaxTimeMSExpiredError(err)) {\n          err.addErrorLabel(MongoErrorLabel.UnknownTransactionCommitResult);\n        }\n\n        throw err;\n      }\n\n      if (session.inTransaction()) {\n        return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n      }\n\n      return maybeRetryOrThrow(err);\n    }\n  );\n}\n\nfunction endTransaction(\n  session: ClientSession,\n  commandName: 'abortTransaction' | 'commitTransaction',\n  callback: Callback<Document>\n) {\n  // handle any initial problematic cases\n  const txnState = session.transaction.state;\n\n  if (txnState === TxnState.NO_TRANSACTION) {\n    callback(new MongoTransactionError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (\n      txnState === TxnState.STARTING_TRANSACTION ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback();\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(\n        new MongoTransactionError('Cannot call commitTransaction after calling abortTransaction')\n      );\n      return;\n    }\n  } else {\n    if (txnState === TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      callback();\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoTransactionError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (\n      txnState === TxnState.TRANSACTION_COMMITTED ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      callback(\n        new MongoTransactionError('Cannot call abortTransaction after calling commitTransaction')\n      );\n      return;\n    }\n  }\n\n  // construct and send the command\n  const command: Document = { [commandName]: 1 };\n\n  // apply a writeConcern if specified\n  let writeConcern;\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.writeConcern) {\n    writeConcern = { w: session.clientOptions.writeConcern.w };\n  }\n\n  if (txnState === TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({ wtimeout: 10000 }, writeConcern, { w: 'majority' });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, { writeConcern });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });\n  }\n\n  function commandHandler(error?: Error, result?: Document) {\n    if (commandName !== 'commitTransaction') {\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      if (session.loadBalanced) {\n        maybeClearPinnedConnection(session, { force: false });\n      }\n\n      // The spec indicates that we should ignore all errors on `abortTransaction`\n      return callback();\n    }\n\n    session.transaction.transition(TxnState.TRANSACTION_COMMITTED);\n    if (error instanceof MongoError) {\n      if (\n        error.hasErrorLabel(MongoErrorLabel.RetryableWriteError) ||\n        error instanceof MongoWriteConcernError ||\n        isMaxTimeMSExpiredError(error)\n      ) {\n        if (isUnknownTransactionCommitResult(error)) {\n          error.addErrorLabel(MongoErrorLabel.UnknownTransactionCommitResult);\n\n          // per txns spec, must unpin session in this case\n          session.unpin({ error });\n        }\n      } else if (error.hasErrorLabel(MongoErrorLabel.TransientTransactionError)) {\n        session.unpin({ error });\n      }\n    }\n\n    callback(error, result);\n  }\n\n  if (session.transaction.recoveryToken) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  }\n\n  // send the command\n  executeOperation(\n    session.client,\n    new RunAdminCommandOperation(undefined, command, {\n      session,\n      readPreference: ReadPreference.primary,\n      bypassPinningCheck: true\n    }),\n    (error, result) => {\n      if (command.abortTransaction) {\n        // always unpin on abort regardless of command outcome\n        session.unpin();\n      }\n\n      if (error instanceof MongoError && error.hasErrorLabel(MongoErrorLabel.RetryableWriteError)) {\n        // SPEC-1185: apply majority write concern when retrying commitTransaction\n        if (command.commitTransaction) {\n          // per txns spec, must unpin session in this case\n          session.unpin({ force: true });\n\n          command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {\n            w: 'majority'\n          });\n        }\n\n        return executeOperation(\n          session.client,\n          new RunAdminCommandOperation(undefined, command, {\n            session,\n            readPreference: ReadPreference.primary,\n            bypassPinningCheck: true\n          }),\n          commandHandler\n        );\n      }\n\n      commandHandler(error, result);\n    }\n  );\n}\n\n/** @public */\nexport type ServerSessionId = { id: Binary };\n\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nexport class ServerSession {\n  id: ServerSessionId;\n  lastUse: number;\n  txnNumber: number;\n  isDirty: boolean;\n\n  /** @internal */\n  constructor() {\n    this.id = { id: new Binary(uuidV4(), Binary.SUBTYPE_UUID) };\n    this.lastUse = now();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n\n  /**\n   * Determines if the server session has timed out.\n   *\n   * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n   */\n  hasTimedOut(sessionTimeoutMinutes: number): boolean {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round(\n      ((calculateDurationInMs(this.lastUse) % 86400000) % 3600000) / 60000\n    );\n\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n\n  /**\n   * @internal\n   * Cloning meant to keep a readable reference to the server session data\n   * after ClientSession has ended\n   */\n  static clone(serverSession: ServerSession): Readonly<ServerSession> {\n    const arrayBuffer = new ArrayBuffer(16);\n    const idBytes = Buffer.from(arrayBuffer);\n    idBytes.set(serverSession.id.id.buffer);\n\n    const id = new Binary(idBytes, serverSession.id.id.sub_type);\n\n    // Manual prototype construction to avoid modifying the constructor of this class\n    return Object.setPrototypeOf(\n      {\n        id: { id },\n        lastUse: serverSession.lastUse,\n        txnNumber: serverSession.txnNumber,\n        isDirty: serverSession.isDirty\n      },\n      ServerSession.prototype\n    );\n  }\n}\n\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nexport class ServerSessionPool {\n  client: MongoClient;\n  sessions: ServerSession[];\n\n  constructor(client: MongoClient) {\n    if (client == null) {\n      throw new MongoRuntimeError('ServerSessionPool requires a MongoClient');\n    }\n\n    this.client = client;\n    this.sessions = [];\n  }\n\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession is created.\n   */\n  acquire(): ServerSession {\n    const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n\n    let session: ServerSession | null = null;\n\n    // Try to obtain from session pool\n    while (this.sessions.length > 0) {\n      const potentialSession = this.sessions.shift();\n      if (\n        potentialSession != null &&\n        (!!this.client.topology?.loadBalanced ||\n          !potentialSession.hasTimedOut(sessionTimeoutMinutes))\n      ) {\n        session = potentialSession;\n        break;\n      }\n    }\n\n    // If nothing valid came from the pool make a new one\n    if (session == null) {\n      session = new ServerSession();\n    }\n\n    return session;\n  }\n\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   *\n   * @param session - The session to release to the pool\n   */\n  release(session: ServerSession): void {\n    const sessionTimeoutMinutes = this.client.topology?.logicalSessionTimeoutMinutes ?? 10;\n\n    if (this.client.topology?.loadBalanced && !sessionTimeoutMinutes) {\n      this.sessions.unshift(session);\n    }\n\n    if (!sessionTimeoutMinutes) {\n      return;\n    }\n\n    while (this.sessions.length) {\n      const pooledSession = this.sessions[this.sessions.length - 1];\n      if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n        this.sessions.pop();\n      } else {\n        break;\n      }\n    }\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      }\n\n      // otherwise, readd this session to the session pool\n      this.sessions.unshift(session);\n    }\n  }\n}\n\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n *\n * @internal\n */\nexport function applySession(\n  session: ClientSession,\n  command: Document,\n  options: CommandOptions\n): MongoDriverError | undefined {\n  if (session.hasEnded) {\n    return new MongoExpiredSessionError();\n  }\n\n  // May acquire serverSession here\n  const serverSession = session.serverSession;\n  if (serverSession == null) {\n    return new MongoRuntimeError('Unable to acquire server session');\n  }\n\n  if (options.writeConcern?.w === 0) {\n    if (session && session.explicit) {\n      // Error if user provided an explicit session to an unacknowledged write (SPEC-1019)\n      return new MongoAPIError('Cannot have explicit session with unacknowledged writes');\n    }\n    return;\n  }\n\n  // mark the last use of this session, and apply the `lsid`\n  serverSession.lastUse = now();\n  command.lsid = serverSession.id;\n\n  const inTxnOrTxnCommand = session.inTransaction() || isTransactionCommand(command);\n  const isRetryableWrite = !!options.willRetryWrite;\n\n  if (isRetryableWrite || inTxnOrTxnCommand) {\n    serverSession.txnNumber += session[kTxnNumberIncrement];\n    session[kTxnNumberIncrement] = 0;\n    command.txnNumber = Long.fromNumber(serverSession.txnNumber);\n  }\n\n  if (!inTxnOrTxnCommand) {\n    if (session.transaction.state !== TxnState.NO_TRANSACTION) {\n      session.transaction.transition(TxnState.NO_TRANSACTION);\n    }\n\n    if (\n      session.supports.causalConsistency &&\n      session.operationTime &&\n      commandSupportsReadConcern(command, options)\n    ) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    } else if (session[kSnapshotEnabled]) {\n      command.readConcern = command.readConcern || { level: ReadConcernLevel.snapshot };\n      if (session[kSnapshotTime] != null) {\n        Object.assign(command.readConcern, { atClusterTime: session[kSnapshotTime] });\n      }\n    }\n\n    return;\n  }\n\n  // now attempt to apply transaction-specific sessions data\n\n  // `autocommit` must always be false to differentiate from retryable writes\n  command.autocommit = false;\n\n  if (session.transaction.state === TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n\n    const readConcern =\n      session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    }\n  }\n  return;\n}\n\nexport function updateSessionFromResponse(session: ClientSession, document: Document): void {\n  if (document.$clusterTime) {\n    _advanceClusterTime(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n\n  if (session?.[kSnapshotEnabled] && session[kSnapshotTime] == null) {\n    // find and aggregate commands return atClusterTime on the cursor\n    // distinct includes it in the response body\n    const atClusterTime = document.cursor?.atClusterTime || document.atClusterTime;\n    if (atClusterTime) {\n      session[kSnapshotTime] = atClusterTime;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}