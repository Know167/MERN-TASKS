{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jatin\\\\Documents\\\\HTML PROJECTS\\\\mern-exercise\\\\task\\\\binary-tree\\\\src\\\\BinaryTree.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport BT from \"./BT\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BinaryTree(props) {\n  _s();\n  const [tree, setTree] = useState({\n    value: props.root,\n    left: null,\n    right: null\n  });\n  useEffect(() => {\n    insert(4);\n    insert(3);\n    insert(8);\n    insert(12);\n    insert(1);\n    insert(23);\n    insert(11);\n    console.log(tree);\n  }, []);\n  function insert(value) {\n    const newNode = {\n      left: null,\n      value: value,\n      right: null\n    };\n    let currentNode = tree;\n    while (true) {\n      if (value < currentNode.value) {\n        if (currentNode.left == null) {\n          currentNode.left = newNode;\n          break;\n        }\n        currentNode = currentNode.left;\n      } else {\n        if (value === currentNode.value) {\n          break;\n        } else {\n          if (currentNode.right == null) {\n            currentNode.right = newNode;\n            break;\n          }\n          currentNode = currentNode.right;\n        }\n      }\n    }\n    setTree(tree);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Node, {\n      value: props.data.value,\n      left: props.data.left,\n      right: props.data.right\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(BinaryTree, \"OcEbuuASv/BzcWNaORYP3ehV9G4=\");\n_c = BinaryTree;\nexport default BinaryTree;\nvar _c;\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"names":["useEffect","useState","BT","jsxDEV","_jsxDEV","BinaryTree","props","_s","tree","setTree","value","root","left","right","insert","console","log","newNode","currentNode","children","Node","data","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/BinaryTree.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport BT from \"./BT\";\r\n\r\nfunction BinaryTree(props) {\r\n  const [tree, setTree] = useState({\r\n    value: props.root,\r\n    left: null,\r\n    right: null,\r\n  });\r\n  useEffect(() => {\r\n    insert(4);\r\n    insert(3);\r\n    insert(8);\r\n    insert(12);\r\n    insert(1);\r\n    insert(23);\r\n      insert(11);\r\n      console.log(tree);\r\n  }, []);\r\n\r\n  function insert(value) {\r\n    const newNode = {\r\n      left: null,\r\n      value: value,\r\n      right: null,\r\n    };\r\n\r\n    let currentNode = tree;\r\n\r\n    while (true) {\r\n      if (value < currentNode.value) {\r\n        if (currentNode.left == null) {\r\n          currentNode.left = newNode;\r\n          break;\r\n        }\r\n        currentNode = currentNode.left;\r\n      } else {\r\n        if (value === currentNode.value) {\r\n          break;\r\n        } else {\r\n          if (currentNode.right == null) {\r\n            currentNode.right = newNode;\r\n            break;\r\n          }\r\n          currentNode = currentNode.right;\r\n        }\r\n      }\r\n    }\r\n\r\n    setTree(tree);\r\n  }\r\n    \r\n  return (\r\n    <div>\r\n      <Node\r\n        value={props.data.value}\r\n        left={props.data.left}\r\n        right={props.data.right}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BinaryTree;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,EAAE,MAAM,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,SAASC,UAAUA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC;IAC/BS,KAAK,EAAEJ,KAAK,CAACK,IAAI;IACjBC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE;EACT,CAAC,CAAC;EACFb,SAAS,CAAC,MAAM;IACdc,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,EAAE,CAAC;IACVA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,EAAE,CAAC;IACRA,MAAM,CAAC,EAAE,CAAC;IACVC,OAAO,CAACC,GAAG,CAACR,IAAI,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,SAASM,MAAMA,CAACJ,KAAK,EAAE;IACrB,MAAMO,OAAO,GAAG;MACdL,IAAI,EAAE,IAAI;MACVF,KAAK,EAAEA,KAAK;MACZG,KAAK,EAAE;IACT,CAAC;IAED,IAAIK,WAAW,GAAGV,IAAI;IAEtB,OAAO,IAAI,EAAE;MACX,IAAIE,KAAK,GAAGQ,WAAW,CAACR,KAAK,EAAE;QAC7B,IAAIQ,WAAW,CAACN,IAAI,IAAI,IAAI,EAAE;UAC5BM,WAAW,CAACN,IAAI,GAAGK,OAAO;UAC1B;QACF;QACAC,WAAW,GAAGA,WAAW,CAACN,IAAI;MAChC,CAAC,MAAM;QACL,IAAIF,KAAK,KAAKQ,WAAW,CAACR,KAAK,EAAE;UAC/B;QACF,CAAC,MAAM;UACL,IAAIQ,WAAW,CAACL,KAAK,IAAI,IAAI,EAAE;YAC7BK,WAAW,CAACL,KAAK,GAAGI,OAAO;YAC3B;UACF;UACAC,WAAW,GAAGA,WAAW,CAACL,KAAK;QACjC;MACF;IACF;IAEAJ,OAAO,CAACD,IAAI,CAAC;EACf;EAEA,oBACEJ,OAAA;IAAAe,QAAA,eACEf,OAAA,CAACgB,IAAI;MACHV,KAAK,EAAEJ,KAAK,CAACe,IAAI,CAACX,KAAM;MACxBE,IAAI,EAAEN,KAAK,CAACe,IAAI,CAACT,IAAK;MACtBC,KAAK,EAAEP,KAAK,CAACe,IAAI,CAACR;IAAM;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACxB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV;AAAClB,EAAA,CA1DQF,UAAU;AAAAqB,EAAA,GAAVrB,UAAU;AA4DnB,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}