{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jatin\\\\Documents\\\\HTML PROJECTS\\\\mern-exercise\\\\task\\\\binary-tree\\\\src\\\\BinaryTree.js\",\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Traverse from \"./Traverse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BinaryTree() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [tree, setTree] = useState(null);\n  const [inputVal, setInputVal] = useState(\"\");\n  function insert(value) {\n    setInputVal(value);\n    const newNode = {\n      left: null,\n      value: value,\n      right: null\n    };\n\n    // if (!tree) {\n    //   setTree(newNode);\n    //   return;\n    // }\n\n    let currentNode = tree;\n    while (true) {\n      if (value < currentNode.value) {\n        if (currentNode.left == null) {\n          currentNode.left = newNode;\n          break;\n        }\n        currentNode = currentNode.left;\n        continue;\n      } else {\n        if (value === currentNode.value) {\n          break;\n        } else {\n          if (currentNode.right == null) {\n            currentNode.right = newNode;\n            break;\n          }\n          currentNode = currentNode.right;\n          continue;\n        }\n      }\n    }\n    setTree({\n      ...tree\n    });\n  }\n  function setRoot(value) {\n    _s();\n    useEffect(() => {\n      first;\n      return () => {\n        second;\n      };\n    }, [third]);\n    setInputVal(value);\n    const newNode = {\n      value: inputVal,\n      left: null,\n      right: null\n    };\n    setTree(newNode);\n  }\n  _s(setRoot, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n  useEffect(() => {\n    setRoot(5);\n    insert(2);\n    insert(3);\n    // insert(4);\n    insert(-5);\n    insert(6);\n    insert(-3);\n    // insert(-6);\n\n    // insert(-7)\n    // insert(8);\n  }, [tree]);\n  function onSubmitHandler(event) {\n    event.preventDefault();\n    insert(Number(inputVal));\n    setInputVal(\"\");\n    console.log(tree);\n  }\n  function onChangeHandler(event) {\n    setInputVal(event.target.value);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Traverse, {\n      node: tree\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s2(BinaryTree, \"0SnD3p4XFMHsVDW7vjoNDp527WE=\");\n_c = BinaryTree;\nexport default BinaryTree;\nvar _c;\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"names":["useState","useEffect","Traverse","jsxDEV","_jsxDEV","BinaryTree","_s2","_s","$RefreshSig$","tree","setTree","inputVal","setInputVal","insert","value","newNode","left","right","currentNode","setRoot","first","second","third","onSubmitHandler","event","preventDefault","Number","console","log","onChangeHandler","target","children","node","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/BinaryTree.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Traverse from \"./Traverse\";\r\n\r\nfunction BinaryTree() {\r\n  const [tree, setTree] = useState(null);\r\n  const [inputVal, setInputVal] = useState(\"\");\r\n\r\n  function insert(value) {\r\n    setInputVal(value);\r\n    const newNode = {\r\n      left: null,\r\n      value: value,\r\n      right: null,\r\n    };\r\n\r\n    // if (!tree) {\r\n    //   setTree(newNode);\r\n    //   return;\r\n    // }\r\n\r\n    let currentNode = tree;\r\n\r\n    while (true) {\r\n      if (value < currentNode.value) {\r\n        if (currentNode.left == null) {\r\n          currentNode.left = newNode;\r\n          break;\r\n        }\r\n        currentNode = currentNode.left;\r\n\r\n        continue;\r\n      } else {\r\n        if (value === currentNode.value) {\r\n          break;\r\n        } else {\r\n          if (currentNode.right == null) {\r\n            currentNode.right = newNode;\r\n            break;\r\n          }\r\n          currentNode = currentNode.right;\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    setTree({ ...tree });\r\n  }\r\n\r\n\r\n  function setRoot(value) {\r\n    useEffect(() => {\r\n      first\r\n    \r\n      return () => {\r\n        second\r\n      }\r\n    }, [third])\r\n    \r\n    setInputVal(value);\r\n    const newNode={value:inputVal, left: null, right: null}\r\n    setTree(newNode);\r\n}\r\n \r\n  useEffect(() => {\r\n    setRoot(5);\r\n    insert(2)\r\n    insert(3)\r\n    // insert(4);\r\n    insert(-5);\r\n    insert(6)\r\n    insert(-3);\r\n    // insert(-6);\r\n   \r\n    // insert(-7)\r\n    // insert(8);\r\n  },[tree]);\r\n\r\n  \r\n  function onSubmitHandler(event) {\r\n    event.preventDefault();\r\n    insert(Number(inputVal));\r\n    setInputVal(\"\");\r\n    console.log(tree);\r\n  }\r\n  function onChangeHandler(event) {\r\n    setInputVal(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Traverse node={tree}/>\r\n      {/* <hr />\r\n      <form onSubmit={onSubmitHandler} style={{ marginTop: \"20px\" }}>\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"enter the value here\"\r\n          onChange={onChangeHandler}\r\n          value={inputVal}\r\n        />\r\n        <button type=\"submit\">Insert</button>\r\n      </form> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BinaryTree;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}