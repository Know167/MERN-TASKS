{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nfunction BinaryTree() {\n  _s();\n  const [tree, setTree] = useState({});\n  function insert(value) {\n    // Create a new node with the given value\n    const newNode = {\n      value: value,\n      left: null,\n      right: null\n    };\n\n    // If the tree is empty, make the new node the root\n    if (tree === null) {\n      setTree(newNode);\n      return;\n    }\n    let currentNode = tree;\n\n    // Traverse the tree to find the right place to insert the new node\n    while (true) {\n      if (value < currentNode.value) {\n        if (currentNode.left === null) {\n          currentNode.left = newNode;\n          break;\n        }\n        currentNode = currentNode.left;\n      } else {\n        if (currentNode.right === null) {\n          currentNode.right = newNode;\n          break;\n        }\n        currentNode = currentNode.right;\n      }\n    }\n\n    // Update the state with the new tree\n    setTree(tree);\n  }\n  useEffect(() => {\n    // Insert some nodes into the tree\n    insert(2);\n\n    // Traverse the tree\n  }, []);\n  return null;\n}\n_s(BinaryTree, \"rO4PWkM2QZDp+0zuCxaWdqoXaQs=\");\n_c = BinaryTree;\nexport default BinaryTree;\nvar _c;\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"names":["React","useEffect","useState","BinaryTree","_s","tree","setTree","insert","value","newNode","left","right","currentNode","_c","$RefreshReg$"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/BinaryTree.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction BinaryTree() {\r\n  const [tree, setTree] = useState({\r\n    \r\n  });\r\n\r\n  function insert(value) {\r\n    // Create a new node with the given value\r\n    const newNode = {\r\n      value: value,\r\n      left: null,\r\n      right: null,\r\n    };\r\n\r\n    // If the tree is empty, make the new node the root\r\n    if (tree === null) {\r\n      setTree(newNode);\r\n      return;\r\n    }\r\n\r\n    let currentNode = tree;\r\n\r\n    // Traverse the tree to find the right place to insert the new node\r\n    while (true) {\r\n      if (value < currentNode.value) {\r\n        if (currentNode.left === null) {\r\n          currentNode.left = newNode;\r\n          break;\r\n        }\r\n        currentNode = currentNode.left;\r\n      } else {\r\n        if (currentNode.right === null) {\r\n          currentNode.right = newNode;\r\n          break;\r\n        }\r\n        currentNode = currentNode.right;\r\n      }\r\n    }\r\n\r\n    // Update the state with the new tree\r\n    setTree(tree);\r\n  }\r\n\r\n  useEffect(() => {\r\n    // Insert some nodes into the tree\r\n    insert(2);\r\n   \r\n\r\n    // Traverse the tree\r\n\r\n      \r\n  }, []);\r\n\r\n\r\n\r\n  return null;\r\n}\r\n\r\nexport default BinaryTree;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,CAEjC,CAAC,CAAC;EAEF,SAASK,MAAMA,CAACC,KAAK,EAAE;IACrB;IACA,MAAMC,OAAO,GAAG;MACdD,KAAK,EAAEA,KAAK;MACZE,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE;IACT,CAAC;;IAED;IACA,IAAIN,IAAI,KAAK,IAAI,EAAE;MACjBC,OAAO,CAACG,OAAO,CAAC;MAChB;IACF;IAEA,IAAIG,WAAW,GAAGP,IAAI;;IAEtB;IACA,OAAO,IAAI,EAAE;MACX,IAAIG,KAAK,GAAGI,WAAW,CAACJ,KAAK,EAAE;QAC7B,IAAII,WAAW,CAACF,IAAI,KAAK,IAAI,EAAE;UAC7BE,WAAW,CAACF,IAAI,GAAGD,OAAO;UAC1B;QACF;QACAG,WAAW,GAAGA,WAAW,CAACF,IAAI;MAChC,CAAC,MAAM;QACL,IAAIE,WAAW,CAACD,KAAK,KAAK,IAAI,EAAE;UAC9BC,WAAW,CAACD,KAAK,GAAGF,OAAO;UAC3B;QACF;QACAG,WAAW,GAAGA,WAAW,CAACD,KAAK;MACjC;IACF;;IAEA;IACAL,OAAO,CAACD,IAAI,CAAC;EACf;EAEAJ,SAAS,CAAC,MAAM;IACd;IACAM,MAAM,CAAC,CAAC,CAAC;;IAGT;EAGF,CAAC,EAAE,EAAE,CAAC;EAIN,OAAO,IAAI;AACb;AAACH,EAAA,CAvDQD,UAAU;AAAAU,EAAA,GAAVV,UAAU;AAyDnB,eAAeA,UAAU;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}