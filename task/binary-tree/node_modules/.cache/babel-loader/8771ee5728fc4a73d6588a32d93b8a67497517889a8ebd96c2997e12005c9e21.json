{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveBSONOptions = exports.pluckBSONSerializeOptions = exports.Timestamp = exports.ObjectId = exports.MinKey = exports.MaxKey = exports.Map = exports.Long = exports.Int32 = exports.Double = exports.Decimal128 = exports.DBRef = exports.Code = exports.BSONSymbol = exports.BSONRegExp = exports.Binary = exports.calculateObjectSize = exports.serialize = exports.deserialize = void 0;\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nlet BSON = require('bson');\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  BSON = require('bson-ext');\n} catch {} // eslint-disable-line\n/** @internal */\nexports.deserialize = BSON.deserialize;\n/** @internal */\nexports.serialize = BSON.serialize;\n/** @internal */\nexports.calculateObjectSize = BSON.calculateObjectSize;\nvar bson_1 = require(\"bson\");\nObject.defineProperty(exports, \"Binary\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Binary;\n  }\n});\nObject.defineProperty(exports, \"BSONRegExp\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.BSONRegExp;\n  }\n});\nObject.defineProperty(exports, \"BSONSymbol\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.BSONSymbol;\n  }\n});\nObject.defineProperty(exports, \"Code\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Code;\n  }\n});\nObject.defineProperty(exports, \"DBRef\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.DBRef;\n  }\n});\nObject.defineProperty(exports, \"Decimal128\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Decimal128;\n  }\n});\nObject.defineProperty(exports, \"Double\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Double;\n  }\n});\nObject.defineProperty(exports, \"Int32\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Int32;\n  }\n});\nObject.defineProperty(exports, \"Long\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Long;\n  }\n});\nObject.defineProperty(exports, \"Map\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Map;\n  }\n});\nObject.defineProperty(exports, \"MaxKey\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.MaxKey;\n  }\n});\nObject.defineProperty(exports, \"MinKey\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.MinKey;\n  }\n});\nObject.defineProperty(exports, \"ObjectId\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.ObjectId;\n  }\n});\nObject.defineProperty(exports, \"Timestamp\", {\n  enumerable: true,\n  get: function () {\n    return bson_1.Timestamp;\n  }\n});\nfunction pluckBSONSerializeOptions(options) {\n  const {\n    fieldsAsRaw,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  } = options;\n  return {\n    fieldsAsRaw,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  };\n}\nexports.pluckBSONSerializeOptions = pluckBSONSerializeOptions;\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\nfunction resolveBSONOptions(options, parent) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;\n  const parentOptions = parent === null || parent === void 0 ? void 0 : parent.bsonOptions;\n  return {\n    raw: (_b = (_a = options === null || options === void 0 ? void 0 : options.raw) !== null && _a !== void 0 ? _a : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.raw) !== null && _b !== void 0 ? _b : false,\n    promoteLongs: (_d = (_c = options === null || options === void 0 ? void 0 : options.promoteLongs) !== null && _c !== void 0 ? _c : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.promoteLongs) !== null && _d !== void 0 ? _d : true,\n    promoteValues: (_f = (_e = options === null || options === void 0 ? void 0 : options.promoteValues) !== null && _e !== void 0 ? _e : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.promoteValues) !== null && _f !== void 0 ? _f : true,\n    promoteBuffers: (_h = (_g = options === null || options === void 0 ? void 0 : options.promoteBuffers) !== null && _g !== void 0 ? _g : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.promoteBuffers) !== null && _h !== void 0 ? _h : false,\n    ignoreUndefined: (_k = (_j = options === null || options === void 0 ? void 0 : options.ignoreUndefined) !== null && _j !== void 0 ? _j : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.ignoreUndefined) !== null && _k !== void 0 ? _k : false,\n    bsonRegExp: (_m = (_l = options === null || options === void 0 ? void 0 : options.bsonRegExp) !== null && _l !== void 0 ? _l : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.bsonRegExp) !== null && _m !== void 0 ? _m : false,\n    serializeFunctions: (_p = (_o = options === null || options === void 0 ? void 0 : options.serializeFunctions) !== null && _o !== void 0 ? _o : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.serializeFunctions) !== null && _p !== void 0 ? _p : false,\n    fieldsAsRaw: (_r = (_q = options === null || options === void 0 ? void 0 : options.fieldsAsRaw) !== null && _q !== void 0 ? _q : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.fieldsAsRaw) !== null && _r !== void 0 ? _r : {},\n    enableUtf8Validation: (_t = (_s = options === null || options === void 0 ? void 0 : options.enableUtf8Validation) !== null && _s !== void 0 ? _s : parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.enableUtf8Validation) !== null && _t !== void 0 ? _t : true\n  };\n}\nexports.resolveBSONOptions = resolveBSONOptions;","map":{"version":3,"names":["BSON","require","exports","deserialize","serialize","calculateObjectSize","bson_1","Object","defineProperty","enumerable","get","Binary","BSONRegExp","BSONSymbol","Code","DBRef","Decimal128","Double","Int32","Long","Map","MaxKey","MinKey","ObjectId","Timestamp","pluckBSONSerializeOptions","options","fieldsAsRaw","promoteValues","promoteBuffers","promoteLongs","serializeFunctions","ignoreUndefined","bsonRegExp","raw","enableUtf8Validation","resolveBSONOptions","parent","parentOptions","bsonOptions","_b","_a","_d","_c","_f","_e","_h","_g","_k","_j","_m","_l","_p","_o","_r","_q","_t","_s"],"sources":["C:\\Users\\Jatin\\node_modules\\mongodb\\src\\bson.ts"],"sourcesContent":["import type {\n  calculateObjectSize as calculateObjectSizeFn,\n  deserialize as deserializeFn,\n  DeserializeOptions,\n  serialize as serializeFn,\n  SerializeOptions\n} from 'bson';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nlet BSON = require('bson');\n\ntry {\n  // Ensure you always wrap an optional require in the try block NODE-3199\n  BSON = require('bson-ext');\n} catch {} // eslint-disable-line\n\n/** @internal */\nexport const deserialize = BSON.deserialize as typeof deserializeFn;\n/** @internal */\nexport const serialize = BSON.serialize as typeof serializeFn;\n/** @internal */\nexport const calculateObjectSize = BSON.calculateObjectSize as typeof calculateObjectSizeFn;\n\nexport {\n  Binary,\n  BSONRegExp,\n  BSONSymbol,\n  Code,\n  DBRef,\n  Decimal128,\n  Document,\n  Double,\n  Int32,\n  Long,\n  Map,\n  MaxKey,\n  MinKey,\n  ObjectId,\n  Timestamp\n} from 'bson';\n\n/**\n * BSON Serialization options.\n * @public\n */\nexport interface BSONSerializeOptions\n  extends Omit<SerializeOptions, 'index'>,\n    Omit<\n      DeserializeOptions,\n      | 'evalFunctions'\n      | 'cacheFunctions'\n      | 'cacheFunctionsCrc32'\n      | 'allowObjectSmallerThanBufferSize'\n      | 'index'\n      | 'validation'\n    > {\n  /** Return BSON filled buffers from operations */\n  raw?: boolean;\n\n  /** Enable utf8 validation when deserializing BSON documents.  Defaults to true. */\n  enableUtf8Validation?: boolean;\n}\n\nexport function pluckBSONSerializeOptions(options: BSONSerializeOptions): BSONSerializeOptions {\n  const {\n    fieldsAsRaw,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  } = options;\n  return {\n    fieldsAsRaw,\n    promoteValues,\n    promoteBuffers,\n    promoteLongs,\n    serializeFunctions,\n    ignoreUndefined,\n    bsonRegExp,\n    raw,\n    enableUtf8Validation\n  };\n}\n\n/**\n * Merge the given BSONSerializeOptions, preferring options over the parent's options, and\n * substituting defaults for values not set.\n *\n * @internal\n */\nexport function resolveBSONOptions(\n  options?: BSONSerializeOptions,\n  parent?: { bsonOptions?: BSONSerializeOptions }\n): BSONSerializeOptions {\n  const parentOptions = parent?.bsonOptions;\n  return {\n    raw: options?.raw ?? parentOptions?.raw ?? false,\n    promoteLongs: options?.promoteLongs ?? parentOptions?.promoteLongs ?? true,\n    promoteValues: options?.promoteValues ?? parentOptions?.promoteValues ?? true,\n    promoteBuffers: options?.promoteBuffers ?? parentOptions?.promoteBuffers ?? false,\n    ignoreUndefined: options?.ignoreUndefined ?? parentOptions?.ignoreUndefined ?? false,\n    bsonRegExp: options?.bsonRegExp ?? parentOptions?.bsonRegExp ?? false,\n    serializeFunctions: options?.serializeFunctions ?? parentOptions?.serializeFunctions ?? false,\n    fieldsAsRaw: options?.fieldsAsRaw ?? parentOptions?.fieldsAsRaw ?? {},\n    enableUtf8Validation:\n      options?.enableUtf8Validation ?? parentOptions?.enableUtf8Validation ?? true\n  };\n}\n"],"mappings":";;;;;;AAQA;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAE1B,IAAI;EACF;EACAD,IAAI,GAAGC,OAAO,CAAC,UAAU,CAAC;CAC3B,CAAC,MAAM,EAAE,CAAC;AAEX;AACaC,OAAA,CAAAC,WAAW,GAAGH,IAAI,CAACG,WAAmC;AACnE;AACaD,OAAA,CAAAE,SAAS,GAAGJ,IAAI,CAACI,SAA+B;AAC7D;AACaF,OAAA,CAAAG,mBAAmB,GAAGL,IAAI,CAACK,mBAAmD;AAE3F,IAAAC,MAAA,GAAAL,OAAA;AACEM,MAAA,CAAAC,cAAA,CAAAN,OAAA;EAAAO,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,MAAA,CAAAK,MAAM;EAAA;AAAA;AACNJ,MAAA,CAAAC,cAAA,CAAAN,OAAA;EAAAO,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,MAAA,CAAAM,UAAU;EAAA;AAAA;AACVL,MAAA,CAAAC,cAAA,CAAAN,OAAA;EAAAO,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,MAAA,CAAAO,UAAU;EAAA;AAAA;AACVN,MAAA,CAAAC,cAAA,CAAAN,OAAA;EAAAO,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,MAAA,CAAAQ,IAAI;EAAA;AAAA;AACJP,MAAA,CAAAC,cAAA,CAAAN,OAAA;EAAAO,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,MAAA,CAAAS,KAAK;EAAA;AAAA;AACLR,MAAA,CAAAC,cAAA,CAAAN,OAAA;EAAAO,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,MAAA,CAAAU,UAAU;EAAA;AAAA;AAEVT,MAAA,CAAAC,cAAA,CAAAN,OAAA;EAAAO,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,MAAA,CAAAW,MAAM;EAAA;AAAA;AACNV,MAAA,CAAAC,cAAA,CAAAN,OAAA;EAAAO,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,MAAA,CAAAY,KAAK;EAAA;AAAA;AACLX,MAAA,CAAAC,cAAA,CAAAN,OAAA;EAAAO,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,MAAA,CAAAa,IAAI;EAAA;AAAA;AACJZ,MAAA,CAAAC,cAAA,CAAAN,OAAA;EAAAO,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,MAAA,CAAAc,GAAG;EAAA;AAAA;AACHb,MAAA,CAAAC,cAAA,CAAAN,OAAA;EAAAO,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,MAAA,CAAAe,MAAM;EAAA;AAAA;AACNd,MAAA,CAAAC,cAAA,CAAAN,OAAA;EAAAO,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,MAAA,CAAAgB,MAAM;EAAA;AAAA;AACNf,MAAA,CAAAC,cAAA,CAAAN,OAAA;EAAAO,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,MAAA,CAAAiB,QAAQ;EAAA;AAAA;AACRhB,MAAA,CAAAC,cAAA,CAAAN,OAAA;EAAAO,UAAA;EAAAC,GAAA,WAAAA,CAAA;IAAA,OAAAJ,MAAA,CAAAkB,SAAS;EAAA;AAAA;AAyBX,SAAgBC,yBAAyBA,CAACC,OAA6B;EACrE,MAAM;IACJC,WAAW;IACXC,aAAa;IACbC,cAAc;IACdC,YAAY;IACZC,kBAAkB;IAClBC,eAAe;IACfC,UAAU;IACVC,GAAG;IACHC;EAAoB,CACrB,GAAGT,OAAO;EACX,OAAO;IACLC,WAAW;IACXC,aAAa;IACbC,cAAc;IACdC,YAAY;IACZC,kBAAkB;IAClBC,eAAe;IACfC,UAAU;IACVC,GAAG;IACHC;GACD;AACH;AAvBAjC,OAAA,CAAAuB,yBAAA,GAAAA,yBAAA;AAyBA;;;;;;AAMA,SAAgBW,kBAAkBA,CAChCV,OAA8B,EAC9BW,MAA+C;;EAE/C,MAAMC,aAAa,GAAGD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEE,WAAW;EACzC,OAAO;IACLL,GAAG,EAAE,CAAAM,EAAA,IAAAC,EAAA,GAAAf,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEQ,GAAG,cAAAO,EAAA,cAAAA,EAAA,GAAIH,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEJ,GAAG,cAAAM,EAAA,cAAAA,EAAA,GAAI,KAAK;IAChDV,YAAY,EAAE,CAAAY,EAAA,IAAAC,EAAA,GAAAjB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEI,YAAY,cAAAa,EAAA,cAAAA,EAAA,GAAIL,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAER,YAAY,cAAAY,EAAA,cAAAA,EAAA,GAAI,IAAI;IAC1Ed,aAAa,EAAE,CAAAgB,EAAA,IAAAC,EAAA,GAAAnB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,aAAa,cAAAiB,EAAA,cAAAA,EAAA,GAAIP,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEV,aAAa,cAAAgB,EAAA,cAAAA,EAAA,GAAI,IAAI;IAC7Ef,cAAc,EAAE,CAAAiB,EAAA,IAAAC,EAAA,GAAArB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,cAAc,cAAAkB,EAAA,cAAAA,EAAA,GAAIT,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAET,cAAc,cAAAiB,EAAA,cAAAA,EAAA,GAAI,KAAK;IACjFd,eAAe,EAAE,CAAAgB,EAAA,IAAAC,EAAA,GAAAvB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEM,eAAe,cAAAiB,EAAA,cAAAA,EAAA,GAAIX,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEN,eAAe,cAAAgB,EAAA,cAAAA,EAAA,GAAI,KAAK;IACpFf,UAAU,EAAE,CAAAiB,EAAA,IAAAC,EAAA,GAAAzB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEO,UAAU,cAAAkB,EAAA,cAAAA,EAAA,GAAIb,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEL,UAAU,cAAAiB,EAAA,cAAAA,EAAA,GAAI,KAAK;IACrEnB,kBAAkB,EAAE,CAAAqB,EAAA,IAAAC,EAAA,GAAA3B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEK,kBAAkB,cAAAsB,EAAA,cAAAA,EAAA,GAAIf,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEP,kBAAkB,cAAAqB,EAAA,cAAAA,EAAA,GAAI,KAAK;IAC7FzB,WAAW,EAAE,CAAA2B,EAAA,IAAAC,EAAA,GAAA7B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,WAAW,cAAA4B,EAAA,cAAAA,EAAA,GAAIjB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEX,WAAW,cAAA2B,EAAA,cAAAA,EAAA,GAAI,EAAE;IACrEnB,oBAAoB,EAClB,CAAAqB,EAAA,IAAAC,EAAA,GAAA/B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAES,oBAAoB,cAAAsB,EAAA,cAAAA,EAAA,GAAInB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEH,oBAAoB,cAAAqB,EAAA,cAAAA,EAAA,GAAI;GAC3E;AACH;AAjBAtD,OAAA,CAAAkC,kBAAA,GAAAA,kBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}