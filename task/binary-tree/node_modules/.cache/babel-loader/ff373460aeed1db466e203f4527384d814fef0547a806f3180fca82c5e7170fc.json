{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jatin\\\\Documents\\\\HTML PROJECTS\\\\mern-exercise\\\\task\\\\binary-tree\\\\src\\\\BinaryTree.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BinaryTree(props) {\n  _s();\n  const [tree, setTree] = useState({\n    value: props.root,\n    left: null,\n    right: null\n  });\n  function insert(value) {\n    const newNode = {\n      left: null,\n      value: value,\n      right: null\n    };\n    let currentNode = tree;\n    while (true) {\n      if (value < currentNode.value) {\n        if (currentNode.left === null) {\n          currentNode.left = newNode;\n          break;\n        }\n        currentNode = currentNode.left;\n      } else {\n        if (value === currentNode.value) {\n          break;\n        } else {\n          if (currentNode.right === null) {\n            currentNode.right = newNode;\n            break;\n          }\n          currentNode = currentNode.right;\n        }\n      }\n    }\n    setTree(tree);\n  }\n  useEffect(() => {\n    insert(4);\n    insert(3);\n    insert(8);\n    insert(12);\n    insert(1);\n    insert(23);\n    insert(11);\n  }, []);\n  console.log(tree);\n  const depth = () => {\n    while (true) {\n      tree.left !== null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Node, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 12\n  }, this);\n}\n_s(BinaryTree, \"OcEbuuASv/BzcWNaORYP3ehV9G4=\");\n_c = BinaryTree;\nexport default BinaryTree;\nvar _c;\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","BinaryTree","props","_s","tree","setTree","value","root","left","right","insert","newNode","currentNode","console","log","depth","children","Node","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/BinaryTree.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nfunction BinaryTree(props) {\r\n  const [tree, setTree] = useState({\r\n    value: props.root,\r\n    left: null,\r\n    right: null,\r\n  });\r\n\r\n  function insert(value) {\r\n    const newNode = {\r\n      left: null,\r\n      value: value,\r\n      right: null,\r\n    };\r\n\r\n    let currentNode = tree;\r\n\r\n    while (true) {\r\n      if (value < currentNode.value) {\r\n        if (currentNode.left === null) {\r\n          currentNode.left = newNode;\r\n          break;\r\n        }\r\n        currentNode = currentNode.left;\r\n      } else {\r\n        if (value === currentNode.value) {\r\n          break;\r\n        } else {\r\n          if (currentNode.right === null) {\r\n            currentNode.right = newNode;\r\n            break;\r\n          }\r\n          currentNode = currentNode.right;\r\n        }\r\n      }\r\n    }\r\n\r\n    setTree(tree);\r\n  }\r\n\r\n  useEffect(() => {\r\n    insert(4);\r\n    insert(3);\r\n    insert(8);\r\n    insert(12);\r\n    insert(1);\r\n    insert(23);\r\n    insert(11);\r\n  }, []);\r\n    console.log(tree);\r\n    const depth = () => {\r\n        while (true) {\r\n            tree.left!==null\r\n        }\r\n    }\r\n    return <div>\r\n      <Node/>\r\n  </div>;\r\n}\r\n\r\nexport default BinaryTree;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,UAAUA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC;IAC/BQ,KAAK,EAAEJ,KAAK,CAACK,IAAI;IACjBC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,SAASC,MAAMA,CAACJ,KAAK,EAAE;IACrB,MAAMK,OAAO,GAAG;MACdH,IAAI,EAAE,IAAI;MACVF,KAAK,EAAEA,KAAK;MACZG,KAAK,EAAE;IACT,CAAC;IAED,IAAIG,WAAW,GAAGR,IAAI;IAEtB,OAAO,IAAI,EAAE;MACX,IAAIE,KAAK,GAAGM,WAAW,CAACN,KAAK,EAAE;QAC7B,IAAIM,WAAW,CAACJ,IAAI,KAAK,IAAI,EAAE;UAC7BI,WAAW,CAACJ,IAAI,GAAGG,OAAO;UAC1B;QACF;QACAC,WAAW,GAAGA,WAAW,CAACJ,IAAI;MAChC,CAAC,MAAM;QACL,IAAIF,KAAK,KAAKM,WAAW,CAACN,KAAK,EAAE;UAC/B;QACF,CAAC,MAAM;UACL,IAAIM,WAAW,CAACH,KAAK,KAAK,IAAI,EAAE;YAC9BG,WAAW,CAACH,KAAK,GAAGE,OAAO;YAC3B;UACF;UACAC,WAAW,GAAGA,WAAW,CAACH,KAAK;QACjC;MACF;IACF;IAEAJ,OAAO,CAACD,IAAI,CAAC;EACf;EAEAP,SAAS,CAAC,MAAM;IACda,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,EAAE,CAAC;IACVA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,EAAE,CAAC;IACVA,MAAM,CAAC,EAAE,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EACJG,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC;EACjB,MAAMW,KAAK,GAAGA,CAAA,KAAM;IAChB,OAAO,IAAI,EAAE;MACTX,IAAI,CAACI,IAAI,KAAG,IAAI;IACpB;EACJ,CAAC;EACD,oBAAOR,OAAA;IAAAgB,QAAA,eACLhB,OAAA,CAACiB,IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACL;AACR;AAAClB,EAAA,CAzDQF,UAAU;AAAAqB,EAAA,GAAVrB,UAAU;AA2DnB,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}