{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shuffle = exports.parsePackageVersion = exports.supportsRetryableWrites = exports.enumToString = exports.emitWarningOnce = exports.emitWarning = exports.MONGODB_WARNING_CODE = exports.DEFAULT_PK_FACTORY = exports.HostAddress = exports.BufferPool = exports.deepCopy = exports.isRecord = exports.setDifference = exports.isHello = exports.isSuperset = exports.resolveOptions = exports.hasAtomicOperators = exports.makeInterruptibleAsyncInterval = exports.calculateDurationInMs = exports.now = exports.makeClientMetadata = exports.makeStateMachine = exports.errorStrictEqual = exports.arrayStrictEqual = exports.eachAsyncSeries = exports.eachAsync = exports.collationNotSupported = exports.maxWireVersion = exports.uuidV4 = exports.databaseNamespace = exports.maybePromise = exports.makeCounter = exports.MongoDBNamespace = exports.ns = exports.deprecateOptions = exports.defaultMsgHandler = exports.getTopology = exports.decorateWithExplain = exports.decorateWithReadConcern = exports.decorateWithCollation = exports.isPromiseLike = exports.applyWriteConcern = exports.applyRetryableWrites = exports.filterOptions = exports.mergeOptions = exports.isObject = exports.parseIndexOptions = exports.normalizeHintField = exports.checkCollectionName = exports.MAX_JS_INT = void 0;\nexports.getMongoDBClientEncryption = exports.commandSupportsReadConcern = void 0;\nconst crypto = require(\"crypto\");\nconst os = require(\"os\");\nconst timers_1 = require(\"timers\");\nconst url_1 = require(\"url\");\nconst bson_1 = require(\"./bson\");\nconst constants_1 = require(\"./cmap/wire_protocol/constants\");\nconst constants_2 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst promise_provider_1 = require(\"./promise_provider\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst common_1 = require(\"./sdam/common\");\nconst write_concern_1 = require(\"./write_concern\");\nexports.MAX_JS_INT = Number.MAX_SAFE_INTEGER + 1;\n/**\n * Throws if collectionName is not a valid mongodb collection namespace.\n * @internal\n */\nfunction checkCollectionName(collectionName) {\n  if ('string' !== typeof collectionName) {\n    throw new error_1.MongoInvalidArgumentError('Collection name must be a String');\n  }\n  if (!collectionName || collectionName.indexOf('..') !== -1) {\n    throw new error_1.MongoInvalidArgumentError('Collection names cannot be empty');\n  }\n  if (collectionName.indexOf('$') !== -1 && collectionName.match(/((^\\$cmd)|(oplog\\.\\$main))/) == null) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new error_1.MongoInvalidArgumentError(\"Collection names must not contain '$'\");\n  }\n  if (collectionName.match(/^\\.|\\.$/) != null) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new error_1.MongoInvalidArgumentError(\"Collection names must not start or end with '.'\");\n  }\n  // Validate that we are not passing 0x00 in the collection name\n  if (collectionName.indexOf('\\x00') !== -1) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new error_1.MongoInvalidArgumentError('Collection names cannot contain a null character');\n  }\n}\nexports.checkCollectionName = checkCollectionName;\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nfunction normalizeHintField(hint) {\n  let finalHint = undefined;\n  if (typeof hint === 'string') {\n    finalHint = hint;\n  } else if (Array.isArray(hint)) {\n    finalHint = {};\n    hint.forEach(param => {\n      finalHint[param] = 1;\n    });\n  } else if (hint != null && typeof hint === 'object') {\n    finalHint = {};\n    for (const name in hint) {\n      finalHint[name] = hint[name];\n    }\n  }\n  return finalHint;\n}\nexports.normalizeHintField = normalizeHintField;\n/**\n * Create an index specifier based on\n * @internal\n */\nfunction parseIndexOptions(indexSpec) {\n  const fieldHash = {};\n  const indexes = [];\n  let keys;\n  // Get all the fields accordingly\n  if ('string' === typeof indexSpec) {\n    // 'type'\n    indexes.push(indexSpec + '_' + 1);\n    fieldHash[indexSpec] = 1;\n  } else if (Array.isArray(indexSpec)) {\n    indexSpec.forEach(f => {\n      if ('string' === typeof f) {\n        // [{location:'2d'}, 'type']\n        indexes.push(f + '_' + 1);\n        fieldHash[f] = 1;\n      } else if (Array.isArray(f)) {\n        // [['location', '2d'],['type', 1]]\n        indexes.push(f[0] + '_' + (f[1] || 1));\n        fieldHash[f[0]] = f[1] || 1;\n      } else if (isObject(f)) {\n        // [{location:'2d'}, {type:1}]\n        keys = Object.keys(f);\n        keys.forEach(k => {\n          indexes.push(k + '_' + f[k]);\n          fieldHash[k] = f[k];\n        });\n      } else {\n        // undefined (ignore)\n      }\n    });\n  } else if (isObject(indexSpec)) {\n    // {location:'2d', type:1}\n    keys = Object.keys(indexSpec);\n    Object.entries(indexSpec).forEach(_ref => {\n      let [key, value] = _ref;\n      indexes.push(key + '_' + value);\n      fieldHash[key] = value;\n    });\n  }\n  return {\n    name: indexes.join('_'),\n    keys: keys,\n    fieldHash: fieldHash\n  };\n}\nexports.parseIndexOptions = parseIndexOptions;\nconst TO_STRING = object => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\nfunction isObject(arg) {\n  return '[object Object]' === TO_STRING(arg);\n}\nexports.isObject = isObject;\n/** @internal */\nfunction mergeOptions(target, source) {\n  return {\n    ...target,\n    ...source\n  };\n}\nexports.mergeOptions = mergeOptions;\n/** @internal */\nfunction filterOptions(options, names) {\n  const filterOptions = {};\n  for (const name in options) {\n    if (names.includes(name)) {\n      filterOptions[name] = options[name];\n    }\n  }\n  // Filtered options\n  return filterOptions;\n}\nexports.filterOptions = filterOptions;\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nfunction applyRetryableWrites(target, db) {\n  var _a;\n  if (db && ((_a = db.s.options) === null || _a === void 0 ? void 0 : _a.retryWrites)) {\n    target.retryWrites = true;\n  }\n  return target;\n}\nexports.applyRetryableWrites = applyRetryableWrites;\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\nfunction applyWriteConcern(target, sources, options) {\n  options = options !== null && options !== void 0 ? options : {};\n  const db = sources.db;\n  const coll = sources.collection;\n  if (options.session && options.session.inTransaction()) {\n    // writeConcern is not allowed within a multi-statement transaction\n    if (target.writeConcern) {\n      delete target.writeConcern;\n    }\n    return target;\n  }\n  const writeConcern = write_concern_1.WriteConcern.fromOptions(options);\n  if (writeConcern) {\n    return Object.assign(target, {\n      writeConcern\n    });\n  }\n  if (coll && coll.writeConcern) {\n    return Object.assign(target, {\n      writeConcern: Object.assign({}, coll.writeConcern)\n    });\n  }\n  if (db && db.writeConcern) {\n    return Object.assign(target, {\n      writeConcern: Object.assign({}, db.writeConcern)\n    });\n  }\n  return target;\n}\nexports.applyWriteConcern = applyWriteConcern;\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The result type of maybePromise\n * @param maybePromise - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nfunction isPromiseLike(maybePromise) {\n  return !!maybePromise && typeof maybePromise.then === 'function';\n}\nexports.isPromiseLike = isPromiseLike;\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nfunction decorateWithCollation(command, target, options) {\n  const capabilities = getTopology(target).capabilities;\n  if (options.collation && typeof options.collation === 'object') {\n    if (capabilities && capabilities.commandsTakeCollation) {\n      command.collation = options.collation;\n    } else {\n      throw new error_1.MongoCompatibilityError(`Current topology does not support collation`);\n    }\n  }\n}\nexports.decorateWithCollation = decorateWithCollation;\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nfunction decorateWithReadConcern(command, coll, options) {\n  if (options && options.session && options.session.inTransaction()) {\n    return;\n  }\n  const readConcern = Object.assign({}, command.readConcern || {});\n  if (coll.s.readConcern) {\n    Object.assign(readConcern, coll.s.readConcern);\n  }\n  if (Object.keys(readConcern).length > 0) {\n    Object.assign(command, {\n      readConcern: readConcern\n    });\n  }\n}\nexports.decorateWithReadConcern = decorateWithReadConcern;\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nfunction decorateWithExplain(command, explain) {\n  if (command.explain) {\n    return command;\n  }\n  return {\n    explain: command,\n    verbosity: explain.verbosity\n  };\n}\nexports.decorateWithExplain = decorateWithExplain;\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nfunction getTopology(provider) {\n  // MongoClient or ClientSession or AbstractCursor\n  if ('topology' in provider && provider.topology) {\n    return provider.topology;\n  } else if ('s' in provider && 'client' in provider.s && provider.s.client.topology) {\n    return provider.s.client.topology;\n  } else if ('s' in provider && 'db' in provider.s && provider.s.db.s.client.topology) {\n    return provider.s.db.s.client.topology;\n  }\n  throw new error_1.MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\nexports.getTopology = getTopology;\n/**\n * Default message handler for generating deprecation warnings.\n * @internal\n *\n * @param name - function name\n * @param option - option name\n * @returns warning message\n */\nfunction defaultMsgHandler(name, option) {\n  return `${name} option [${option}] is deprecated and will be removed in a later version.`;\n}\nexports.defaultMsgHandler = defaultMsgHandler;\n/**\n * Deprecates a given function's options.\n * @internal\n *\n * @param this - the bound class if this is a method\n * @param config - configuration for deprecation\n * @param fn - the target function of deprecation\n * @returns modified function that warns once per deprecated option, and executes original function\n */\nfunction deprecateOptions(config, fn) {\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n  const msgHandler = config.msgHandler ? config.msgHandler : defaultMsgHandler;\n  const optionsWarned = new Set();\n  function deprecated() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const options = args[config.optionsIndex];\n    // ensure options is a valid, non-empty object, otherwise short-circuit\n    if (!isObject(options) || Object.keys(options).length === 0) {\n      return fn.bind(this)(...args); // call the function, no change\n    }\n    // interrupt the function call with a warning\n    for (const deprecatedOption of config.deprecatedOptions) {\n      if (deprecatedOption in options && !optionsWarned.has(deprecatedOption)) {\n        optionsWarned.add(deprecatedOption);\n        const msg = msgHandler(config.name, deprecatedOption);\n        emitWarning(msg);\n        if (this && 'getLogger' in this) {\n          const logger = this.getLogger();\n          if (logger) {\n            logger.warn(msg);\n          }\n        }\n      }\n    }\n    return fn.bind(this)(...args);\n  }\n  // These lines copied from https://github.com/nodejs/node/blob/25e5ae41688676a5fd29b2e2e7602168eee4ceb5/lib/internal/util.js#L73-L80\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\n  Object.setPrototypeOf(deprecated, fn);\n  if (fn.prototype) {\n    // Setting this (rather than using Object.setPrototype, as above) ensures\n    // that calling the unwrapped constructor gives an instanceof the wrapped\n    // constructor.\n    deprecated.prototype = fn.prototype;\n  }\n  return deprecated;\n}\nexports.deprecateOptions = deprecateOptions;\n/** @internal */\nfunction ns(ns) {\n  return MongoDBNamespace.fromString(ns);\n}\nexports.ns = ns;\n/** @public */\nclass MongoDBNamespace {\n  /**\n   * Create a namespace object\n   *\n   * @param db - database name\n   * @param collection - collection name\n   */\n  constructor(db, collection) {\n    this.db = db;\n    this.collection = collection === '' ? undefined : collection;\n  }\n  toString() {\n    return this.collection ? `${this.db}.${this.collection}` : this.db;\n  }\n  withCollection(collection) {\n    return new MongoDBNamespace(this.db, collection);\n  }\n  static fromString(namespace) {\n    if (typeof namespace !== 'string' || namespace === '') {\n      // TODO(NODE-3483): Replace with MongoNamespaceError\n      throw new error_1.MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n    }\n    const [db, ...collectionParts] = namespace.split('.');\n    const collection = collectionParts.join('.');\n    return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n  }\n}\nexports.MongoDBNamespace = MongoDBNamespace;\n/** @internal */\nfunction makeCounter() {\n  let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return function* () {\n    let count = seed;\n    while (true) {\n      const newCount = count;\n      count += 1;\n      yield newCount;\n    }\n  }();\n}\nexports.makeCounter = makeCounter;\n/**\n * Helper function for either accepting a callback, or returning a promise\n * @internal\n *\n * @param callback - The last function argument in exposed method, controls if a Promise is returned\n * @param wrapper - A function that wraps the callback\n * @returns Returns void if a callback is supplied, else returns a Promise.\n */\nfunction maybePromise(callback, wrapper) {\n  const Promise = promise_provider_1.PromiseProvider.get();\n  let result;\n  if (typeof callback !== 'function') {\n    result = new Promise((resolve, reject) => {\n      callback = (err, res) => {\n        if (err) return reject(err);\n        resolve(res);\n      };\n    });\n  }\n  wrapper((err, res) => {\n    if (err != null) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        callback(err);\n      } catch (error) {\n        process.nextTick(() => {\n          throw error;\n        });\n      }\n      return;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    callback(err, res);\n  });\n  return result;\n}\nexports.maybePromise = maybePromise;\n/** @internal */\nfunction databaseNamespace(ns) {\n  return ns.split('.')[0];\n}\nexports.databaseNamespace = databaseNamespace;\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nfunction uuidV4() {\n  const result = crypto.randomBytes(16);\n  result[6] = result[6] & 0x0f | 0x40;\n  result[8] = result[8] & 0x3f | 0x80;\n  return result;\n}\nexports.uuidV4 = uuidV4;\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nfunction maxWireVersion(topologyOrServer) {\n  if (topologyOrServer) {\n    if (topologyOrServer.loadBalanced) {\n      // Since we do not have a monitor, we assume the load balanced server is always\n      // pointed at the latest mongodb version. There is a risk that for on-prem\n      // deployments that don't upgrade immediately that this could alert to the\n      // application that a feature is avaiable that is actually not.\n      return constants_1.MAX_SUPPORTED_WIRE_VERSION;\n    }\n    if (topologyOrServer.hello) {\n      return topologyOrServer.hello.maxWireVersion;\n    }\n    if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n      const lastHello = topologyOrServer.lastHello();\n      if (lastHello) {\n        return lastHello.maxWireVersion;\n      }\n    }\n    if (topologyOrServer.description && 'maxWireVersion' in topologyOrServer.description && topologyOrServer.description.maxWireVersion != null) {\n      return topologyOrServer.description.maxWireVersion;\n    }\n  }\n  return 0;\n}\nexports.maxWireVersion = maxWireVersion;\n/**\n * Checks that collation is supported by server.\n * @internal\n *\n * @param server - to check against\n * @param cmd - object where collation may be specified\n */\nfunction collationNotSupported(server, cmd) {\n  return cmd && cmd.collation && maxWireVersion(server) < 5;\n}\nexports.collationNotSupported = collationNotSupported;\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n * @internal\n *\n * @param arr - An array of items to asynchronously iterate over\n * @param eachFn - A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param callback - The callback called after every item has been iterated\n */\nfunction eachAsync(arr, eachFn, callback) {\n  arr = arr || [];\n  let idx = 0;\n  let awaiting = 0;\n  for (idx = 0; idx < arr.length; ++idx) {\n    awaiting++;\n    eachFn(arr[idx], eachCallback);\n  }\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n  function eachCallback(err) {\n    awaiting--;\n    if (err) {\n      callback(err);\n      return;\n    }\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n    }\n  }\n}\nexports.eachAsync = eachAsync;\n/** @internal */\nfunction eachAsyncSeries(arr, eachFn, callback) {\n  arr = arr || [];\n  let idx = 0;\n  let awaiting = arr.length;\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n  function eachCallback(err) {\n    idx++;\n    awaiting--;\n    if (err) {\n      callback(err);\n      return;\n    }\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n      return;\n    }\n    eachFn(arr[idx], eachCallback);\n  }\n  eachFn(arr[idx], eachCallback);\n}\nexports.eachAsyncSeries = eachAsyncSeries;\n/** @internal */\nfunction arrayStrictEqual(arr, arr2) {\n  if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n    return false;\n  }\n  return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\nexports.arrayStrictEqual = arrayStrictEqual;\n/** @internal */\nfunction errorStrictEqual(lhs, rhs) {\n  if (lhs === rhs) {\n    return true;\n  }\n  if (!lhs || !rhs) {\n    return lhs === rhs;\n  }\n  if (lhs == null && rhs != null || lhs != null && rhs == null) {\n    return false;\n  }\n  if (lhs.constructor.name !== rhs.constructor.name) {\n    return false;\n  }\n  if (lhs.message !== rhs.message) {\n    return false;\n  }\n  return true;\n}\nexports.errorStrictEqual = errorStrictEqual;\n/** @internal */\nfunction makeStateMachine(stateTable) {\n  return function stateTransition(target, newState) {\n    const legalStates = stateTable[target.s.state];\n    if (legalStates && legalStates.indexOf(newState) < 0) {\n      throw new error_1.MongoRuntimeError(`illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`);\n    }\n    target.emit('stateChanged', target.s.state, newState);\n    target.s.state = newState;\n  };\n}\nexports.makeStateMachine = makeStateMachine;\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = require('../package.json').version;\nfunction makeClientMetadata(options) {\n  options = options !== null && options !== void 0 ? options : {};\n  const metadata = {\n    driver: {\n      name: 'nodejs',\n      version: NODE_DRIVER_VERSION\n    },\n    os: {\n      type: os.type(),\n      name: process.platform,\n      architecture: process.arch,\n      version: os.release()\n    },\n    platform: `Node.js ${process.version}, ${os.endianness()} (unified)`\n  };\n  // support optionally provided wrapping driver info\n  if (options.driverInfo) {\n    if (options.driverInfo.name) {\n      metadata.driver.name = `${metadata.driver.name}|${options.driverInfo.name}`;\n    }\n    if (options.driverInfo.version) {\n      metadata.version = `${metadata.driver.version}|${options.driverInfo.version}`;\n    }\n    if (options.driverInfo.platform) {\n      metadata.platform = `${metadata.platform}|${options.driverInfo.platform}`;\n    }\n  }\n  if (options.appName) {\n    // MongoDB requires the appName not exceed a byte length of 128\n    const buffer = Buffer.from(options.appName);\n    metadata.application = {\n      name: buffer.byteLength > 128 ? buffer.slice(0, 128).toString('utf8') : options.appName\n    };\n  }\n  return metadata;\n}\nexports.makeClientMetadata = makeClientMetadata;\n/** @internal */\nfunction now() {\n  const hrtime = process.hrtime();\n  return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\nexports.now = now;\n/** @internal */\nfunction calculateDurationInMs(started) {\n  if (typeof started !== 'number') {\n    throw new error_1.MongoInvalidArgumentError('Numeric value required to calculate duration');\n  }\n  const elapsed = now() - started;\n  return elapsed < 0 ? 0 : elapsed;\n}\nexports.calculateDurationInMs = calculateDurationInMs;\n/**\n * Creates an interval timer which is able to be woken up sooner than\n * the interval. The timer will also debounce multiple calls to wake\n * ensuring that the function is only ever called once within a minimum\n * interval window.\n * @internal\n *\n * @param fn - An async function to run on an interval, must accept a `callback` as its only parameter\n */\nfunction makeInterruptibleAsyncInterval(fn, options) {\n  let timerId;\n  let lastCallTime;\n  let cannotBeExpedited = false;\n  let stopped = false;\n  options = options !== null && options !== void 0 ? options : {};\n  const interval = options.interval || 1000;\n  const minInterval = options.minInterval || 500;\n  const immediate = typeof options.immediate === 'boolean' ? options.immediate : false;\n  const clock = typeof options.clock === 'function' ? options.clock : now;\n  function wake() {\n    const currentTime = clock();\n    const nextScheduledCallTime = lastCallTime + interval;\n    const timeUntilNextCall = nextScheduledCallTime - currentTime;\n    // For the streaming protocol: there is nothing obviously stopping this\n    // interval from being woken up again while we are waiting \"infinitely\"\n    // for `fn` to be called again`. Since the function effectively\n    // never completes, the `timeUntilNextCall` will continue to grow\n    // negatively unbounded, so it will never trigger a reschedule here.\n    // This is possible in virtualized environments like AWS Lambda where our\n    // clock is unreliable. In these cases the timer is \"running\" but never\n    // actually completes, so we want to execute immediately and then attempt\n    // to reschedule.\n    if (timeUntilNextCall < 0) {\n      executeAndReschedule();\n      return;\n    }\n    // debounce multiple calls to wake within the `minInterval`\n    if (cannotBeExpedited) {\n      return;\n    }\n    // reschedule a call as soon as possible, ensuring the call never happens\n    // faster than the `minInterval`\n    if (timeUntilNextCall > minInterval) {\n      reschedule(minInterval);\n      cannotBeExpedited = true;\n    }\n  }\n  function stop() {\n    stopped = true;\n    if (timerId) {\n      (0, timers_1.clearTimeout)(timerId);\n      timerId = undefined;\n    }\n    lastCallTime = 0;\n    cannotBeExpedited = false;\n  }\n  function reschedule(ms) {\n    if (stopped) return;\n    if (timerId) {\n      (0, timers_1.clearTimeout)(timerId);\n    }\n    timerId = (0, timers_1.setTimeout)(executeAndReschedule, ms || interval);\n  }\n  function executeAndReschedule() {\n    cannotBeExpedited = false;\n    lastCallTime = clock();\n    fn(err => {\n      if (err) throw err;\n      reschedule(interval);\n    });\n  }\n  if (immediate) {\n    executeAndReschedule();\n  } else {\n    lastCallTime = clock();\n    reschedule(undefined);\n  }\n  return {\n    wake,\n    stop\n  };\n}\nexports.makeInterruptibleAsyncInterval = makeInterruptibleAsyncInterval;\n/** @internal */\nfunction hasAtomicOperators(doc) {\n  if (Array.isArray(doc)) {\n    for (const document of doc) {\n      if (hasAtomicOperators(document)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  const keys = Object.keys(doc);\n  return keys.length > 0 && keys[0][0] === '$';\n}\nexports.hasAtomicOperators = hasAtomicOperators;\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\nfunction resolveOptions(parent, options) {\n  var _a, _b, _c;\n  const result = Object.assign({}, options, (0, bson_1.resolveBSONOptions)(options, parent));\n  // Users cannot pass a readConcern/writeConcern to operations in a transaction\n  const session = options === null || options === void 0 ? void 0 : options.session;\n  if (!(session === null || session === void 0 ? void 0 : session.inTransaction())) {\n    const readConcern = (_a = read_concern_1.ReadConcern.fromOptions(options)) !== null && _a !== void 0 ? _a : parent === null || parent === void 0 ? void 0 : parent.readConcern;\n    if (readConcern) {\n      result.readConcern = readConcern;\n    }\n    const writeConcern = (_b = write_concern_1.WriteConcern.fromOptions(options)) !== null && _b !== void 0 ? _b : parent === null || parent === void 0 ? void 0 : parent.writeConcern;\n    if (writeConcern) {\n      result.writeConcern = writeConcern;\n    }\n  }\n  const readPreference = (_c = read_preference_1.ReadPreference.fromOptions(options)) !== null && _c !== void 0 ? _c : parent === null || parent === void 0 ? void 0 : parent.readPreference;\n  if (readPreference) {\n    result.readPreference = readPreference;\n  }\n  return result;\n}\nexports.resolveOptions = resolveOptions;\nfunction isSuperset(set, subset) {\n  set = Array.isArray(set) ? new Set(set) : set;\n  subset = Array.isArray(subset) ? new Set(subset) : subset;\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.isSuperset = isSuperset;\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nfunction isHello(doc) {\n  return doc[constants_2.LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\nexports.isHello = isHello;\n/** Returns the items that are uniquely in setA */\nfunction setDifference(setA, setB) {\n  const difference = new Set(setA);\n  for (const elem of setB) {\n    difference.delete(elem);\n  }\n  return difference;\n}\nexports.setDifference = setDifference;\nconst HAS_OWN = (object, prop) => Object.prototype.hasOwnProperty.call(object, prop);\nfunction isRecord(value) {\n  let requiredKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  if (!isObject(value)) {\n    return false;\n  }\n  const ctor = value.constructor;\n  if (ctor && ctor.prototype) {\n    if (!isObject(ctor.prototype)) {\n      return false;\n    }\n    // Check to see if some method exists from the Object exists\n    if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n  }\n  if (requiredKeys) {\n    const keys = Object.keys(value);\n    return isSuperset(keys, requiredKeys);\n  }\n  return true;\n}\nexports.isRecord = isRecord;\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\nfunction deepCopy(value) {\n  if (value == null) {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value.map(item => deepCopy(item));\n  } else if (isRecord(value)) {\n    const res = {};\n    for (const key in value) {\n      res[key] = deepCopy(value[key]);\n    }\n    return res;\n  }\n  const ctor = value.constructor;\n  if (ctor) {\n    switch (ctor.name.toLowerCase()) {\n      case 'date':\n        return new ctor(Number(value));\n      case 'map':\n        return new Map(value);\n      case 'set':\n        return new Set(value);\n      case 'buffer':\n        return Buffer.from(value);\n    }\n  }\n  return value;\n}\nexports.deepCopy = deepCopy;\n/** @internal */\nconst kBuffers = Symbol('buffers');\n/** @internal */\nconst kLength = Symbol('length');\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nclass BufferPool {\n  constructor() {\n    this[kBuffers] = [];\n    this[kLength] = 0;\n  }\n  get length() {\n    return this[kLength];\n  }\n  /** Adds a buffer to the internal buffer pool list */\n  append(buffer) {\n    this[kBuffers].push(buffer);\n    this[kLength] += buffer.length;\n  }\n  /** Returns the requested number of bytes without consuming them */\n  peek(size) {\n    return this.read(size, false);\n  }\n  /** Reads the requested number of bytes, optionally consuming them */\n  read(size) {\n    let consume = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (typeof size !== 'number' || size < 0) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n    }\n    if (size > this[kLength]) {\n      return Buffer.alloc(0);\n    }\n    let result;\n    // read the whole buffer\n    if (size === this.length) {\n      result = Buffer.concat(this[kBuffers]);\n      if (consume) {\n        this[kBuffers] = [];\n        this[kLength] = 0;\n      }\n    }\n    // size is within first buffer, no need to concat\n    else if (size <= this[kBuffers][0].length) {\n      result = this[kBuffers][0].slice(0, size);\n      if (consume) {\n        this[kBuffers][0] = this[kBuffers][0].slice(size);\n        this[kLength] -= size;\n      }\n    }\n    // size is beyond first buffer, need to track and copy\n    else {\n      result = Buffer.allocUnsafe(size);\n      let idx;\n      let offset = 0;\n      let bytesToCopy = size;\n      for (idx = 0; idx < this[kBuffers].length; ++idx) {\n        let bytesCopied;\n        if (bytesToCopy > this[kBuffers][idx].length) {\n          bytesCopied = this[kBuffers][idx].copy(result, offset, 0);\n          offset += bytesCopied;\n        } else {\n          bytesCopied = this[kBuffers][idx].copy(result, offset, 0, bytesToCopy);\n          if (consume) {\n            this[kBuffers][idx] = this[kBuffers][idx].slice(bytesCopied);\n          }\n          offset += bytesCopied;\n          break;\n        }\n        bytesToCopy -= bytesCopied;\n      }\n      // compact the internal buffer array\n      if (consume) {\n        this[kBuffers] = this[kBuffers].slice(idx);\n        this[kLength] -= size;\n      }\n    }\n    return result;\n  }\n}\nexports.BufferPool = BufferPool;\n/** @public */\nclass HostAddress {\n  constructor(hostString) {\n    const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n    const {\n      hostname,\n      port\n    } = new url_1.URL(`mongodb://${escapedHost}`);\n    if (hostname.endsWith('.sock')) {\n      // heuristically determine if we're working with a domain socket\n      this.socketPath = decodeURIComponent(hostname);\n    } else if (typeof hostname === 'string') {\n      this.isIPv6 = false;\n      let normalized = decodeURIComponent(hostname).toLowerCase();\n      if (normalized.startsWith('[') && normalized.endsWith(']')) {\n        this.isIPv6 = true;\n        normalized = normalized.substring(1, hostname.length - 1);\n      }\n      this.host = normalized.toLowerCase();\n      if (typeof port === 'number') {\n        this.port = port;\n      } else if (typeof port === 'string' && port !== '') {\n        this.port = Number.parseInt(port, 10);\n      } else {\n        this.port = 27017;\n      }\n      if (this.port === 0) {\n        throw new error_1.MongoParseError('Invalid port (zero) with hostname');\n      }\n    } else {\n      throw new error_1.MongoInvalidArgumentError('Either socketPath or host must be defined.');\n    }\n    Object.freeze(this);\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.inspect();\n  }\n  inspect() {\n    return `new HostAddress('${this.toString(true)}')`;\n  }\n  /**\n   * @param ipv6Brackets - optionally request ipv6 bracket notation required for connection strings\n   */\n  toString() {\n    let ipv6Brackets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (typeof this.host === 'string') {\n      if (this.isIPv6 && ipv6Brackets) {\n        return `[${this.host}]:${this.port}`;\n      }\n      return `${this.host}:${this.port}`;\n    }\n    return `${this.socketPath}`;\n  }\n  static fromString(s) {\n    return new HostAddress(s);\n  }\n  static fromHostPort(host, port) {\n    if (host.includes(':')) {\n      host = `[${host}]`; // IPv6 address\n    }\n\n    return HostAddress.fromString(`${host}:${port}`);\n  }\n  static fromSrvRecord(_ref2) {\n    let {\n      name,\n      port\n    } = _ref2;\n    return HostAddress.fromHostPort(name, port);\n  }\n}\nexports.HostAddress = HostAddress;\nexports.DEFAULT_PK_FACTORY = {\n  // We prefer not to rely on ObjectId having a createPk method\n  createPk() {\n    return new bson_1.ObjectId();\n  }\n};\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```js\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexports.MONGODB_WARNING_CODE = 'MONGODB DRIVER';\n/** @internal */\nfunction emitWarning(message) {\n  return process.emitWarning(message, {\n    code: exports.MONGODB_WARNING_CODE\n  });\n}\nexports.emitWarning = emitWarning;\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nfunction emitWarningOnce(message) {\n  if (!emittedWarnings.has(message)) {\n    emittedWarnings.add(message);\n    return emitWarning(message);\n  }\n}\nexports.emitWarningOnce = emitWarningOnce;\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nfunction enumToString(en) {\n  return Object.values(en).join(', ');\n}\nexports.enumToString = enumToString;\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nfunction supportsRetryableWrites(server) {\n  if (!server) {\n    return false;\n  }\n  if (server.loadBalanced) {\n    // Loadbalanced topologies will always support retry writes\n    return true;\n  }\n  if (server.description.logicalSessionTimeoutMinutes != null) {\n    // that supports sessions\n    if (server.description.type !== common_1.ServerType.Standalone) {\n      // and that is not a standalone\n      return true;\n    }\n  }\n  return false;\n}\nexports.supportsRetryableWrites = supportsRetryableWrites;\nfunction parsePackageVersion(_ref3) {\n  let {\n    version\n  } = _ref3;\n  const [major, minor, patch] = version.split('.').map(n => Number.parseInt(n, 10));\n  return {\n    major,\n    minor,\n    patch\n  };\n}\nexports.parsePackageVersion = parsePackageVersion;\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nfunction shuffle(sequence) {\n  let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n  if (limit > items.length) {\n    throw new error_1.MongoRuntimeError('Limit must be less than the number of items');\n  }\n  let remainingItemsToShuffle = items.length;\n  const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n  while (remainingItemsToShuffle > lowerBound) {\n    // Pick a remaining element\n    const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n    remainingItemsToShuffle -= 1;\n    // And swap it with the current element\n    const swapHold = items[remainingItemsToShuffle];\n    items[remainingItemsToShuffle] = items[randomIndex];\n    items[randomIndex] = swapHold;\n  }\n  return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\nexports.shuffle = shuffle;\n// TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command, options) {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n  if (command.mapReduce && options && options.out && (options.out.inline === 1 || options.out === 'inline')) {\n    return true;\n  }\n  return false;\n}\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\nfunction getMongoDBClientEncryption() {\n  let mongodbClientEncryption = null;\n  // NOTE(NODE-4254): This is to get around the circular dependency between\n  // mongodb-client-encryption and the driver in the test scenarios.\n  if (typeof process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE === 'string' && process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE.length > 0) {\n    try {\n      // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n      // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n      // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n      mongodbClientEncryption = require(process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE);\n    } catch {\n      // ignore\n    }\n  } else {\n    try {\n      // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n      // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n      // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n      mongodbClientEncryption = require('mongodb-client-encryption');\n    } catch {\n      // ignore\n    }\n  }\n  return mongodbClientEncryption;\n}\nexports.getMongoDBClientEncryption = getMongoDBClientEncryption;","map":{"version":3,"names":["crypto","require","os","timers_1","url_1","bson_1","constants_1","constants_2","error_1","promise_provider_1","read_concern_1","read_preference_1","common_1","write_concern_1","exports","MAX_JS_INT","Number","MAX_SAFE_INTEGER","checkCollectionName","collectionName","MongoInvalidArgumentError","indexOf","match","normalizeHintField","hint","finalHint","undefined","Array","isArray","forEach","param","name","parseIndexOptions","indexSpec","fieldHash","indexes","keys","push","f","isObject","Object","k","entries","_ref","key","value","join","TO_STRING","object","prototype","toString","call","arg","mergeOptions","target","source","filterOptions","options","names","includes","applyRetryableWrites","db","_a","s","retryWrites","applyWriteConcern","sources","coll","collection","session","inTransaction","writeConcern","WriteConcern","fromOptions","assign","isPromiseLike","maybePromise","then","decorateWithCollation","command","capabilities","getTopology","collation","commandsTakeCollation","MongoCompatibilityError","decorateWithReadConcern","readConcern","length","decorateWithExplain","explain","verbosity","provider","topology","client","MongoNotConnectedError","defaultMsgHandler","option","deprecateOptions","config","fn","process","noDeprecation","msgHandler","optionsWarned","Set","deprecated","_len","arguments","args","_key","optionsIndex","bind","deprecatedOption","deprecatedOptions","has","add","msg","emitWarning","logger","getLogger","warn","setPrototypeOf","ns","MongoDBNamespace","fromString","constructor","withCollection","namespace","MongoRuntimeError","collectionParts","split","makeCounter","seed","count","newCount","callback","wrapper","Promise","PromiseProvider","get","result","resolve","reject","err","res","error","nextTick","databaseNamespace","uuidV4","randomBytes","maxWireVersion","topologyOrServer","loadBalanced","MAX_SUPPORTED_WIRE_VERSION","hello","lastHello","description","collationNotSupported","server","cmd","eachAsync","arr","eachFn","idx","awaiting","eachCallback","eachAsyncSeries","arrayStrictEqual","arr2","every","elt","errorStrictEqual","lhs","rhs","message","makeStateMachine","stateTable","stateTransition","newState","legalStates","state","emit","NODE_DRIVER_VERSION","version","makeClientMetadata","metadata","driver","type","platform","architecture","arch","release","endianness","driverInfo","appName","buffer","Buffer","from","application","byteLength","slice","now","hrtime","Math","floor","calculateDurationInMs","started","elapsed","makeInterruptibleAsyncInterval","timerId","lastCallTime","cannotBeExpedited","stopped","interval","minInterval","immediate","clock","wake","currentTime","nextScheduledCallTime","timeUntilNextCall","executeAndReschedule","reschedule","stop","clearTimeout","ms","setTimeout","hasAtomicOperators","doc","document","resolveOptions","parent","resolveBSONOptions","ReadConcern","_b","readPreference","_c","ReadPreference","isSuperset","set","subset","elem","isHello","LEGACY_HELLO_COMMAND","setDifference","setA","setB","difference","delete","HAS_OWN","prop","hasOwnProperty","isRecord","requiredKeys","ctor","deepCopy","map","item","toLowerCase","Map","kBuffers","Symbol","kLength","BufferPool","append","peek","size","read","consume","alloc","concat","allocUnsafe","offset","bytesToCopy","bytesCopied","copy","HostAddress","hostString","escapedHost","hostname","port","URL","endsWith","socketPath","decodeURIComponent","isIPv6","normalized","startsWith","substring","host","parseInt","MongoParseError","freeze","for","inspect","ipv6Brackets","fromHostPort","fromSrvRecord","_ref2","DEFAULT_PK_FACTORY","createPk","ObjectId","MONGODB_WARNING_CODE","code","emittedWarnings","emitWarningOnce","enumToString","en","values","supportsRetryableWrites","logicalSessionTimeoutMinutes","ServerType","Standalone","parsePackageVersion","_ref3","major","minor","patch","n","shuffle","sequence","limit","items","remainingItemsToShuffle","lowerBound","randomIndex","random","swapHold","commandSupportsReadConcern","aggregate","distinct","find","geoNear","mapReduce","out","inline","getMongoDBClientEncryption","mongodbClientEncryption","env","MONGODB_CLIENT_ENCRYPTION_OVERRIDE"],"sources":["C:\\Users\\Jatin\\node_modules\\mongodb\\src\\utils.ts"],"sourcesContent":["import * as crypto from 'crypto';\nimport type { SrvRecord } from 'dns';\nimport * as os from 'os';\nimport { clearTimeout, setTimeout } from 'timers';\nimport { URL } from 'url';\n\nimport { Document, ObjectId, resolveBSONOptions } from './bson';\nimport type { Connection } from './cmap/connection';\nimport { MAX_SUPPORTED_WIRE_VERSION } from './cmap/wire_protocol/constants';\nimport type { Collection } from './collection';\nimport { LEGACY_HELLO_COMMAND } from './constants';\nimport type { AbstractCursor } from './cursor/abstract_cursor';\nimport type { FindCursor } from './cursor/find_cursor';\nimport type { Db } from './db';\nimport {\n  AnyError,\n  MongoCompatibilityError,\n  MongoInvalidArgumentError,\n  MongoNotConnectedError,\n  MongoParseError,\n  MongoRuntimeError\n} from './error';\nimport type { Explain } from './explain';\nimport type { MongoClient } from './mongo_client';\nimport type { CommandOperationOptions, OperationParent } from './operations/command';\nimport type { IndexDirection, IndexSpecification } from './operations/indexes';\nimport type { Hint, OperationOptions } from './operations/operation';\nimport { PromiseProvider } from './promise_provider';\nimport { ReadConcern } from './read_concern';\nimport { ReadPreference } from './read_preference';\nimport { ServerType } from './sdam/common';\nimport type { Server } from './sdam/server';\nimport type { Topology } from './sdam/topology';\nimport type { ClientSession } from './sessions';\nimport { W, WriteConcern, WriteConcernOptions } from './write_concern';\n\n/**\n * MongoDB Driver style callback\n * @public\n */\nexport type Callback<T = any> = (error?: AnyError, result?: T) => void;\n\nexport const MAX_JS_INT = Number.MAX_SAFE_INTEGER + 1;\n\nexport type AnyOptions = Document;\n\n/**\n * Throws if collectionName is not a valid mongodb collection namespace.\n * @internal\n */\nexport function checkCollectionName(collectionName: string): void {\n  if ('string' !== typeof collectionName) {\n    throw new MongoInvalidArgumentError('Collection name must be a String');\n  }\n\n  if (!collectionName || collectionName.indexOf('..') !== -1) {\n    throw new MongoInvalidArgumentError('Collection names cannot be empty');\n  }\n\n  if (\n    collectionName.indexOf('$') !== -1 &&\n    collectionName.match(/((^\\$cmd)|(oplog\\.\\$main))/) == null\n  ) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new MongoInvalidArgumentError(\"Collection names must not contain '$'\");\n  }\n\n  if (collectionName.match(/^\\.|\\.$/) != null) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new MongoInvalidArgumentError(\"Collection names must not start or end with '.'\");\n  }\n\n  // Validate that we are not passing 0x00 in the collection name\n  if (collectionName.indexOf('\\x00') !== -1) {\n    // TODO(NODE-3483): Use MongoNamespace static method\n    throw new MongoInvalidArgumentError('Collection names cannot contain a null character');\n  }\n}\n\n/**\n * Ensure Hint field is in a shape we expect:\n * - object of index names mapping to 1 or -1\n * - just an index name\n * @internal\n */\nexport function normalizeHintField(hint?: Hint): Hint | undefined {\n  let finalHint = undefined;\n\n  if (typeof hint === 'string') {\n    finalHint = hint;\n  } else if (Array.isArray(hint)) {\n    finalHint = {};\n\n    hint.forEach(param => {\n      finalHint[param] = 1;\n    });\n  } else if (hint != null && typeof hint === 'object') {\n    finalHint = {} as Document;\n    for (const name in hint) {\n      finalHint[name] = hint[name];\n    }\n  }\n\n  return finalHint;\n}\n\ninterface IndexOptions {\n  name: string;\n  keys?: string[];\n  fieldHash: Document;\n}\n\n/**\n * Create an index specifier based on\n * @internal\n */\nexport function parseIndexOptions(indexSpec: IndexSpecification): IndexOptions {\n  const fieldHash: { [key: string]: IndexDirection } = {};\n  const indexes = [];\n  let keys;\n\n  // Get all the fields accordingly\n  if ('string' === typeof indexSpec) {\n    // 'type'\n    indexes.push(indexSpec + '_' + 1);\n    fieldHash[indexSpec] = 1;\n  } else if (Array.isArray(indexSpec)) {\n    indexSpec.forEach((f: any) => {\n      if ('string' === typeof f) {\n        // [{location:'2d'}, 'type']\n        indexes.push(f + '_' + 1);\n        fieldHash[f] = 1;\n      } else if (Array.isArray(f)) {\n        // [['location', '2d'],['type', 1]]\n        indexes.push(f[0] + '_' + (f[1] || 1));\n        fieldHash[f[0]] = f[1] || 1;\n      } else if (isObject(f)) {\n        // [{location:'2d'}, {type:1}]\n        keys = Object.keys(f);\n        keys.forEach(k => {\n          indexes.push(k + '_' + (f as AnyOptions)[k]);\n          fieldHash[k] = (f as AnyOptions)[k];\n        });\n      } else {\n        // undefined (ignore)\n      }\n    });\n  } else if (isObject(indexSpec)) {\n    // {location:'2d', type:1}\n    keys = Object.keys(indexSpec);\n    Object.entries(indexSpec).forEach(([key, value]) => {\n      indexes.push(key + '_' + value);\n      fieldHash[key] = value;\n    });\n  }\n\n  return {\n    name: indexes.join('_'),\n    keys: keys,\n    fieldHash: fieldHash\n  };\n}\n\nconst TO_STRING = (object: unknown) => Object.prototype.toString.call(object);\n/**\n * Checks if arg is an Object:\n * - **NOTE**: the check is based on the `[Symbol.toStringTag]() === 'Object'`\n * @internal\n */\n\nexport function isObject(arg: unknown): arg is object {\n  return '[object Object]' === TO_STRING(arg);\n}\n\n/** @internal */\nexport function mergeOptions<T, S>(target: T, source: S): T & S {\n  return { ...target, ...source };\n}\n\n/** @internal */\nexport function filterOptions(options: AnyOptions, names: ReadonlyArray<string>): AnyOptions {\n  const filterOptions: AnyOptions = {};\n\n  for (const name in options) {\n    if (names.includes(name)) {\n      filterOptions[name] = options[name];\n    }\n  }\n\n  // Filtered options\n  return filterOptions;\n}\n\ninterface HasRetryableWrites {\n  retryWrites?: boolean;\n}\n/**\n * Applies retryWrites: true to a command if retryWrites is set on the command's database.\n * @internal\n *\n * @param target - The target command to which we will apply retryWrites.\n * @param db - The database from which we can inherit a retryWrites value.\n */\nexport function applyRetryableWrites<T extends HasRetryableWrites>(target: T, db?: Db): T {\n  if (db && db.s.options?.retryWrites) {\n    target.retryWrites = true;\n  }\n\n  return target;\n}\n\ninterface HasWriteConcern {\n  writeConcern?: WriteConcernOptions | WriteConcern | W;\n}\n/**\n * Applies a write concern to a command based on well defined inheritance rules, optionally\n * detecting support for the write concern in the first place.\n * @internal\n *\n * @param target - the target command we will be applying the write concern to\n * @param sources - sources where we can inherit default write concerns from\n * @param options - optional settings passed into a command for write concern overrides\n */\nexport function applyWriteConcern<T extends HasWriteConcern>(\n  target: T,\n  sources: { db?: Db; collection?: Collection },\n  options?: OperationOptions & WriteConcernOptions\n): T {\n  options = options ?? {};\n  const db = sources.db;\n  const coll = sources.collection;\n\n  if (options.session && options.session.inTransaction()) {\n    // writeConcern is not allowed within a multi-statement transaction\n    if (target.writeConcern) {\n      delete target.writeConcern;\n    }\n\n    return target;\n  }\n\n  const writeConcern = WriteConcern.fromOptions(options);\n  if (writeConcern) {\n    return Object.assign(target, { writeConcern });\n  }\n\n  if (coll && coll.writeConcern) {\n    return Object.assign(target, { writeConcern: Object.assign({}, coll.writeConcern) });\n  }\n\n  if (db && db.writeConcern) {\n    return Object.assign(target, { writeConcern: Object.assign({}, db.writeConcern) });\n  }\n\n  return target;\n}\n\n/**\n * Checks if a given value is a Promise\n *\n * @typeParam T - The result type of maybePromise\n * @param maybePromise - An object that could be a promise\n * @returns true if the provided value is a Promise\n */\nexport function isPromiseLike<T = any>(\n  maybePromise?: PromiseLike<T> | void\n): maybePromise is Promise<T> {\n  return !!maybePromise && typeof maybePromise.then === 'function';\n}\n\n/**\n * Applies collation to a given command.\n * @internal\n *\n * @param command - the command on which to apply collation\n * @param target - target of command\n * @param options - options containing collation settings\n */\nexport function decorateWithCollation(\n  command: Document,\n  target: MongoClient | Db | Collection,\n  options: AnyOptions\n): void {\n  const capabilities = getTopology(target).capabilities;\n  if (options.collation && typeof options.collation === 'object') {\n    if (capabilities && capabilities.commandsTakeCollation) {\n      command.collation = options.collation;\n    } else {\n      throw new MongoCompatibilityError(`Current topology does not support collation`);\n    }\n  }\n}\n\n/**\n * Applies a read concern to a given command.\n * @internal\n *\n * @param command - the command on which to apply the read concern\n * @param coll - the parent collection of the operation calling this method\n */\nexport function decorateWithReadConcern(\n  command: Document,\n  coll: { s: { readConcern?: ReadConcern } },\n  options?: OperationOptions\n): void {\n  if (options && options.session && options.session.inTransaction()) {\n    return;\n  }\n  const readConcern = Object.assign({}, command.readConcern || {});\n  if (coll.s.readConcern) {\n    Object.assign(readConcern, coll.s.readConcern);\n  }\n\n  if (Object.keys(readConcern).length > 0) {\n    Object.assign(command, { readConcern: readConcern });\n  }\n}\n\n/**\n * Applies an explain to a given command.\n * @internal\n *\n * @param command - the command on which to apply the explain\n * @param options - the options containing the explain verbosity\n */\nexport function decorateWithExplain(command: Document, explain: Explain): Document {\n  if (command.explain) {\n    return command;\n  }\n\n  return { explain: command, verbosity: explain.verbosity };\n}\n\n/**\n * @internal\n */\nexport type TopologyProvider =\n  | MongoClient\n  | ClientSession\n  | FindCursor\n  | AbstractCursor\n  | Collection<any>\n  | Db;\n\n/**\n * A helper function to get the topology from a given provider. Throws\n * if the topology cannot be found.\n * @throws MongoNotConnectedError\n * @internal\n */\nexport function getTopology(provider: TopologyProvider): Topology {\n  // MongoClient or ClientSession or AbstractCursor\n  if ('topology' in provider && provider.topology) {\n    return provider.topology;\n  } else if ('s' in provider && 'client' in provider.s && provider.s.client.topology) {\n    return provider.s.client.topology;\n  } else if ('s' in provider && 'db' in provider.s && provider.s.db.s.client.topology) {\n    return provider.s.db.s.client.topology;\n  }\n\n  throw new MongoNotConnectedError('MongoClient must be connected to perform this operation');\n}\n\n/**\n * Default message handler for generating deprecation warnings.\n * @internal\n *\n * @param name - function name\n * @param option - option name\n * @returns warning message\n */\nexport function defaultMsgHandler(name: string, option: string): string {\n  return `${name} option [${option}] is deprecated and will be removed in a later version.`;\n}\n\nexport interface DeprecateOptionsConfig {\n  /** function name */\n  name: string;\n  /** options to deprecate */\n  deprecatedOptions: string[];\n  /** index of options object in function arguments array */\n  optionsIndex: number;\n  /** optional custom message handler to generate warnings */\n  msgHandler?(this: void, name: string, option: string): string;\n}\n\n/**\n * Deprecates a given function's options.\n * @internal\n *\n * @param this - the bound class if this is a method\n * @param config - configuration for deprecation\n * @param fn - the target function of deprecation\n * @returns modified function that warns once per deprecated option, and executes original function\n */\nexport function deprecateOptions(\n  this: unknown,\n  config: DeprecateOptionsConfig,\n  fn: (...args: any[]) => any\n): any {\n  if ((process as any).noDeprecation === true) {\n    return fn;\n  }\n\n  const msgHandler = config.msgHandler ? config.msgHandler : defaultMsgHandler;\n\n  const optionsWarned = new Set();\n  function deprecated(this: any, ...args: any[]) {\n    const options = args[config.optionsIndex] as AnyOptions;\n\n    // ensure options is a valid, non-empty object, otherwise short-circuit\n    if (!isObject(options) || Object.keys(options).length === 0) {\n      return fn.bind(this)(...args); // call the function, no change\n    }\n\n    // interrupt the function call with a warning\n    for (const deprecatedOption of config.deprecatedOptions) {\n      if (deprecatedOption in options && !optionsWarned.has(deprecatedOption)) {\n        optionsWarned.add(deprecatedOption);\n        const msg = msgHandler(config.name, deprecatedOption);\n        emitWarning(msg);\n        if (this && 'getLogger' in this) {\n          const logger = this.getLogger();\n          if (logger) {\n            logger.warn(msg);\n          }\n        }\n      }\n    }\n\n    return fn.bind(this)(...args);\n  }\n\n  // These lines copied from https://github.com/nodejs/node/blob/25e5ae41688676a5fd29b2e2e7602168eee4ceb5/lib/internal/util.js#L73-L80\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\n  Object.setPrototypeOf(deprecated, fn);\n  if (fn.prototype) {\n    // Setting this (rather than using Object.setPrototype, as above) ensures\n    // that calling the unwrapped constructor gives an instanceof the wrapped\n    // constructor.\n    deprecated.prototype = fn.prototype;\n  }\n\n  return deprecated;\n}\n\n/** @internal */\nexport function ns(ns: string): MongoDBNamespace {\n  return MongoDBNamespace.fromString(ns);\n}\n\n/** @public */\nexport class MongoDBNamespace {\n  db: string;\n  collection: string | undefined;\n  /**\n   * Create a namespace object\n   *\n   * @param db - database name\n   * @param collection - collection name\n   */\n  constructor(db: string, collection?: string) {\n    this.db = db;\n    this.collection = collection === '' ? undefined : collection;\n  }\n\n  toString(): string {\n    return this.collection ? `${this.db}.${this.collection}` : this.db;\n  }\n\n  withCollection(collection: string): MongoDBNamespace {\n    return new MongoDBNamespace(this.db, collection);\n  }\n\n  static fromString(namespace?: string): MongoDBNamespace {\n    if (typeof namespace !== 'string' || namespace === '') {\n      // TODO(NODE-3483): Replace with MongoNamespaceError\n      throw new MongoRuntimeError(`Cannot parse namespace from \"${namespace}\"`);\n    }\n\n    const [db, ...collectionParts] = namespace.split('.');\n    const collection = collectionParts.join('.');\n    return new MongoDBNamespace(db, collection === '' ? undefined : collection);\n  }\n}\n\n/** @internal */\nexport function* makeCounter(seed = 0): Generator<number> {\n  let count = seed;\n  while (true) {\n    const newCount = count;\n    count += 1;\n    yield newCount;\n  }\n}\n\n/**\n * Helper function for either accepting a callback, or returning a promise\n * @internal\n *\n * @param callback - The last function argument in exposed method, controls if a Promise is returned\n * @param wrapper - A function that wraps the callback\n * @returns Returns void if a callback is supplied, else returns a Promise.\n */\nexport function maybePromise<T>(\n  callback: Callback<T> | undefined,\n  wrapper: (fn: Callback<T>) => void\n): Promise<T> | void {\n  const Promise = PromiseProvider.get();\n  let result: Promise<T> | void;\n  if (typeof callback !== 'function') {\n    result = new Promise<any>((resolve, reject) => {\n      callback = (err, res) => {\n        if (err) return reject(err);\n        resolve(res);\n      };\n    });\n  }\n\n  wrapper((err, res) => {\n    if (err != null) {\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        callback!(err);\n      } catch (error) {\n        process.nextTick(() => {\n          throw error;\n        });\n      }\n\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    callback!(err, res);\n  });\n\n  return result;\n}\n\n/** @internal */\nexport function databaseNamespace(ns: string): string {\n  return ns.split('.')[0];\n}\n\n/**\n * Synchronously Generate a UUIDv4\n * @internal\n */\nexport function uuidV4(): Buffer {\n  const result = crypto.randomBytes(16);\n  result[6] = (result[6] & 0x0f) | 0x40;\n  result[8] = (result[8] & 0x3f) | 0x80;\n  return result;\n}\n\n/**\n * A helper function for determining `maxWireVersion` between legacy and new topology instances\n * @internal\n */\nexport function maxWireVersion(topologyOrServer?: Connection | Topology | Server): number {\n  if (topologyOrServer) {\n    if (topologyOrServer.loadBalanced) {\n      // Since we do not have a monitor, we assume the load balanced server is always\n      // pointed at the latest mongodb version. There is a risk that for on-prem\n      // deployments that don't upgrade immediately that this could alert to the\n      // application that a feature is avaiable that is actually not.\n      return MAX_SUPPORTED_WIRE_VERSION;\n    }\n    if (topologyOrServer.hello) {\n      return topologyOrServer.hello.maxWireVersion;\n    }\n\n    if ('lastHello' in topologyOrServer && typeof topologyOrServer.lastHello === 'function') {\n      const lastHello = topologyOrServer.lastHello();\n      if (lastHello) {\n        return lastHello.maxWireVersion;\n      }\n    }\n\n    if (\n      topologyOrServer.description &&\n      'maxWireVersion' in topologyOrServer.description &&\n      topologyOrServer.description.maxWireVersion != null\n    ) {\n      return topologyOrServer.description.maxWireVersion;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * Checks that collation is supported by server.\n * @internal\n *\n * @param server - to check against\n * @param cmd - object where collation may be specified\n */\nexport function collationNotSupported(server: Server, cmd: Document): boolean {\n  return cmd && cmd.collation && maxWireVersion(server) < 5;\n}\n\n/**\n * Applies the function `eachFn` to each item in `arr`, in parallel.\n * @internal\n *\n * @param arr - An array of items to asynchronously iterate over\n * @param eachFn - A function to call on each item of the array. The callback signature is `(item, callback)`, where the callback indicates iteration is complete.\n * @param callback - The callback called after every item has been iterated\n */\nexport function eachAsync<T = Document>(\n  arr: T[],\n  eachFn: (item: T, callback: (err?: AnyError) => void) => void,\n  callback: Callback\n): void {\n  arr = arr || [];\n\n  let idx = 0;\n  let awaiting = 0;\n  for (idx = 0; idx < arr.length; ++idx) {\n    awaiting++;\n    eachFn(arr[idx], eachCallback);\n  }\n\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n\n  function eachCallback(err?: AnyError) {\n    awaiting--;\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n    }\n  }\n}\n\n/** @internal */\nexport function eachAsyncSeries<T = any>(\n  arr: T[],\n  eachFn: (item: T, callback: (err?: AnyError) => void) => void,\n  callback: Callback\n): void {\n  arr = arr || [];\n\n  let idx = 0;\n  let awaiting = arr.length;\n  if (awaiting === 0) {\n    callback();\n    return;\n  }\n\n  function eachCallback(err?: AnyError) {\n    idx++;\n    awaiting--;\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (idx === arr.length && awaiting <= 0) {\n      callback();\n      return;\n    }\n\n    eachFn(arr[idx], eachCallback);\n  }\n\n  eachFn(arr[idx], eachCallback);\n}\n\n/** @internal */\nexport function arrayStrictEqual(arr: unknown[], arr2: unknown[]): boolean {\n  if (!Array.isArray(arr) || !Array.isArray(arr2)) {\n    return false;\n  }\n\n  return arr.length === arr2.length && arr.every((elt, idx) => elt === arr2[idx]);\n}\n\n/** @internal */\nexport function errorStrictEqual(lhs?: AnyError, rhs?: AnyError): boolean {\n  if (lhs === rhs) {\n    return true;\n  }\n\n  if (!lhs || !rhs) {\n    return lhs === rhs;\n  }\n\n  if ((lhs == null && rhs != null) || (lhs != null && rhs == null)) {\n    return false;\n  }\n\n  if (lhs.constructor.name !== rhs.constructor.name) {\n    return false;\n  }\n\n  if (lhs.message !== rhs.message) {\n    return false;\n  }\n\n  return true;\n}\n\ninterface StateTable {\n  [key: string]: string[];\n}\ninterface ObjectWithState {\n  s: { state: string };\n  emit(event: 'stateChanged', state: string, newState: string): void;\n}\ninterface StateTransitionFunction {\n  (target: ObjectWithState, newState: string): void;\n}\n\n/** @public */\nexport type EventEmitterWithState = {\n  /** @internal */\n  stateChanged(previous: string, current: string): void;\n};\n\n/** @internal */\nexport function makeStateMachine(stateTable: StateTable): StateTransitionFunction {\n  return function stateTransition(target, newState) {\n    const legalStates = stateTable[target.s.state];\n    if (legalStates && legalStates.indexOf(newState) < 0) {\n      throw new MongoRuntimeError(\n        `illegal state transition from [${target.s.state}] => [${newState}], allowed: [${legalStates}]`\n      );\n    }\n\n    target.emit('stateChanged', target.s.state, newState);\n    target.s.state = newState;\n  };\n}\n\n/** @public */\nexport interface ClientMetadata {\n  driver: {\n    name: string;\n    version: string;\n  };\n  os: {\n    type: string;\n    name: NodeJS.Platform;\n    architecture: string;\n    version: string;\n  };\n  platform: string;\n  version?: string;\n  application?: {\n    name: string;\n  };\n}\n\n/** @public */\nexport interface ClientMetadataOptions {\n  driverInfo?: {\n    name?: string;\n    version?: string;\n    platform?: string;\n  };\n  appName?: string;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst NODE_DRIVER_VERSION = require('../package.json').version;\n\nexport function makeClientMetadata(options?: ClientMetadataOptions): ClientMetadata {\n  options = options ?? {};\n\n  const metadata: ClientMetadata = {\n    driver: {\n      name: 'nodejs',\n      version: NODE_DRIVER_VERSION\n    },\n    os: {\n      type: os.type(),\n      name: process.platform,\n      architecture: process.arch,\n      version: os.release()\n    },\n    platform: `Node.js ${process.version}, ${os.endianness()} (unified)`\n  };\n\n  // support optionally provided wrapping driver info\n  if (options.driverInfo) {\n    if (options.driverInfo.name) {\n      metadata.driver.name = `${metadata.driver.name}|${options.driverInfo.name}`;\n    }\n\n    if (options.driverInfo.version) {\n      metadata.version = `${metadata.driver.version}|${options.driverInfo.version}`;\n    }\n\n    if (options.driverInfo.platform) {\n      metadata.platform = `${metadata.platform}|${options.driverInfo.platform}`;\n    }\n  }\n\n  if (options.appName) {\n    // MongoDB requires the appName not exceed a byte length of 128\n    const buffer = Buffer.from(options.appName);\n    metadata.application = {\n      name: buffer.byteLength > 128 ? buffer.slice(0, 128).toString('utf8') : options.appName\n    };\n  }\n\n  return metadata;\n}\n\n/** @internal */\nexport function now(): number {\n  const hrtime = process.hrtime();\n  return Math.floor(hrtime[0] * 1000 + hrtime[1] / 1000000);\n}\n\n/** @internal */\nexport function calculateDurationInMs(started: number): number {\n  if (typeof started !== 'number') {\n    throw new MongoInvalidArgumentError('Numeric value required to calculate duration');\n  }\n\n  const elapsed = now() - started;\n  return elapsed < 0 ? 0 : elapsed;\n}\n\nexport interface InterruptibleAsyncIntervalOptions {\n  /** The interval to execute a method on */\n  interval: number;\n  /** A minimum interval that must elapse before the method is called */\n  minInterval: number;\n  /** Whether the method should be called immediately when the interval is started  */\n  immediate: boolean;\n\n  /**\n   * Only used for testing unreliable timer environments\n   * @internal\n   */\n  clock: () => number;\n}\n\n/** @internal */\nexport interface InterruptibleAsyncInterval {\n  wake(): void;\n  stop(): void;\n}\n\n/**\n * Creates an interval timer which is able to be woken up sooner than\n * the interval. The timer will also debounce multiple calls to wake\n * ensuring that the function is only ever called once within a minimum\n * interval window.\n * @internal\n *\n * @param fn - An async function to run on an interval, must accept a `callback` as its only parameter\n */\nexport function makeInterruptibleAsyncInterval(\n  fn: (callback: Callback) => void,\n  options?: Partial<InterruptibleAsyncIntervalOptions>\n): InterruptibleAsyncInterval {\n  let timerId: NodeJS.Timeout | undefined;\n  let lastCallTime: number;\n  let cannotBeExpedited = false;\n  let stopped = false;\n\n  options = options ?? {};\n  const interval = options.interval || 1000;\n  const minInterval = options.minInterval || 500;\n  const immediate = typeof options.immediate === 'boolean' ? options.immediate : false;\n  const clock = typeof options.clock === 'function' ? options.clock : now;\n\n  function wake() {\n    const currentTime = clock();\n    const nextScheduledCallTime = lastCallTime + interval;\n    const timeUntilNextCall = nextScheduledCallTime - currentTime;\n\n    // For the streaming protocol: there is nothing obviously stopping this\n    // interval from being woken up again while we are waiting \"infinitely\"\n    // for `fn` to be called again`. Since the function effectively\n    // never completes, the `timeUntilNextCall` will continue to grow\n    // negatively unbounded, so it will never trigger a reschedule here.\n\n    // This is possible in virtualized environments like AWS Lambda where our\n    // clock is unreliable. In these cases the timer is \"running\" but never\n    // actually completes, so we want to execute immediately and then attempt\n    // to reschedule.\n    if (timeUntilNextCall < 0) {\n      executeAndReschedule();\n      return;\n    }\n\n    // debounce multiple calls to wake within the `minInterval`\n    if (cannotBeExpedited) {\n      return;\n    }\n\n    // reschedule a call as soon as possible, ensuring the call never happens\n    // faster than the `minInterval`\n    if (timeUntilNextCall > minInterval) {\n      reschedule(minInterval);\n      cannotBeExpedited = true;\n    }\n  }\n\n  function stop() {\n    stopped = true;\n    if (timerId) {\n      clearTimeout(timerId);\n      timerId = undefined;\n    }\n\n    lastCallTime = 0;\n    cannotBeExpedited = false;\n  }\n\n  function reschedule(ms?: number) {\n    if (stopped) return;\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n\n    timerId = setTimeout(executeAndReschedule, ms || interval);\n  }\n\n  function executeAndReschedule() {\n    cannotBeExpedited = false;\n    lastCallTime = clock();\n\n    fn(err => {\n      if (err) throw err;\n      reschedule(interval);\n    });\n  }\n\n  if (immediate) {\n    executeAndReschedule();\n  } else {\n    lastCallTime = clock();\n    reschedule(undefined);\n  }\n\n  return { wake, stop };\n}\n\n/** @internal */\nexport function hasAtomicOperators(doc: Document | Document[]): boolean {\n  if (Array.isArray(doc)) {\n    for (const document of doc) {\n      if (hasAtomicOperators(document)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const keys = Object.keys(doc);\n  return keys.length > 0 && keys[0][0] === '$';\n}\n\n/**\n * Merge inherited properties from parent into options, prioritizing values from options,\n * then values from parent.\n * @internal\n */\nexport function resolveOptions<T extends CommandOperationOptions>(\n  parent: OperationParent | undefined,\n  options?: T\n): T {\n  const result: T = Object.assign({}, options, resolveBSONOptions(options, parent));\n\n  // Users cannot pass a readConcern/writeConcern to operations in a transaction\n  const session = options?.session;\n  if (!session?.inTransaction()) {\n    const readConcern = ReadConcern.fromOptions(options) ?? parent?.readConcern;\n    if (readConcern) {\n      result.readConcern = readConcern;\n    }\n\n    const writeConcern = WriteConcern.fromOptions(options) ?? parent?.writeConcern;\n    if (writeConcern) {\n      result.writeConcern = writeConcern;\n    }\n  }\n\n  const readPreference = ReadPreference.fromOptions(options) ?? parent?.readPreference;\n  if (readPreference) {\n    result.readPreference = readPreference;\n  }\n\n  return result;\n}\n\nexport function isSuperset(set: Set<any> | any[], subset: Set<any> | any[]): boolean {\n  set = Array.isArray(set) ? new Set(set) : set;\n  subset = Array.isArray(subset) ? new Set(subset) : subset;\n  for (const elem of subset) {\n    if (!set.has(elem)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Checks if the document is a Hello request\n * @internal\n */\nexport function isHello(doc: Document): boolean {\n  return doc[LEGACY_HELLO_COMMAND] || doc.hello ? true : false;\n}\n\n/** Returns the items that are uniquely in setA */\nexport function setDifference<T>(setA: Iterable<T>, setB: Iterable<T>): Set<T> {\n  const difference = new Set<T>(setA);\n  for (const elem of setB) {\n    difference.delete(elem);\n  }\n  return difference;\n}\n\nconst HAS_OWN = (object: unknown, prop: string) =>\n  Object.prototype.hasOwnProperty.call(object, prop);\n\nexport function isRecord<T extends readonly string[]>(\n  value: unknown,\n  requiredKeys: T\n): value is Record<T[number], any>;\nexport function isRecord(value: unknown): value is Record<string, any>;\nexport function isRecord(\n  value: unknown,\n  requiredKeys: string[] | undefined = undefined\n): value is Record<string, any> {\n  if (!isObject(value)) {\n    return false;\n  }\n\n  const ctor = (value as any).constructor;\n  if (ctor && ctor.prototype) {\n    if (!isObject(ctor.prototype)) {\n      return false;\n    }\n\n    // Check to see if some method exists from the Object exists\n    if (!HAS_OWN(ctor.prototype, 'isPrototypeOf')) {\n      return false;\n    }\n  }\n\n  if (requiredKeys) {\n    const keys = Object.keys(value as Record<string, any>);\n    return isSuperset(keys, requiredKeys);\n  }\n\n  return true;\n}\n\n/**\n * Make a deep copy of an object\n *\n * NOTE: This is not meant to be the perfect implementation of a deep copy,\n * but instead something that is good enough for the purposes of\n * command monitoring.\n */\nexport function deepCopy<T>(value: T): T {\n  if (value == null) {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value.map(item => deepCopy(item)) as unknown as T;\n  } else if (isRecord(value)) {\n    const res = {} as any;\n    for (const key in value) {\n      res[key] = deepCopy(value[key]);\n    }\n    return res;\n  }\n\n  const ctor = (value as any).constructor;\n  if (ctor) {\n    switch (ctor.name.toLowerCase()) {\n      case 'date':\n        return new ctor(Number(value));\n      case 'map':\n        return new Map(value as any) as unknown as T;\n      case 'set':\n        return new Set(value as any) as unknown as T;\n      case 'buffer':\n        return Buffer.from(value as unknown as Buffer) as unknown as T;\n    }\n  }\n\n  return value;\n}\n\n/** @internal */\nconst kBuffers = Symbol('buffers');\n/** @internal */\nconst kLength = Symbol('length');\n\n/**\n * A pool of Buffers which allow you to read them as if they were one\n * @internal\n */\nexport class BufferPool {\n  [kBuffers]: Buffer[];\n  [kLength]: number;\n\n  constructor() {\n    this[kBuffers] = [];\n    this[kLength] = 0;\n  }\n\n  get length(): number {\n    return this[kLength];\n  }\n\n  /** Adds a buffer to the internal buffer pool list */\n  append(buffer: Buffer): void {\n    this[kBuffers].push(buffer);\n    this[kLength] += buffer.length;\n  }\n\n  /** Returns the requested number of bytes without consuming them */\n  peek(size: number): Buffer {\n    return this.read(size, false);\n  }\n\n  /** Reads the requested number of bytes, optionally consuming them */\n  read(size: number, consume = true): Buffer {\n    if (typeof size !== 'number' || size < 0) {\n      throw new MongoInvalidArgumentError('Argument \"size\" must be a non-negative number');\n    }\n\n    if (size > this[kLength]) {\n      return Buffer.alloc(0);\n    }\n\n    let result: Buffer;\n\n    // read the whole buffer\n    if (size === this.length) {\n      result = Buffer.concat(this[kBuffers]);\n\n      if (consume) {\n        this[kBuffers] = [];\n        this[kLength] = 0;\n      }\n    }\n\n    // size is within first buffer, no need to concat\n    else if (size <= this[kBuffers][0].length) {\n      result = this[kBuffers][0].slice(0, size);\n      if (consume) {\n        this[kBuffers][0] = this[kBuffers][0].slice(size);\n        this[kLength] -= size;\n      }\n    }\n\n    // size is beyond first buffer, need to track and copy\n    else {\n      result = Buffer.allocUnsafe(size);\n\n      let idx;\n      let offset = 0;\n      let bytesToCopy = size;\n      for (idx = 0; idx < this[kBuffers].length; ++idx) {\n        let bytesCopied;\n        if (bytesToCopy > this[kBuffers][idx].length) {\n          bytesCopied = this[kBuffers][idx].copy(result, offset, 0);\n          offset += bytesCopied;\n        } else {\n          bytesCopied = this[kBuffers][idx].copy(result, offset, 0, bytesToCopy);\n          if (consume) {\n            this[kBuffers][idx] = this[kBuffers][idx].slice(bytesCopied);\n          }\n          offset += bytesCopied;\n          break;\n        }\n\n        bytesToCopy -= bytesCopied;\n      }\n\n      // compact the internal buffer array\n      if (consume) {\n        this[kBuffers] = this[kBuffers].slice(idx);\n        this[kLength] -= size;\n      }\n    }\n\n    return result;\n  }\n}\n\n/** @public */\nexport class HostAddress {\n  host;\n  port;\n  // Driver only works with unix socket path to connect\n  // SDAM operates only on tcp addresses\n  socketPath;\n  isIPv6;\n\n  constructor(hostString: string) {\n    const escapedHost = hostString.split(' ').join('%20'); // escape spaces, for socket path hosts\n    const { hostname, port } = new URL(`mongodb://${escapedHost}`);\n\n    if (hostname.endsWith('.sock')) {\n      // heuristically determine if we're working with a domain socket\n      this.socketPath = decodeURIComponent(hostname);\n    } else if (typeof hostname === 'string') {\n      this.isIPv6 = false;\n\n      let normalized = decodeURIComponent(hostname).toLowerCase();\n      if (normalized.startsWith('[') && normalized.endsWith(']')) {\n        this.isIPv6 = true;\n        normalized = normalized.substring(1, hostname.length - 1);\n      }\n\n      this.host = normalized.toLowerCase();\n\n      if (typeof port === 'number') {\n        this.port = port;\n      } else if (typeof port === 'string' && port !== '') {\n        this.port = Number.parseInt(port, 10);\n      } else {\n        this.port = 27017;\n      }\n\n      if (this.port === 0) {\n        throw new MongoParseError('Invalid port (zero) with hostname');\n      }\n    } else {\n      throw new MongoInvalidArgumentError('Either socketPath or host must be defined.');\n    }\n    Object.freeze(this);\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')](): string {\n    return this.inspect();\n  }\n\n  inspect(): string {\n    return `new HostAddress('${this.toString(true)}')`;\n  }\n\n  /**\n   * @param ipv6Brackets - optionally request ipv6 bracket notation required for connection strings\n   */\n  toString(ipv6Brackets = false): string {\n    if (typeof this.host === 'string') {\n      if (this.isIPv6 && ipv6Brackets) {\n        return `[${this.host}]:${this.port}`;\n      }\n      return `${this.host}:${this.port}`;\n    }\n    return `${this.socketPath}`;\n  }\n\n  static fromString(this: void, s: string): HostAddress {\n    return new HostAddress(s);\n  }\n\n  static fromHostPort(host: string, port: number): HostAddress {\n    if (host.includes(':')) {\n      host = `[${host}]`; // IPv6 address\n    }\n    return HostAddress.fromString(`${host}:${port}`);\n  }\n\n  static fromSrvRecord({ name, port }: SrvRecord): HostAddress {\n    return HostAddress.fromHostPort(name, port);\n  }\n}\n\nexport const DEFAULT_PK_FACTORY = {\n  // We prefer not to rely on ObjectId having a createPk method\n  createPk(): ObjectId {\n    return new ObjectId();\n  }\n};\n\n/**\n * When the driver used emitWarning the code will be equal to this.\n * @public\n *\n * @example\n * ```js\n * process.on('warning', (warning) => {\n *  if (warning.code === MONGODB_WARNING_CODE) console.error('Ah an important warning! :)')\n * })\n * ```\n */\nexport const MONGODB_WARNING_CODE = 'MONGODB DRIVER' as const;\n\n/** @internal */\nexport function emitWarning(message: string): void {\n  return process.emitWarning(message, { code: MONGODB_WARNING_CODE } as any);\n}\n\nconst emittedWarnings = new Set();\n/**\n * Will emit a warning once for the duration of the application.\n * Uses the message to identify if it has already been emitted\n * so using string interpolation can cause multiple emits\n * @internal\n */\nexport function emitWarningOnce(message: string): void {\n  if (!emittedWarnings.has(message)) {\n    emittedWarnings.add(message);\n    return emitWarning(message);\n  }\n}\n\n/**\n * Takes a JS object and joins the values into a string separated by ', '\n */\nexport function enumToString(en: Record<string, unknown>): string {\n  return Object.values(en).join(', ');\n}\n\n/**\n * Determine if a server supports retryable writes.\n *\n * @internal\n */\nexport function supportsRetryableWrites(server?: Server): boolean {\n  if (!server) {\n    return false;\n  }\n\n  if (server.loadBalanced) {\n    // Loadbalanced topologies will always support retry writes\n    return true;\n  }\n\n  if (server.description.logicalSessionTimeoutMinutes != null) {\n    // that supports sessions\n    if (server.description.type !== ServerType.Standalone) {\n      // and that is not a standalone\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function parsePackageVersion({ version }: { version: string }): {\n  major: number;\n  minor: number;\n  patch: number;\n} {\n  const [major, minor, patch] = version.split('.').map((n: string) => Number.parseInt(n, 10));\n  return { major, minor, patch };\n}\n\n/**\n * Fisher–Yates Shuffle\n *\n * Reference: https://bost.ocks.org/mike/shuffle/\n * @param sequence - items to be shuffled\n * @param limit - Defaults to `0`. If nonzero shuffle will slice the randomized array e.g, `.slice(0, limit)` otherwise will return the entire randomized array.\n */\nexport function shuffle<T>(sequence: Iterable<T>, limit = 0): Array<T> {\n  const items = Array.from(sequence); // shallow copy in order to never shuffle the input\n\n  if (limit > items.length) {\n    throw new MongoRuntimeError('Limit must be less than the number of items');\n  }\n\n  let remainingItemsToShuffle = items.length;\n  const lowerBound = limit % items.length === 0 ? 1 : items.length - limit;\n  while (remainingItemsToShuffle > lowerBound) {\n    // Pick a remaining element\n    const randomIndex = Math.floor(Math.random() * remainingItemsToShuffle);\n    remainingItemsToShuffle -= 1;\n\n    // And swap it with the current element\n    const swapHold = items[remainingItemsToShuffle];\n    items[remainingItemsToShuffle] = items[randomIndex];\n    items[randomIndex] = swapHold;\n  }\n\n  return limit % items.length === 0 ? items : items.slice(lowerBound);\n}\n\n// TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nexport function commandSupportsReadConcern(command: Document, options?: Document): boolean {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n\n  if (\n    command.mapReduce &&\n    options &&\n    options.out &&\n    (options.out.inline === 1 || options.out === 'inline')\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n/** A utility function to get the instance of mongodb-client-encryption, if it exists. */\nexport function getMongoDBClientEncryption(): {\n  extension: (mdb: unknown) => {\n    AutoEncrypter: any;\n    ClientEncryption: any;\n  };\n} | null {\n  let mongodbClientEncryption = null;\n\n  // NOTE(NODE-4254): This is to get around the circular dependency between\n  // mongodb-client-encryption and the driver in the test scenarios.\n  if (\n    typeof process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE === 'string' &&\n    process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE.length > 0\n  ) {\n    try {\n      // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n      // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n      // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n      mongodbClientEncryption = require(process.env.MONGODB_CLIENT_ENCRYPTION_OVERRIDE);\n    } catch {\n      // ignore\n    }\n  } else {\n    try {\n      // NOTE(NODE-3199): Ensure you always wrap an optional require literally in the try block\n      // Cannot be moved to helper utility function, bundlers search and replace the actual require call\n      // in a way that makes this line throw at bundle time, not runtime, catching here will make bundling succeed\n      mongodbClientEncryption = require('mongodb-client-encryption');\n    } catch {\n      // ignore\n    }\n  }\n\n  return mongodbClientEncryption;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}