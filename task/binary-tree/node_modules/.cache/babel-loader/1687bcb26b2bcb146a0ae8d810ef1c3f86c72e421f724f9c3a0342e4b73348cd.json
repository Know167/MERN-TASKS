{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jatin\\\\Documents\\\\HTML PROJECTS\\\\mern-exercise\\\\task\\\\binary-tree\\\\src\\\\BinaryTree.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Traverse from \"./Traverse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BinaryTree() {\n  _s();\n  const [tree, setTree] = useState(null);\n  function insert(value) {\n    const newNode = {\n      left: null,\n      value: value,\n      right: null\n    };\n    if (!tree) {\n      setTree(newNode);\n      return;\n    }\n    let currentNode = tree;\n    while (true) {\n      if (value < currentNode.value) {\n        if (currentNode.left == null) {\n          currentNode.left = newNode;\n          break;\n        }\n        currentNode = currentNode.left;\n        continue;\n      } else {\n        if (value === currentNode.value) {\n          break;\n        } else {\n          if (currentNode.right == null) {\n            currentNode.right = newNode;\n            break;\n          }\n          currentNode = currentNode.right;\n          continue;\n        }\n      }\n    }\n    setTree(tree);\n  }\n  useEffect(() => {\n    function Node(value) {\n      this.value = value;\n      // this.left = null;\n      // this.right = null;\n    }\n\n    function insertNode(tree, value) {\n      var node = tree,\n        key;\n      while (node.value !== value) {\n        key = value < node.value ? \"left\" : \"right\";\n        if (!node[key]) {\n          node[key] = new Node(value);\n          break;\n        }\n        node = node[key];\n      }\n      return tree;\n    }\n    var array = [8, 10, 12, 5, 3, 6],\n      Tree = array.reduce((t, v) => t ? insertNode(t, v) : new Node(v), null);\n    console.log(tree);\n    // insert(5)\n    // insert(2)\n    // insert(3)\n    // // insert(4);\n    // insert(-5)\n    // insert(6)\n    // insert(-3);\n    // // insert(-6);\n\n    // // insert(-7)\n    // // insert(8);\n  });\n\n  function traverse(node) {\n    if (node.right && node.left) console.group(node.value);\n  }\n\n  // function onSubmitHandler(event) {\n  //   event.preventDefault();\n  //   insert(Number(inputVal));\n  //   setInputVal(\"\");\n  //   console.log(tree);\n  // }\n  // function onChangeHandler(event) {\n  //   setInputVal(event.target.value);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Traverse, {\n      node: tree\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(BinaryTree, \"C2wasZ4/w/uTJY5LyroNkQBd1w0=\");\n_c = BinaryTree;\nexport default BinaryTree;\nvar _c;\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"names":["useState","useEffect","Traverse","jsxDEV","_jsxDEV","BinaryTree","_s","tree","setTree","insert","value","newNode","left","right","currentNode","Node","insertNode","node","key","array","Tree","reduce","t","v","console","log","traverse","group","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/BinaryTree.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Traverse from \"./Traverse\";\r\n\r\nfunction BinaryTree() {\r\n  const [tree, setTree] = useState(null);\r\n\r\n  function insert(value) {\r\n    const newNode = {\r\n      left: null,\r\n      value: value,\r\n      right: null,\r\n    };\r\n\r\n    if (!tree) {\r\n      setTree(newNode);\r\n      return;\r\n    }\r\n\r\n    let currentNode = tree;\r\n\r\n    while (true) {\r\n      if (value < currentNode.value) {\r\n        if (currentNode.left == null) {\r\n          currentNode.left = newNode;\r\n          break;\r\n        }\r\n        currentNode = currentNode.left;\r\n\r\n        continue;\r\n      } else {\r\n        if (value === currentNode.value) {\r\n          break;\r\n        } else {\r\n          if (currentNode.right == null) {\r\n            currentNode.right = newNode;\r\n            break;\r\n          }\r\n          currentNode = currentNode.right;\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    setTree(tree);\r\n  }\r\n\r\n\r\n  \r\n \r\n  useEffect(() => {\r\n    function Node(value) {\r\n      this.value = value;\r\n      // this.left = null;\r\n      // this.right = null;\r\n    }\r\n\r\n    function insertNode(tree, value) {\r\n      var node = tree,\r\n        key;\r\n      while (node.value !== value) {\r\n        key = value < node.value ? \"left\" : \"right\";\r\n        if (!node[key]) {\r\n          node[key] = new Node(value);\r\n          break;\r\n        }\r\n        node = node[key];\r\n      }\r\n      return tree;\r\n    }\r\n\r\n    var array = [8, 10, 12, 5, 3, 6],\r\n      Tree = array.reduce((t, v) => (t ? insertNode(t, v) : new Node(v)), null);\r\n\r\n    console.log(tree);\r\n    // insert(5)\r\n    // insert(2)\r\n    // insert(3)\r\n    // // insert(4);\r\n    // insert(-5)\r\n    // insert(6)\r\n    // insert(-3);\r\n    // // insert(-6);\r\n   \r\n    // // insert(-7)\r\n    // // insert(8);\r\n  });\r\n\r\n  function traverse(node) {\r\n    if(node.right&&node.left)\r\n    console.group(node.value, )\r\n  }\r\n  \r\n  // function onSubmitHandler(event) {\r\n  //   event.preventDefault();\r\n  //   insert(Number(inputVal));\r\n  //   setInputVal(\"\");\r\n  //   console.log(tree);\r\n  // }\r\n  // function onChangeHandler(event) {\r\n  //   setInputVal(event.target.value);\r\n  // }\r\n\r\n  return (\r\n    <div>\r\n      <Traverse node={tree}/>\r\n      {/* <hr />\r\n      <form onSubmit={onSubmitHandler} style={{ marginTop: \"20px\" }}>\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"enter the value here\"\r\n          onChange={onChangeHandler}\r\n          value={inputVal}\r\n        />\r\n        <button type=\"submit\">Insert</button>\r\n      </form> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BinaryTree;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtC,SAASS,MAAMA,CAACC,KAAK,EAAE;IACrB,MAAMC,OAAO,GAAG;MACdC,IAAI,EAAE,IAAI;MACVF,KAAK,EAAEA,KAAK;MACZG,KAAK,EAAE;IACT,CAAC;IAED,IAAI,CAACN,IAAI,EAAE;MACTC,OAAO,CAACG,OAAO,CAAC;MAChB;IACF;IAEA,IAAIG,WAAW,GAAGP,IAAI;IAEtB,OAAO,IAAI,EAAE;MACX,IAAIG,KAAK,GAAGI,WAAW,CAACJ,KAAK,EAAE;QAC7B,IAAII,WAAW,CAACF,IAAI,IAAI,IAAI,EAAE;UAC5BE,WAAW,CAACF,IAAI,GAAGD,OAAO;UAC1B;QACF;QACAG,WAAW,GAAGA,WAAW,CAACF,IAAI;QAE9B;MACF,CAAC,MAAM;QACL,IAAIF,KAAK,KAAKI,WAAW,CAACJ,KAAK,EAAE;UAC/B;QACF,CAAC,MAAM;UACL,IAAII,WAAW,CAACD,KAAK,IAAI,IAAI,EAAE;YAC7BC,WAAW,CAACD,KAAK,GAAGF,OAAO;YAC3B;UACF;UACAG,WAAW,GAAGA,WAAW,CAACD,KAAK;UAC/B;QACF;MACF;IACF;IAEAL,OAAO,CAACD,IAAI,CAAC;EACf;EAKAN,SAAS,CAAC,MAAM;IACd,SAASc,IAAIA,CAACL,KAAK,EAAE;MACnB,IAAI,CAACA,KAAK,GAAGA,KAAK;MAClB;MACA;IACF;;IAEA,SAASM,UAAUA,CAACT,IAAI,EAAEG,KAAK,EAAE;MAC/B,IAAIO,IAAI,GAAGV,IAAI;QACbW,GAAG;MACL,OAAOD,IAAI,CAACP,KAAK,KAAKA,KAAK,EAAE;QAC3BQ,GAAG,GAAGR,KAAK,GAAGO,IAAI,CAACP,KAAK,GAAG,MAAM,GAAG,OAAO;QAC3C,IAAI,CAACO,IAAI,CAACC,GAAG,CAAC,EAAE;UACdD,IAAI,CAACC,GAAG,CAAC,GAAG,IAAIH,IAAI,CAACL,KAAK,CAAC;UAC3B;QACF;QACAO,IAAI,GAAGA,IAAI,CAACC,GAAG,CAAC;MAClB;MACA,OAAOX,IAAI;IACb;IAEA,IAAIY,KAAK,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC9BC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,GAAGN,UAAU,CAACM,CAAC,EAAEC,CAAC,CAAC,GAAG,IAAIR,IAAI,CAACQ,CAAC,CAAE,EAAE,IAAI,CAAC;IAE3EC,OAAO,CAACC,GAAG,CAAClB,IAAI,CAAC;IACjB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;EACF,CAAC,CAAC;;EAEF,SAASmB,QAAQA,CAACT,IAAI,EAAE;IACtB,IAAGA,IAAI,CAACJ,KAAK,IAAEI,IAAI,CAACL,IAAI,EACxBY,OAAO,CAACG,KAAK,CAACV,IAAI,CAACP,KAAK,CAAG;EAC7B;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACEN,OAAA;IAAAwB,QAAA,eACExB,OAAA,CAACF,QAAQ;MAACe,IAAI,EAAEV;IAAK;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAWnB;AAEV;AAAC1B,EAAA,CAlHQD,UAAU;AAAA4B,EAAA,GAAV5B,UAAU;AAoHnB,eAAeA,UAAU;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}