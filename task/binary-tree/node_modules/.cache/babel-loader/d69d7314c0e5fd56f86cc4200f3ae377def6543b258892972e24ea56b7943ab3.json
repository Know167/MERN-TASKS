{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nfunction BinaryTree() {\n  _s();\n  const [tree, setTree] = useState({\n    value: 1,\n    left: null,\n    right: null\n  });\n  function insert(value) {\n    // Create a new node with the given value\n    const newNode = {\n      value: value,\n      left: null,\n      right: null\n    };\n\n    // If the tree is empty, make the new node the root\n    if (tree === null) {\n      setTree(newNode);\n      return;\n    }\n    let currentNode = tree;\n\n    // Traverse the tree to find the right place to insert the new node\n    while (true) {\n      if (value < currentNode.value) {\n        if (currentNode.left === null) {\n          currentNode.left = newNode;\n          break;\n        }\n        currentNode = currentNode.left;\n      } else {\n        if (currentNode.right === null) {\n          currentNode.right = newNode;\n          break;\n        }\n        currentNode = currentNode.right;\n      }\n    }\n\n    // Update the state with the new tree\n    setTree(tree);\n  }\n\n  // Insert some nodes into the tree\n  insert(2);\n  insert(3);\n  insert(1);\n  console.log(tree);\n  return null;\n}\n_s(BinaryTree, \"Ic2gzVvs6oJ8xVkfINDa8COkrKQ=\");\n_c = BinaryTree;\nexport default BinaryTree;\nvar _c;\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"names":["React","useState","BinaryTree","_s","tree","setTree","value","left","right","insert","newNode","currentNode","console","log","_c","$RefreshReg$"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/BinaryTree.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction BinaryTree() {\r\n  const [tree, setTree] = useState({\r\n    value: 1,\r\n    left: null,\r\n    right: null,\r\n  });\r\n\r\n  function insert(value) {\r\n    // Create a new node with the given value\r\n    const newNode = {\r\n      value: value,\r\n      left: null,\r\n      right: null,\r\n    };\r\n\r\n    // If the tree is empty, make the new node the root\r\n    if (tree === null) {\r\n      setTree(newNode);\r\n      return;\r\n    }\r\n\r\n    let currentNode = tree;\r\n\r\n    // Traverse the tree to find the right place to insert the new node\r\n    while (true) {\r\n      if (value < currentNode.value) {\r\n        if (currentNode.left === null) {\r\n          currentNode.left = newNode;\r\n          break;\r\n        }\r\n        currentNode = currentNode.left;\r\n      } else {\r\n        if (currentNode.right === null) {\r\n          currentNode.right = newNode;\r\n          break;\r\n        }\r\n        currentNode = currentNode.right;\r\n      }\r\n    }\r\n\r\n    // Update the state with the new tree\r\n    setTree(tree);\r\n  }\r\n\r\n  \r\n    // Insert some nodes into the tree\r\n    insert(2);\r\n    insert(3);\r\n    insert(1);\r\n\r\n\r\n    console.log(tree);\r\n\r\n  return null;\r\n}\r\n\r\nexport default BinaryTree;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC;IAC/BK,KAAK,EAAE,CAAC;IACRC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,SAASC,MAAMA,CAACH,KAAK,EAAE;IACrB;IACA,MAAMI,OAAO,GAAG;MACdJ,KAAK,EAAEA,KAAK;MACZC,IAAI,EAAE,IAAI;MACVC,KAAK,EAAE;IACT,CAAC;;IAED;IACA,IAAIJ,IAAI,KAAK,IAAI,EAAE;MACjBC,OAAO,CAACK,OAAO,CAAC;MAChB;IACF;IAEA,IAAIC,WAAW,GAAGP,IAAI;;IAEtB;IACA,OAAO,IAAI,EAAE;MACX,IAAIE,KAAK,GAAGK,WAAW,CAACL,KAAK,EAAE;QAC7B,IAAIK,WAAW,CAACJ,IAAI,KAAK,IAAI,EAAE;UAC7BI,WAAW,CAACJ,IAAI,GAAGG,OAAO;UAC1B;QACF;QACAC,WAAW,GAAGA,WAAW,CAACJ,IAAI;MAChC,CAAC,MAAM;QACL,IAAII,WAAW,CAACH,KAAK,KAAK,IAAI,EAAE;UAC9BG,WAAW,CAACH,KAAK,GAAGE,OAAO;UAC3B;QACF;QACAC,WAAW,GAAGA,WAAW,CAACH,KAAK;MACjC;IACF;;IAEA;IACAH,OAAO,CAACD,IAAI,CAAC;EACf;;EAGE;EACAK,MAAM,CAAC,CAAC,CAAC;EACTA,MAAM,CAAC,CAAC,CAAC;EACTA,MAAM,CAAC,CAAC,CAAC;EAGTG,OAAO,CAACC,GAAG,CAACT,IAAI,CAAC;EAEnB,OAAO,IAAI;AACb;AAACD,EAAA,CAtDQD,UAAU;AAAAY,EAAA,GAAVZ,UAAU;AAwDnB,eAAeA,UAAU;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}