{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jatin\\\\Documents\\\\HTML PROJECTS\\\\mern-exercise\\\\task\\\\binary-tree\\\\src\\\\BinaryTree.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport Node from \"./Node\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BinaryTree(props) {\n  _s();\n  const [tree, setTree] = useState({\n    value: props.value,\n    left: null\n  });\n  function insert(value) {\n    const newNode = {\n      left: null,\n      value: value,\n      right: null\n    };\n    let currentNode = tree;\n    while (true) {\n      if (value < currentNode.value) {\n        if (!currentNode.left) {\n          currentNode.left = newNode;\n          break;\n        }\n        currentNode = currentNode.left;\n      } else {\n        if (value === currentNode.value) {\n          break;\n        } else {\n          if (!currentNode.right) {\n            currentNode.right = newNode;\n            break;\n          }\n          currentNode = currentNode.right;\n        }\n      }\n    }\n    setTree(tree);\n  }\n  useEffect(() => {\n    insert(4);\n    insert(3);\n    insert(8);\n    insert(12);\n    insert(1);\n    insert(23);\n    insert(11);\n  }, []);\n  console.log(tree);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Node, {\n      value: tree.value,\n      left: tree.left,\n      right: tree.right\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(BinaryTree, \"tgslrsbzk0pwLP00VUOrfdwtdyM=\");\n_c = BinaryTree;\nexport default BinaryTree;\nvar _c;\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"names":["useEffect","useState","Node","jsxDEV","_jsxDEV","BinaryTree","props","_s","tree","setTree","value","left","insert","newNode","right","currentNode","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/BinaryTree.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport Node from \"./Node\";\r\n\r\nfunction BinaryTree(props) {\r\n    const [tree, setTree] = useState({\r\n        value: props.value,\r\n        left: null\r\n  });\r\n\r\n  function insert(value) {\r\n    const newNode = {\r\n      left: null,\r\n      value: value,\r\n      right: null,\r\n    };\r\n\r\n      let currentNode = tree;\r\n\r\n    while (true) {\r\n      if (value < currentNode.value) {\r\n        if (!currentNode.left) {\r\n          currentNode.left = newNode;\r\n          break;\r\n        }\r\n        currentNode = currentNode.left;\r\n      } else {\r\n        if (value === currentNode.value) {\r\n          break;\r\n        } else {\r\n          if (!currentNode.right) {\r\n            currentNode.right = newNode;\r\n            break;\r\n          }\r\n          currentNode = currentNode.right;\r\n        }\r\n      }\r\n    }\r\n\r\n    setTree(tree);\r\n  }\r\n\r\n  useEffect(() => {\r\n    insert(4);\r\n    insert(3);\r\n    insert(8);\r\n    insert(12);\r\n    insert(1);\r\n    insert(23);\r\n    insert(11);\r\n  }, []);\r\nconsole.log(tree)\r\n  return (\r\n    <div>\r\n      <Node value={tree.value} left={tree.left} right={tree.right} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BinaryTree;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC;IAC7BS,KAAK,EAAEJ,KAAK,CAACI,KAAK;IAClBC,IAAI,EAAE;EACZ,CAAC,CAAC;EAEF,SAASC,MAAMA,CAACF,KAAK,EAAE;IACrB,MAAMG,OAAO,GAAG;MACdF,IAAI,EAAE,IAAI;MACVD,KAAK,EAAEA,KAAK;MACZI,KAAK,EAAE;IACT,CAAC;IAEC,IAAIC,WAAW,GAAGP,IAAI;IAExB,OAAO,IAAI,EAAE;MACX,IAAIE,KAAK,GAAGK,WAAW,CAACL,KAAK,EAAE;QAC7B,IAAI,CAACK,WAAW,CAACJ,IAAI,EAAE;UACrBI,WAAW,CAACJ,IAAI,GAAGE,OAAO;UAC1B;QACF;QACAE,WAAW,GAAGA,WAAW,CAACJ,IAAI;MAChC,CAAC,MAAM;QACL,IAAID,KAAK,KAAKK,WAAW,CAACL,KAAK,EAAE;UAC/B;QACF,CAAC,MAAM;UACL,IAAI,CAACK,WAAW,CAACD,KAAK,EAAE;YACtBC,WAAW,CAACD,KAAK,GAAGD,OAAO;YAC3B;UACF;UACAE,WAAW,GAAGA,WAAW,CAACD,KAAK;QACjC;MACF;IACF;IAEAL,OAAO,CAACD,IAAI,CAAC;EACf;EAEAR,SAAS,CAAC,MAAM;IACdY,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,EAAE,CAAC;IACVA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,EAAE,CAAC;IACVA,MAAM,CAAC,EAAE,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EACRI,OAAO,CAACC,GAAG,CAACT,IAAI,CAAC;EACf,oBACEJ,OAAA;IAAAc,QAAA,eACEd,OAAA,CAACF,IAAI;MAACQ,KAAK,EAAEF,IAAI,CAACE,KAAM;MAACC,IAAI,EAAEH,IAAI,CAACG,IAAK;MAACG,KAAK,EAAEN,IAAI,CAACM;IAAM;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAC3D;AAEV;AAACf,EAAA,CArDQF,UAAU;AAAAkB,EAAA,GAAVlB,UAAU;AAuDnB,eAAeA,UAAU;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}