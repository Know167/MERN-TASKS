{"ast":null,"code":"import React from \"react\";\nclass BinaryNode extends React.Component {\n  constructor(key, value) {\n    super();\n    this.value = value;\n    this.key = key;\n    this.left = null;\n    this.right = null;\n  }\n}\nfunction insert(key, value) {\n  const newNode = new BinaryNode(key, value);\n  if (this.root === null) this.root = newNode;else this.insertNode(this.root, newNode);\n}\nfunction insertNode(node, newNode) {\n  if (newNode.key < node.key) {\n    if (node.left === null) node.left = newNode;else this.insertNode(node.left, newNode);\n  } else if (newNode.key === node.key) {\n    node.value = newNode.value;\n  } else {\n    if (node.right === null) node.right = newNode;else this.insertNode(node.right, newNode);\n  }\n}\nlet root = new BinaryNode(10, 10);\nroot.insert(3);\nconsole.log(root);\nexport default BinaryNode;","map":{"version":3,"names":["React","BinaryNode","Component","constructor","key","value","left","right","insert","newNode","root","insertNode","node","console","log"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/BinaryNode.js"],"sourcesContent":["import React from \"react\";\r\n\r\nclass BinaryNode extends React.Component {\r\n  constructor(key, value) {\r\n    super();\r\n    this.value = value;\r\n    this.key = key;\r\n    this.left = null;\r\n    this.right = null;\r\n  }\r\n}\r\n\r\nfunction insert(key, value) {\r\n  const newNode = new BinaryNode(key, value);\r\n  if (this.root === null) this.root = newNode;\r\n  else this.insertNode(this.root, newNode);\r\n}\r\n\r\nfunction insertNode(node, newNode) {\r\n  if (newNode.key < node.key) {\r\n    if (node.left === null) node.left = newNode;\r\n    else this.insertNode(node.left, newNode);\r\n  } else if (newNode.key === node.key) {\r\n    node.value = newNode.value;\r\n  } else {\r\n    if (node.right === null) node.right = newNode;\r\n    else this.insertNode(node.right, newNode);\r\n  }\r\n}\r\nlet root = new BinaryNode(10, 10);\r\nroot.insert(3);\r\nconsole.log(root)\r\nexport default BinaryNode;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,SAASD,KAAK,CAACE,SAAS,CAAC;EACvCC,WAAWA,CAACC,GAAG,EAAEC,KAAK,EAAE;IACtB,KAAK,EAAE;IACP,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACD,GAAG,GAAGA,GAAG;IACd,IAAI,CAACE,IAAI,GAAG,IAAI;IAChB,IAAI,CAACC,KAAK,GAAG,IAAI;EACnB;AACF;AAEA,SAASC,MAAMA,CAACJ,GAAG,EAAEC,KAAK,EAAE;EAC1B,MAAMI,OAAO,GAAG,IAAIR,UAAU,CAACG,GAAG,EAAEC,KAAK,CAAC;EAC1C,IAAI,IAAI,CAACK,IAAI,KAAK,IAAI,EAAE,IAAI,CAACA,IAAI,GAAGD,OAAO,CAAC,KACvC,IAAI,CAACE,UAAU,CAAC,IAAI,CAACD,IAAI,EAAED,OAAO,CAAC;AAC1C;AAEA,SAASE,UAAUA,CAACC,IAAI,EAAEH,OAAO,EAAE;EACjC,IAAIA,OAAO,CAACL,GAAG,GAAGQ,IAAI,CAACR,GAAG,EAAE;IAC1B,IAAIQ,IAAI,CAACN,IAAI,KAAK,IAAI,EAAEM,IAAI,CAACN,IAAI,GAAGG,OAAO,CAAC,KACvC,IAAI,CAACE,UAAU,CAACC,IAAI,CAACN,IAAI,EAAEG,OAAO,CAAC;EAC1C,CAAC,MAAM,IAAIA,OAAO,CAACL,GAAG,KAAKQ,IAAI,CAACR,GAAG,EAAE;IACnCQ,IAAI,CAACP,KAAK,GAAGI,OAAO,CAACJ,KAAK;EAC5B,CAAC,MAAM;IACL,IAAIO,IAAI,CAACL,KAAK,KAAK,IAAI,EAAEK,IAAI,CAACL,KAAK,GAAGE,OAAO,CAAC,KACzC,IAAI,CAACE,UAAU,CAACC,IAAI,CAACL,KAAK,EAAEE,OAAO,CAAC;EAC3C;AACF;AACA,IAAIC,IAAI,GAAG,IAAIT,UAAU,CAAC,EAAE,EAAE,EAAE,CAAC;AACjCS,IAAI,CAACF,MAAM,CAAC,CAAC,CAAC;AACdK,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;AACjB,eAAeT,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}