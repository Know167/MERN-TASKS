{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jatin\\\\Documents\\\\HTML PROJECTS\\\\mern-exercise\\\\task\\\\binary-tree\\\\src\\\\BinaryTree.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport Node from \"./Node\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BinaryTree(props) {\n  _s();\n  const [tree, setTree] = useState({\n    value: props.root,\n    left: null,\n    right: null\n  });\n  function insert(value) {\n    const newNode = {\n      left: null,\n      value: value,\n      right: null\n    };\n    let currentNode = tree;\n    while (true) {\n      if (value < currentNode.value) {\n        if (currentNode.left === null) {\n          currentNode.left = newNode;\n          break;\n        }\n        currentNode = currentNode.left;\n      } else {\n        if (value === currentNode.value) {\n          break;\n        } else {\n          if (currentNode.right === null) {\n            currentNode.right = newNode;\n            break;\n          }\n          currentNode = currentNode.right;\n        }\n      }\n    }\n    setTree(tree);\n  }\n  useEffect(() => {\n    insert(4);\n    insert(3);\n    insert(8);\n    insert(12);\n    insert(1);\n    insert(23);\n    insert(11);\n    while (true) {\n      document.createElement('<p>');\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 10\n  }, this);\n}\n_s(BinaryTree, \"xKp1vh1jEJxjRmV6kgcmCxWL9EY=\");\n_c = BinaryTree;\nexport default BinaryTree;\nvar _c;\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"names":["useEffect","useState","Node","jsxDEV","_jsxDEV","BinaryTree","props","_s","tree","setTree","value","root","left","right","insert","newNode","currentNode","document","createElement","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/BinaryTree.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport Node from \"./Node\";\r\n\r\nfunction BinaryTree(props) {\r\n    const [tree, setTree] = useState({\r\n        value: props.root,\r\n        left: null,\r\n        right: null,\r\n    });\r\n\r\n    function insert(value) {\r\n        const newNode = {\r\n            left: null,\r\n            value: value,\r\n            right: null,\r\n        };\r\n\r\n        let currentNode = tree;\r\n\r\n        while (true) {\r\n            if (value < currentNode.value) {\r\n                if (currentNode.left === null) {\r\n                    currentNode.left = newNode;\r\n                    break;\r\n                }\r\n                currentNode = currentNode.left;\r\n            } else {\r\n                if (value === currentNode.value) {\r\n                    break;\r\n                } else {\r\n                    if (currentNode.right === null) {\r\n                        currentNode.right = newNode;\r\n                        break;\r\n                    }\r\n                    currentNode = currentNode.right;\r\n                }\r\n            }\r\n        }\r\n\r\n        setTree(tree);\r\n    }\r\n\r\n    useEffect(() => {\r\n        insert(4);\r\n        insert(3);\r\n        insert(8);\r\n        insert(12);\r\n        insert(1);\r\n        insert(23);\r\n        insert(11);\r\n\r\n        while (true) {\r\n            document.createElement('<p>')\r\n        }\r\n    }, []);\r\n    \r\n\r\n\r\n    \r\n    \r\n    \r\n  return <div></div>\r\n}\r\n\r\nexport default BinaryTree;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACvB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC;IAC7BS,KAAK,EAAEJ,KAAK,CAACK,IAAI;IACjBC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE;EACX,CAAC,CAAC;EAEF,SAASC,MAAMA,CAACJ,KAAK,EAAE;IACnB,MAAMK,OAAO,GAAG;MACZH,IAAI,EAAE,IAAI;MACVF,KAAK,EAAEA,KAAK;MACZG,KAAK,EAAE;IACX,CAAC;IAED,IAAIG,WAAW,GAAGR,IAAI;IAEtB,OAAO,IAAI,EAAE;MACT,IAAIE,KAAK,GAAGM,WAAW,CAACN,KAAK,EAAE;QAC3B,IAAIM,WAAW,CAACJ,IAAI,KAAK,IAAI,EAAE;UAC3BI,WAAW,CAACJ,IAAI,GAAGG,OAAO;UAC1B;QACJ;QACAC,WAAW,GAAGA,WAAW,CAACJ,IAAI;MAClC,CAAC,MAAM;QACH,IAAIF,KAAK,KAAKM,WAAW,CAACN,KAAK,EAAE;UAC7B;QACJ,CAAC,MAAM;UACH,IAAIM,WAAW,CAACH,KAAK,KAAK,IAAI,EAAE;YAC5BG,WAAW,CAACH,KAAK,GAAGE,OAAO;YAC3B;UACJ;UACAC,WAAW,GAAGA,WAAW,CAACH,KAAK;QACnC;MACJ;IACJ;IAEAJ,OAAO,CAACD,IAAI,CAAC;EACjB;EAEAR,SAAS,CAAC,MAAM;IACZc,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,EAAE,CAAC;IACVA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,EAAE,CAAC;IACVA,MAAM,CAAC,EAAE,CAAC;IAEV,OAAO,IAAI,EAAE;MACTG,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IACjC;EACJ,CAAC,EAAE,EAAE,CAAC;EAOR,oBAAOd,OAAA;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAW;AACpB;AAACf,EAAA,CA3DQF,UAAU;AAAAkB,EAAA,GAAVlB,UAAU;AA6DnB,eAAeA,UAAU;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}