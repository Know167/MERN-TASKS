{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasSessionSupport = exports.CryptoConnection = exports.Connection = void 0;\nconst timers_1 = require(\"timers\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst sessions_1 = require(\"../sessions\");\nconst utils_1 = require(\"../utils\");\nconst command_monitoring_events_1 = require(\"./command_monitoring_events\");\nconst commands_1 = require(\"./commands\");\nconst message_stream_1 = require(\"./message_stream\");\nconst stream_description_1 = require(\"./stream_description\");\nconst shared_1 = require(\"./wire_protocol/shared\");\n/** @internal */\nconst kStream = Symbol('stream');\n/** @internal */\nconst kQueue = Symbol('queue');\n/** @internal */\nconst kMessageStream = Symbol('messageStream');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kLastUseTime = Symbol('lastUseTime');\n/** @internal */\nconst kClusterTime = Symbol('clusterTime');\n/** @internal */\nconst kDescription = Symbol('description');\n/** @internal */\nconst kHello = Symbol('hello');\n/** @internal */\nconst kAutoEncrypter = Symbol('autoEncrypter');\n/** @internal */\nconst kDelayedTimeoutId = Symbol('delayedTimeoutId');\n/** @internal */\nclass Connection extends mongo_types_1.TypedEventEmitter {\n  constructor(stream, options) {\n    var _a, _b;\n    super();\n    this.id = options.id;\n    this.address = streamIdentifier(stream, options);\n    this.socketTimeoutMS = (_a = options.socketTimeoutMS) !== null && _a !== void 0 ? _a : 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.closed = false;\n    this.destroyed = false;\n    this[kHello] = null;\n    this[kClusterTime] = null;\n    this[kDescription] = new stream_description_1.StreamDescription(this.address, options);\n    this[kGeneration] = options.generation;\n    this[kLastUseTime] = (0, utils_1.now)();\n    // setup parser stream and message handling\n    this[kQueue] = new Map();\n    this[kMessageStream] = new message_stream_1.MessageStream({\n      ...options,\n      maxBsonMessageSize: (_b = this.hello) === null || _b === void 0 ? void 0 : _b.maxBsonMessageSize\n    });\n    this[kStream] = stream;\n    this[kDelayedTimeoutId] = null;\n    this[kMessageStream].on('message', message => this.onMessage(message));\n    this[kMessageStream].on('error', error => this.onError(error));\n    this[kStream].on('close', () => this.onClose());\n    this[kStream].on('timeout', () => this.onTimeout());\n    this[kStream].on('error', () => {\n      /* ignore errors, listen to `close` instead */\n    });\n    // hook the message stream up to the passed in stream\n    this[kStream].pipe(this[kMessageStream]);\n    this[kMessageStream].pipe(this[kStream]);\n  }\n  get description() {\n    return this[kDescription];\n  }\n  get hello() {\n    return this[kHello];\n  }\n  // the `connect` method stores the result of the handshake hello on the connection\n  set hello(response) {\n    this[kDescription].receiveResponse(response);\n    this[kDescription] = Object.freeze(this[kDescription]);\n    // TODO: remove this, and only use the `StreamDescription` in the future\n    this[kHello] = response;\n  }\n  // Set the whether the message stream is for a monitoring connection.\n  set isMonitoringConnection(value) {\n    this[kMessageStream].isMonitoringConnection = value;\n  }\n  get isMonitoringConnection() {\n    return this[kMessageStream].isMonitoringConnection;\n  }\n  get serviceId() {\n    var _a;\n    return (_a = this.hello) === null || _a === void 0 ? void 0 : _a.serviceId;\n  }\n  get loadBalanced() {\n    return this.description.loadBalanced;\n  }\n  get generation() {\n    return this[kGeneration] || 0;\n  }\n  set generation(generation) {\n    this[kGeneration] = generation;\n  }\n  get idleTime() {\n    return (0, utils_1.calculateDurationInMs)(this[kLastUseTime]);\n  }\n  get clusterTime() {\n    return this[kClusterTime];\n  }\n  get stream() {\n    return this[kStream];\n  }\n  markAvailable() {\n    this[kLastUseTime] = (0, utils_1.now)();\n  }\n  onError(error) {\n    if (this.closed) {\n      return;\n    }\n    this[kStream].destroy(error);\n    this.closed = true;\n    for (const op of this[kQueue].values()) {\n      op.cb(error);\n    }\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n  onClose() {\n    if (this.closed) {\n      return;\n    }\n    this.closed = true;\n    const message = `connection ${this.id} to ${this.address} closed`;\n    for (const op of this[kQueue].values()) {\n      op.cb(new error_1.MongoNetworkError(message));\n    }\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n  onTimeout() {\n    if (this.closed) {\n      return;\n    }\n    this[kDelayedTimeoutId] = (0, timers_1.setTimeout)(() => {\n      this[kStream].destroy();\n      this.closed = true;\n      const message = `connection ${this.id} to ${this.address} timed out`;\n      const beforeHandshake = this.hello == null;\n      for (const op of this[kQueue].values()) {\n        op.cb(new error_1.MongoNetworkTimeoutError(message, {\n          beforeHandshake\n        }));\n      }\n      this[kQueue].clear();\n      this.emit(Connection.CLOSE);\n    }, 1).unref(); // No need for this timer to hold the event loop open\n  }\n\n  onMessage(message) {\n    const delayedTimeoutId = this[kDelayedTimeoutId];\n    if (delayedTimeoutId != null) {\n      (0, timers_1.clearTimeout)(delayedTimeoutId);\n      this[kDelayedTimeoutId] = null;\n    }\n    // always emit the message, in case we are streaming\n    this.emit('message', message);\n    const operationDescription = this[kQueue].get(message.responseTo);\n    if (!operationDescription) {\n      return;\n    }\n    const callback = operationDescription.cb;\n    // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n    // track response, however the server currently synthetically produces remote requests\n    // making the `responseTo` change on each response\n    this[kQueue].delete(message.responseTo);\n    if ('moreToCome' in message && message.moreToCome) {\n      // requeue the callback for next synthetic request\n      this[kQueue].set(message.requestId, operationDescription);\n    } else if (operationDescription.socketTimeoutOverride) {\n      this[kStream].setTimeout(this.socketTimeoutMS);\n    }\n    try {\n      // Pass in the entire description because it has BSON parsing options\n      message.parse(operationDescription);\n    } catch (err) {\n      // If this error is generated by our own code, it will already have the correct class applied\n      // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n      // in either case, it should not be wrapped\n      callback(err);\n      return;\n    }\n    if (message.documents[0]) {\n      const document = message.documents[0];\n      const session = operationDescription.session;\n      if (session) {\n        (0, sessions_1.updateSessionFromResponse)(session, document);\n      }\n      if (document.$clusterTime) {\n        this[kClusterTime] = document.$clusterTime;\n        this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n      }\n      if (operationDescription.command) {\n        if (document.writeConcernError) {\n          callback(new error_1.MongoWriteConcernError(document.writeConcernError, document));\n          return;\n        }\n        if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n          callback(new error_1.MongoServerError(document));\n          return;\n        }\n      } else {\n        // Pre 3.2 support\n        if (document.ok === 0 || document.$err || document.errmsg) {\n          callback(new error_1.MongoServerError(document));\n          return;\n        }\n      }\n    }\n    callback(undefined, message.documents[0]);\n  }\n  destroy(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {\n        force: false\n      };\n    }\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n    options = Object.assign({\n      force: false\n    }, options);\n    if (this[kStream] == null || this.destroyed) {\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n      return;\n    }\n    if (options.force) {\n      this[kStream].destroy();\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n      return;\n    }\n    this[kStream].end(() => {\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n    });\n  }\n  command(ns, cmd, options, callback) {\n    const readPreference = (0, shared_1.getReadPreference)(cmd, options);\n    const shouldUseOpMsg = supportsOpMsg(this);\n    const session = options === null || options === void 0 ? void 0 : options.session;\n    let clusterTime = this.clusterTime;\n    let finalCmd = Object.assign({}, cmd);\n    if (this.serverApi) {\n      const {\n        version,\n        strict,\n        deprecationErrors\n      } = this.serverApi;\n      finalCmd.apiVersion = version;\n      if (strict != null) finalCmd.apiStrict = strict;\n      if (deprecationErrors != null) finalCmd.apiDeprecationErrors = deprecationErrors;\n    }\n    if (hasSessionSupport(this) && session) {\n      if (session.clusterTime && clusterTime && session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n        clusterTime = session.clusterTime;\n      }\n      const err = (0, sessions_1.applySession)(session, finalCmd, options);\n      if (err) {\n        return callback(err);\n      }\n    }\n    // if we have a known cluster time, gossip it\n    if (clusterTime) {\n      finalCmd.$clusterTime = clusterTime;\n    }\n    if ((0, shared_1.isSharded)(this) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n      finalCmd = {\n        $query: finalCmd,\n        $readPreference: readPreference.toJSON()\n      };\n    }\n    const commandOptions = Object.assign({\n      command: true,\n      numberToSkip: 0,\n      numberToReturn: -1,\n      checkKeys: false,\n      // This value is not overridable\n      secondaryOk: readPreference.secondaryOk()\n    }, options);\n    const cmdNs = `${ns.db}.$cmd`;\n    const message = shouldUseOpMsg ? new commands_1.Msg(cmdNs, finalCmd, commandOptions) : new commands_1.Query(cmdNs, finalCmd, commandOptions);\n    try {\n      write(this, message, commandOptions, callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n}\nexports.Connection = Connection;\n/** @event */\nConnection.COMMAND_STARTED = constants_1.COMMAND_STARTED;\n/** @event */\nConnection.COMMAND_SUCCEEDED = constants_1.COMMAND_SUCCEEDED;\n/** @event */\nConnection.COMMAND_FAILED = constants_1.COMMAND_FAILED;\n/** @event */\nConnection.CLUSTER_TIME_RECEIVED = constants_1.CLUSTER_TIME_RECEIVED;\n/** @event */\nConnection.CLOSE = constants_1.CLOSE;\n/** @event */\nConnection.MESSAGE = constants_1.MESSAGE;\n/** @event */\nConnection.PINNED = constants_1.PINNED;\n/** @event */\nConnection.UNPINNED = constants_1.UNPINNED;\n/** @internal */\nclass CryptoConnection extends Connection {\n  constructor(stream, options) {\n    super(stream, options);\n    this[kAutoEncrypter] = options.autoEncrypter;\n  }\n  /** @internal @override */\n  command(ns, cmd, options, callback) {\n    const autoEncrypter = this[kAutoEncrypter];\n    if (!autoEncrypter) {\n      return callback(new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption'));\n    }\n    const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return super.command(ns, cmd, options, callback);\n    }\n    if (serverWireVersion < 8) {\n      callback(new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2'));\n      return;\n    }\n    autoEncrypter.encrypt(ns.toString(), cmd, options, (err, encrypted) => {\n      if (err || encrypted == null) {\n        callback(err, null);\n        return;\n      }\n      super.command(ns, encrypted, options, (err, response) => {\n        if (err || response == null) {\n          callback(err, response);\n          return;\n        }\n        autoEncrypter.decrypt(response, options, callback);\n      });\n    });\n  }\n}\nexports.CryptoConnection = CryptoConnection;\n/** @internal */\nfunction hasSessionSupport(conn) {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null || !!description.loadBalanced;\n}\nexports.hasSessionSupport = hasSessionSupport;\nfunction supportsOpMsg(conn) {\n  const description = conn.description;\n  if (description == null) {\n    return false;\n  }\n  return (0, utils_1.maxWireVersion)(conn) >= 6 && !description.__nodejs_mock_server__;\n}\nfunction streamIdentifier(stream, options) {\n  if (options.proxyHost) {\n    // If proxy options are specified, the properties of `stream` itself\n    // will not accurately reflect what endpoint this is connected to.\n    return options.hostAddress.toString();\n  }\n  if (typeof stream.address === 'function') {\n    return `${stream.remoteAddress}:${stream.remotePort}`;\n  }\n  return (0, utils_1.uuidV4)().toString('hex');\n}\nfunction write(conn, command, options, callback) {\n  options = options !== null && options !== void 0 ? options : {};\n  const operationDescription = {\n    requestId: command.requestId,\n    cb: callback,\n    session: options.session,\n    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\n    documentsReturnedIn: options.documentsReturnedIn,\n    command: !!options.command,\n    // for BSON parsing\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n    enableUtf8Validation: typeof options.enableUtf8Validation === 'boolean' ? options.enableUtf8Validation : true,\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    started: 0\n  };\n  if (conn[kDescription] && conn[kDescription].compressor) {\n    operationDescription.agreedCompressor = conn[kDescription].compressor;\n    if (conn[kDescription].zlibCompressionLevel) {\n      operationDescription.zlibCompressionLevel = conn[kDescription].zlibCompressionLevel;\n    }\n  }\n  if (typeof options.socketTimeoutMS === 'number') {\n    operationDescription.socketTimeoutOverride = true;\n    conn[kStream].setTimeout(options.socketTimeoutMS);\n  }\n  // if command monitoring is enabled we need to modify the callback here\n  if (conn.monitorCommands) {\n    conn.emit(Connection.COMMAND_STARTED, new command_monitoring_events_1.CommandStartedEvent(conn, command));\n    operationDescription.started = (0, utils_1.now)();\n    operationDescription.cb = (err, reply) => {\n      if (err) {\n        conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, err, operationDescription.started));\n      } else {\n        if (reply && (reply.ok === 0 || reply.$err)) {\n          conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, reply, operationDescription.started));\n        } else {\n          conn.emit(Connection.COMMAND_SUCCEEDED, new command_monitoring_events_1.CommandSucceededEvent(conn, command, reply, operationDescription.started));\n        }\n      }\n      if (typeof callback === 'function') {\n        callback(err, reply);\n      }\n    };\n  }\n  if (!operationDescription.noResponse) {\n    conn[kQueue].set(operationDescription.requestId, operationDescription);\n  }\n  try {\n    conn[kMessageStream].writeCommand(command, operationDescription);\n  } catch (e) {\n    if (!operationDescription.noResponse) {\n      conn[kQueue].delete(operationDescription.requestId);\n      operationDescription.cb(e);\n      return;\n    }\n  }\n  if (operationDescription.noResponse) {\n    operationDescription.cb();\n  }\n}","map":{"version":3,"names":["timers_1","require","constants_1","error_1","mongo_types_1","sessions_1","utils_1","command_monitoring_events_1","commands_1","message_stream_1","stream_description_1","shared_1","kStream","Symbol","kQueue","kMessageStream","kGeneration","kLastUseTime","kClusterTime","kDescription","kHello","kAutoEncrypter","kDelayedTimeoutId","Connection","TypedEventEmitter","constructor","stream","options","id","address","streamIdentifier","socketTimeoutMS","_a","monitorCommands","serverApi","closed","destroyed","StreamDescription","generation","now","Map","MessageStream","maxBsonMessageSize","_b","hello","on","message","onMessage","error","onError","onClose","onTimeout","pipe","description","response","receiveResponse","Object","freeze","isMonitoringConnection","value","serviceId","loadBalanced","idleTime","calculateDurationInMs","clusterTime","markAvailable","destroy","op","values","cb","clear","emit","CLOSE","MongoNetworkError","setTimeout","beforeHandshake","MongoNetworkTimeoutError","unref","delayedTimeoutId","clearTimeout","operationDescription","get","responseTo","callback","delete","moreToCome","set","requestId","socketTimeoutOverride","parse","err","documents","document","session","updateSessionFromResponse","$clusterTime","CLUSTER_TIME_RECEIVED","command","writeConcernError","MongoWriteConcernError","ok","$err","errmsg","code","MongoServerError","undefined","force","removeAllListeners","PINNED","UNPINNED","assign","end","ns","cmd","readPreference","getReadPreference","shouldUseOpMsg","supportsOpMsg","finalCmd","version","strict","deprecationErrors","apiVersion","apiStrict","apiDeprecationErrors","hasSessionSupport","greaterThan","applySession","isSharded","mode","$query","$readPreference","toJSON","commandOptions","numberToSkip","numberToReturn","checkKeys","secondaryOk","cmdNs","db","Msg","Query","write","exports","COMMAND_STARTED","COMMAND_SUCCEEDED","COMMAND_FAILED","MESSAGE","CryptoConnection","autoEncrypter","MongoMissingDependencyError","serverWireVersion","maxWireVersion","MongoCompatibilityError","encrypt","toString","encrypted","decrypt","conn","logicalSessionTimeoutMinutes","__nodejs_mock_server__","proxyHost","hostAddress","remoteAddress","remotePort","uuidV4","noResponse","documentsReturnedIn","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","enableUtf8Validation","raw","started","compressor","agreedCompressor","zlibCompressionLevel","CommandStartedEvent","reply","CommandFailedEvent","CommandSucceededEvent","writeCommand","e"],"sources":["C:\\Users\\Jatin\\node_modules\\mongodb\\src\\cmap\\connection.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport type { BSONSerializeOptions, Document, ObjectId } from '../bson';\nimport {\n  CLOSE,\n  CLUSTER_TIME_RECEIVED,\n  COMMAND_FAILED,\n  COMMAND_STARTED,\n  COMMAND_SUCCEEDED,\n  MESSAGE,\n  PINNED,\n  UNPINNED\n} from '../constants';\nimport type { AutoEncrypter } from '../deps';\nimport {\n  MongoCompatibilityError,\n  MongoMissingDependencyError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoServerError,\n  MongoWriteConcernError\n} from '../error';\nimport type { ServerApi, SupportedNodeConnectionOptions } from '../mongo_client';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { ReadPreference, ReadPreferenceLike } from '../read_preference';\nimport { applySession, ClientSession, updateSessionFromResponse } from '../sessions';\nimport {\n  calculateDurationInMs,\n  Callback,\n  ClientMetadata,\n  HostAddress,\n  maxWireVersion,\n  MongoDBNamespace,\n  now,\n  uuidV4\n} from '../utils';\nimport type { WriteConcern } from '../write_concern';\nimport type { MongoCredentials } from './auth/mongo_credentials';\nimport {\n  CommandFailedEvent,\n  CommandStartedEvent,\n  CommandSucceededEvent\n} from './command_monitoring_events';\nimport { BinMsg, Msg, Query, Response, WriteProtocolMessageType } from './commands';\nimport type { Stream } from './connect';\nimport { MessageStream, OperationDescription } from './message_stream';\nimport { StreamDescription, StreamDescriptionOptions } from './stream_description';\nimport { getReadPreference, isSharded } from './wire_protocol/shared';\n\n/** @internal */\nconst kStream = Symbol('stream');\n/** @internal */\nconst kQueue = Symbol('queue');\n/** @internal */\nconst kMessageStream = Symbol('messageStream');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kLastUseTime = Symbol('lastUseTime');\n/** @internal */\nconst kClusterTime = Symbol('clusterTime');\n/** @internal */\nconst kDescription = Symbol('description');\n/** @internal */\nconst kHello = Symbol('hello');\n/** @internal */\nconst kAutoEncrypter = Symbol('autoEncrypter');\n/** @internal */\nconst kDelayedTimeoutId = Symbol('delayedTimeoutId');\n\n/** @internal */\nexport interface QueryOptions extends BSONSerializeOptions {\n  readPreference: ReadPreference;\n  documentsReturnedIn?: string;\n  batchSize?: number;\n  limit?: number;\n  skip?: number;\n  projection?: Document;\n  tailable?: boolean;\n  awaitData?: boolean;\n  noCursorTimeout?: boolean;\n  /** @deprecated use `noCursorTimeout` instead */\n  timeout?: boolean;\n  partial?: boolean;\n  oplogReplay?: boolean;\n}\n\n/** @internal */\nexport interface CommandOptions extends BSONSerializeOptions {\n  command?: boolean;\n  secondaryOk?: boolean;\n  /** Specify read preference if command supports it */\n  readPreference?: ReadPreferenceLike;\n  raw?: boolean;\n  monitoring?: boolean;\n  socketTimeoutMS?: number;\n  /** Session to use for the operation */\n  session?: ClientSession;\n  documentsReturnedIn?: string;\n  noResponse?: boolean;\n  omitReadPreference?: boolean;\n\n  // TODO(NODE-2802): Currently the CommandOptions take a property willRetryWrite which is a hint\n  // from executeOperation that the txnNum should be applied to this command.\n  // Applying a session to a command should happen as part of command construction,\n  // most likely in the CommandOperation#executeCommand method, where we have access to\n  // the details we need to determine if a txnNum should also be applied.\n  willRetryWrite?: boolean;\n\n  writeConcern?: WriteConcern;\n}\n\n/** @internal */\nexport interface GetMoreOptions extends CommandOptions {\n  batchSize?: number;\n  maxTimeMS?: number;\n  maxAwaitTimeMS?: number;\n  /**\n   * Comment to apply to the operation.\n   *\n   * In server versions pre-4.4, 'comment' must be string.  A server\n   * error will be thrown if any other type is provided.\n   *\n   * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n   */\n  comment?: unknown;\n}\n\n/** @public */\nexport interface ProxyOptions {\n  proxyHost?: string;\n  proxyPort?: number;\n  proxyUsername?: string;\n  proxyPassword?: string;\n}\n\n/** @public */\nexport interface ConnectionOptions\n  extends SupportedNodeConnectionOptions,\n    StreamDescriptionOptions,\n    ProxyOptions {\n  // Internal creation info\n  id: number | '<monitor>';\n  generation: number;\n  hostAddress: HostAddress;\n  // Settings\n  autoEncrypter?: AutoEncrypter;\n  serverApi?: ServerApi;\n  monitorCommands: boolean;\n  /** @internal */\n  connectionType?: typeof Connection;\n  credentials?: MongoCredentials;\n  connectTimeoutMS?: number;\n  tls: boolean;\n  keepAlive?: boolean;\n  keepAliveInitialDelay?: number;\n  noDelay?: boolean;\n  socketTimeoutMS?: number;\n  cancellationToken?: CancellationToken;\n\n  metadata: ClientMetadata;\n}\n\n/** @public */\nexport interface DestroyOptions {\n  /** Force the destruction. */\n  force?: boolean;\n}\n\n/** @public */\nexport type ConnectionEvents = {\n  commandStarted(event: CommandStartedEvent): void;\n  commandSucceeded(event: CommandSucceededEvent): void;\n  commandFailed(event: CommandFailedEvent): void;\n  clusterTimeReceived(clusterTime: Document): void;\n  close(): void;\n  message(message: any): void;\n  pinned(pinType: string): void;\n  unpinned(pinType: string): void;\n};\n\n/** @internal */\nexport class Connection extends TypedEventEmitter<ConnectionEvents> {\n  id: number | '<monitor>';\n  address: string;\n  socketTimeoutMS: number;\n  monitorCommands: boolean;\n  closed: boolean;\n  destroyed: boolean;\n  lastHelloMS?: number;\n  serverApi?: ServerApi;\n  helloOk?: boolean;\n\n  /**@internal */\n  [kDelayedTimeoutId]: NodeJS.Timeout | null;\n  /** @internal */\n  [kDescription]: StreamDescription;\n  /** @internal */\n  [kGeneration]: number;\n  /** @internal */\n  [kLastUseTime]: number;\n  /** @internal */\n  [kQueue]: Map<number, OperationDescription>;\n  /** @internal */\n  [kMessageStream]: MessageStream;\n  /** @internal */\n  [kStream]: Stream;\n  /** @internal */\n  [kHello]: Document | null;\n  /** @internal */\n  [kClusterTime]: Document | null;\n\n  /** @event */\n  static readonly COMMAND_STARTED = COMMAND_STARTED;\n  /** @event */\n  static readonly COMMAND_SUCCEEDED = COMMAND_SUCCEEDED;\n  /** @event */\n  static readonly COMMAND_FAILED = COMMAND_FAILED;\n  /** @event */\n  static readonly CLUSTER_TIME_RECEIVED = CLUSTER_TIME_RECEIVED;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /** @event */\n  static readonly MESSAGE = MESSAGE;\n  /** @event */\n  static readonly PINNED = PINNED;\n  /** @event */\n  static readonly UNPINNED = UNPINNED;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super();\n    this.id = options.id;\n    this.address = streamIdentifier(stream, options);\n    this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.closed = false;\n    this.destroyed = false;\n    this[kHello] = null;\n    this[kClusterTime] = null;\n\n    this[kDescription] = new StreamDescription(this.address, options);\n    this[kGeneration] = options.generation;\n    this[kLastUseTime] = now();\n\n    // setup parser stream and message handling\n    this[kQueue] = new Map();\n    this[kMessageStream] = new MessageStream({\n      ...options,\n      maxBsonMessageSize: this.hello?.maxBsonMessageSize\n    });\n    this[kStream] = stream;\n\n    this[kDelayedTimeoutId] = null;\n\n    this[kMessageStream].on('message', message => this.onMessage(message));\n    this[kMessageStream].on('error', error => this.onError(error));\n    this[kStream].on('close', () => this.onClose());\n    this[kStream].on('timeout', () => this.onTimeout());\n    this[kStream].on('error', () => {\n      /* ignore errors, listen to `close` instead */\n    });\n\n    // hook the message stream up to the passed in stream\n    this[kStream].pipe(this[kMessageStream]);\n    this[kMessageStream].pipe(this[kStream]);\n  }\n\n  get description(): StreamDescription {\n    return this[kDescription];\n  }\n\n  get hello(): Document | null {\n    return this[kHello];\n  }\n\n  // the `connect` method stores the result of the handshake hello on the connection\n  set hello(response: Document | null) {\n    this[kDescription].receiveResponse(response);\n    this[kDescription] = Object.freeze(this[kDescription]);\n\n    // TODO: remove this, and only use the `StreamDescription` in the future\n    this[kHello] = response;\n  }\n\n  // Set the whether the message stream is for a monitoring connection.\n  set isMonitoringConnection(value: boolean) {\n    this[kMessageStream].isMonitoringConnection = value;\n  }\n\n  get isMonitoringConnection(): boolean {\n    return this[kMessageStream].isMonitoringConnection;\n  }\n\n  get serviceId(): ObjectId | undefined {\n    return this.hello?.serviceId;\n  }\n\n  get loadBalanced(): boolean {\n    return this.description.loadBalanced;\n  }\n\n  get generation(): number {\n    return this[kGeneration] || 0;\n  }\n\n  set generation(generation: number) {\n    this[kGeneration] = generation;\n  }\n\n  get idleTime(): number {\n    return calculateDurationInMs(this[kLastUseTime]);\n  }\n\n  get clusterTime(): Document | null {\n    return this[kClusterTime];\n  }\n\n  get stream(): Stream {\n    return this[kStream];\n  }\n\n  markAvailable(): void {\n    this[kLastUseTime] = now();\n  }\n\n  onError(error: Error) {\n    if (this.closed) {\n      return;\n    }\n\n    this[kStream].destroy(error);\n\n    this.closed = true;\n\n    for (const op of this[kQueue].values()) {\n      op.cb(error);\n    }\n\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n\n  onClose() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const message = `connection ${this.id} to ${this.address} closed`;\n    for (const op of this[kQueue].values()) {\n      op.cb(new MongoNetworkError(message));\n    }\n\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n\n  onTimeout() {\n    if (this.closed) {\n      return;\n    }\n\n    this[kDelayedTimeoutId] = setTimeout(() => {\n      this[kStream].destroy();\n\n      this.closed = true;\n\n      const message = `connection ${this.id} to ${this.address} timed out`;\n      const beforeHandshake = this.hello == null;\n      for (const op of this[kQueue].values()) {\n        op.cb(new MongoNetworkTimeoutError(message, { beforeHandshake }));\n      }\n\n      this[kQueue].clear();\n      this.emit(Connection.CLOSE);\n    }, 1).unref(); // No need for this timer to hold the event loop open\n  }\n\n  onMessage(message: BinMsg | Response) {\n    const delayedTimeoutId = this[kDelayedTimeoutId];\n    if (delayedTimeoutId != null) {\n      clearTimeout(delayedTimeoutId);\n      this[kDelayedTimeoutId] = null;\n    }\n\n    // always emit the message, in case we are streaming\n    this.emit('message', message);\n    const operationDescription = this[kQueue].get(message.responseTo);\n    if (!operationDescription) {\n      return;\n    }\n\n    const callback = operationDescription.cb;\n\n    // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n    // track response, however the server currently synthetically produces remote requests\n    // making the `responseTo` change on each response\n    this[kQueue].delete(message.responseTo);\n    if ('moreToCome' in message && message.moreToCome) {\n      // requeue the callback for next synthetic request\n      this[kQueue].set(message.requestId, operationDescription);\n    } else if (operationDescription.socketTimeoutOverride) {\n      this[kStream].setTimeout(this.socketTimeoutMS);\n    }\n\n    try {\n      // Pass in the entire description because it has BSON parsing options\n      message.parse(operationDescription);\n    } catch (err) {\n      // If this error is generated by our own code, it will already have the correct class applied\n      // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n      // in either case, it should not be wrapped\n      callback(err);\n      return;\n    }\n\n    if (message.documents[0]) {\n      const document: Document = message.documents[0];\n      const session = operationDescription.session;\n      if (session) {\n        updateSessionFromResponse(session, document);\n      }\n\n      if (document.$clusterTime) {\n        this[kClusterTime] = document.$clusterTime;\n        this.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n      }\n\n      if (operationDescription.command) {\n        if (document.writeConcernError) {\n          callback(new MongoWriteConcernError(document.writeConcernError, document));\n          return;\n        }\n\n        if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n          callback(new MongoServerError(document));\n          return;\n        }\n      } else {\n        // Pre 3.2 support\n        if (document.ok === 0 || document.$err || document.errmsg) {\n          callback(new MongoServerError(document));\n          return;\n        }\n      }\n    }\n\n    callback(undefined, message.documents[0]);\n  }\n\n  destroy(options?: DestroyOptions, callback?: Callback): void {\n    if (typeof options === 'function') {\n      callback = options;\n      options = { force: false };\n    }\n\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n\n    options = Object.assign({ force: false }, options);\n    if (this[kStream] == null || this.destroyed) {\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    if (options.force) {\n      this[kStream].destroy();\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    this[kStream].end(() => {\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n    });\n  }\n\n  command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions | undefined,\n    callback: Callback\n  ): void {\n    const readPreference = getReadPreference(cmd, options);\n    const shouldUseOpMsg = supportsOpMsg(this);\n    const session = options?.session;\n\n    let clusterTime = this.clusterTime;\n    let finalCmd = Object.assign({}, cmd);\n\n    if (this.serverApi) {\n      const { version, strict, deprecationErrors } = this.serverApi;\n      finalCmd.apiVersion = version;\n      if (strict != null) finalCmd.apiStrict = strict;\n      if (deprecationErrors != null) finalCmd.apiDeprecationErrors = deprecationErrors;\n    }\n\n    if (hasSessionSupport(this) && session) {\n      if (\n        session.clusterTime &&\n        clusterTime &&\n        session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)\n      ) {\n        clusterTime = session.clusterTime;\n      }\n\n      const err = applySession(session, finalCmd, options);\n      if (err) {\n        return callback(err);\n      }\n    }\n\n    // if we have a known cluster time, gossip it\n    if (clusterTime) {\n      finalCmd.$clusterTime = clusterTime;\n    }\n\n    if (isSharded(this) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n      finalCmd = {\n        $query: finalCmd,\n        $readPreference: readPreference.toJSON()\n      };\n    }\n\n    const commandOptions: Document = Object.assign(\n      {\n        command: true,\n        numberToSkip: 0,\n        numberToReturn: -1,\n        checkKeys: false,\n        // This value is not overridable\n        secondaryOk: readPreference.secondaryOk()\n      },\n      options\n    );\n\n    const cmdNs = `${ns.db}.$cmd`;\n    const message = shouldUseOpMsg\n      ? new Msg(cmdNs, finalCmd, commandOptions)\n      : new Query(cmdNs, finalCmd, commandOptions);\n\n    try {\n      write(this, message, commandOptions, callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n}\n\n/** @internal */\nexport class CryptoConnection extends Connection {\n  /** @internal */\n  [kAutoEncrypter]?: AutoEncrypter;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super(stream, options);\n    this[kAutoEncrypter] = options.autoEncrypter;\n  }\n\n  /** @internal @override */\n  override command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions,\n    callback: Callback\n  ): void {\n    const autoEncrypter = this[kAutoEncrypter];\n    if (!autoEncrypter) {\n      return callback(new MongoMissingDependencyError('No AutoEncrypter available for encryption'));\n    }\n\n    const serverWireVersion = maxWireVersion(this);\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return super.command(ns, cmd, options, callback);\n    }\n\n    if (serverWireVersion < 8) {\n      callback(\n        new MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2')\n      );\n      return;\n    }\n\n    autoEncrypter.encrypt(ns.toString(), cmd, options, (err, encrypted) => {\n      if (err || encrypted == null) {\n        callback(err, null);\n        return;\n      }\n      super.command(ns, encrypted, options, (err, response) => {\n        if (err || response == null) {\n          callback(err, response);\n          return;\n        }\n\n        autoEncrypter.decrypt(response, options, callback);\n      });\n    });\n  }\n}\n\n/** @internal */\nexport function hasSessionSupport(conn: Connection): boolean {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null || !!description.loadBalanced;\n}\n\nfunction supportsOpMsg(conn: Connection) {\n  const description = conn.description;\n  if (description == null) {\n    return false;\n  }\n\n  return maxWireVersion(conn) >= 6 && !description.__nodejs_mock_server__;\n}\n\nfunction streamIdentifier(stream: Stream, options: ConnectionOptions): string {\n  if (options.proxyHost) {\n    // If proxy options are specified, the properties of `stream` itself\n    // will not accurately reflect what endpoint this is connected to.\n    return options.hostAddress.toString();\n  }\n\n  if (typeof stream.address === 'function') {\n    return `${stream.remoteAddress}:${stream.remotePort}`;\n  }\n\n  return uuidV4().toString('hex');\n}\n\nfunction write(\n  conn: Connection,\n  command: WriteProtocolMessageType,\n  options: CommandOptions,\n  callback: Callback\n) {\n  options = options ?? {};\n  const operationDescription: OperationDescription = {\n    requestId: command.requestId,\n    cb: callback,\n    session: options.session,\n    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\n    documentsReturnedIn: options.documentsReturnedIn,\n    command: !!options.command,\n\n    // for BSON parsing\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n    enableUtf8Validation:\n      typeof options.enableUtf8Validation === 'boolean' ? options.enableUtf8Validation : true,\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    started: 0\n  };\n\n  if (conn[kDescription] && conn[kDescription].compressor) {\n    operationDescription.agreedCompressor = conn[kDescription].compressor;\n\n    if (conn[kDescription].zlibCompressionLevel) {\n      operationDescription.zlibCompressionLevel = conn[kDescription].zlibCompressionLevel;\n    }\n  }\n\n  if (typeof options.socketTimeoutMS === 'number') {\n    operationDescription.socketTimeoutOverride = true;\n    conn[kStream].setTimeout(options.socketTimeoutMS);\n  }\n\n  // if command monitoring is enabled we need to modify the callback here\n  if (conn.monitorCommands) {\n    conn.emit(Connection.COMMAND_STARTED, new CommandStartedEvent(conn, command));\n\n    operationDescription.started = now();\n    operationDescription.cb = (err, reply) => {\n      if (err) {\n        conn.emit(\n          Connection.COMMAND_FAILED,\n          new CommandFailedEvent(conn, command, err, operationDescription.started)\n        );\n      } else {\n        if (reply && (reply.ok === 0 || reply.$err)) {\n          conn.emit(\n            Connection.COMMAND_FAILED,\n            new CommandFailedEvent(conn, command, reply, operationDescription.started)\n          );\n        } else {\n          conn.emit(\n            Connection.COMMAND_SUCCEEDED,\n            new CommandSucceededEvent(conn, command, reply, operationDescription.started)\n          );\n        }\n      }\n\n      if (typeof callback === 'function') {\n        callback(err, reply);\n      }\n    };\n  }\n\n  if (!operationDescription.noResponse) {\n    conn[kQueue].set(operationDescription.requestId, operationDescription);\n  }\n\n  try {\n    conn[kMessageStream].writeCommand(command, operationDescription);\n  } catch (e) {\n    if (!operationDescription.noResponse) {\n      conn[kQueue].delete(operationDescription.requestId);\n      operationDescription.cb(e);\n      return;\n    }\n  }\n\n  if (operationDescription.noResponse) {\n    operationDescription.cb();\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AAGA,MAAAC,WAAA,GAAAD,OAAA;AAWA,MAAAE,OAAA,GAAAF,OAAA;AASA,MAAAG,aAAA,GAAAH,OAAA;AAEA,MAAAI,UAAA,GAAAJ,OAAA;AACA,MAAAK,OAAA,GAAAL,OAAA;AAYA,MAAAM,2BAAA,GAAAN,OAAA;AAKA,MAAAO,UAAA,GAAAP,OAAA;AAEA,MAAAQ,gBAAA,GAAAR,OAAA;AACA,MAAAS,oBAAA,GAAAT,OAAA;AACA,MAAAU,QAAA,GAAAV,OAAA;AAEA;AACA,MAAMW,OAAO,GAAGC,MAAM,CAAC,QAAQ,CAAC;AAChC;AACA,MAAMC,MAAM,GAAGD,MAAM,CAAC,OAAO,CAAC;AAC9B;AACA,MAAME,cAAc,GAAGF,MAAM,CAAC,eAAe,CAAC;AAC9C;AACA,MAAMG,WAAW,GAAGH,MAAM,CAAC,YAAY,CAAC;AACxC;AACA,MAAMI,YAAY,GAAGJ,MAAM,CAAC,aAAa,CAAC;AAC1C;AACA,MAAMK,YAAY,GAAGL,MAAM,CAAC,aAAa,CAAC;AAC1C;AACA,MAAMM,YAAY,GAAGN,MAAM,CAAC,aAAa,CAAC;AAC1C;AACA,MAAMO,MAAM,GAAGP,MAAM,CAAC,OAAO,CAAC;AAC9B;AACA,MAAMQ,cAAc,GAAGR,MAAM,CAAC,eAAe,CAAC;AAC9C;AACA,MAAMS,iBAAiB,GAAGT,MAAM,CAAC,kBAAkB,CAAC;AAiHpD;AACA,MAAaU,UAAW,SAAQnB,aAAA,CAAAoB,iBAAmC;EA+CjEC,YAAYC,MAAc,EAAEC,OAA0B;;IACpD,KAAK,EAAE;IACP,IAAI,CAACC,EAAE,GAAGD,OAAO,CAACC,EAAE;IACpB,IAAI,CAACC,OAAO,GAAGC,gBAAgB,CAACJ,MAAM,EAAEC,OAAO,CAAC;IAChD,IAAI,CAACI,eAAe,GAAG,CAAAC,EAAA,GAAAL,OAAO,CAACI,eAAe,cAAAC,EAAA,cAAAA,EAAA,GAAI,CAAC;IACnD,IAAI,CAACC,eAAe,GAAGN,OAAO,CAACM,eAAe;IAC9C,IAAI,CAACC,SAAS,GAAGP,OAAO,CAACO,SAAS;IAClC,IAAI,CAACC,MAAM,GAAG,KAAK;IACnB,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAAChB,MAAM,CAAC,GAAG,IAAI;IACnB,IAAI,CAACF,YAAY,CAAC,GAAG,IAAI;IAEzB,IAAI,CAACC,YAAY,CAAC,GAAG,IAAIT,oBAAA,CAAA2B,iBAAiB,CAAC,IAAI,CAACR,OAAO,EAAEF,OAAO,CAAC;IACjE,IAAI,CAACX,WAAW,CAAC,GAAGW,OAAO,CAACW,UAAU;IACtC,IAAI,CAACrB,YAAY,CAAC,GAAG,IAAAX,OAAA,CAAAiC,GAAG,GAAE;IAE1B;IACA,IAAI,CAACzB,MAAM,CAAC,GAAG,IAAI0B,GAAG,EAAE;IACxB,IAAI,CAACzB,cAAc,CAAC,GAAG,IAAIN,gBAAA,CAAAgC,aAAa,CAAC;MACvC,GAAGd,OAAO;MACVe,kBAAkB,EAAE,CAAAC,EAAA,OAAI,CAACC,KAAK,cAAAD,EAAA,uBAAAA,EAAA,CAAED;KACjC,CAAC;IACF,IAAI,CAAC9B,OAAO,CAAC,GAAGc,MAAM;IAEtB,IAAI,CAACJ,iBAAiB,CAAC,GAAG,IAAI;IAE9B,IAAI,CAACP,cAAc,CAAC,CAAC8B,EAAE,CAAC,SAAS,EAAEC,OAAO,IAAI,IAAI,CAACC,SAAS,CAACD,OAAO,CAAC,CAAC;IACtE,IAAI,CAAC/B,cAAc,CAAC,CAAC8B,EAAE,CAAC,OAAO,EAAEG,KAAK,IAAI,IAAI,CAACC,OAAO,CAACD,KAAK,CAAC,CAAC;IAC9D,IAAI,CAACpC,OAAO,CAAC,CAACiC,EAAE,CAAC,OAAO,EAAE,MAAM,IAAI,CAACK,OAAO,EAAE,CAAC;IAC/C,IAAI,CAACtC,OAAO,CAAC,CAACiC,EAAE,CAAC,SAAS,EAAE,MAAM,IAAI,CAACM,SAAS,EAAE,CAAC;IACnD,IAAI,CAACvC,OAAO,CAAC,CAACiC,EAAE,CAAC,OAAO,EAAE,MAAK;MAC7B;IAAA,CACD,CAAC;IAEF;IACA,IAAI,CAACjC,OAAO,CAAC,CAACwC,IAAI,CAAC,IAAI,CAACrC,cAAc,CAAC,CAAC;IACxC,IAAI,CAACA,cAAc,CAAC,CAACqC,IAAI,CAAC,IAAI,CAACxC,OAAO,CAAC,CAAC;EAC1C;EAEA,IAAIyC,WAAWA,CAAA;IACb,OAAO,IAAI,CAAClC,YAAY,CAAC;EAC3B;EAEA,IAAIyB,KAAKA,CAAA;IACP,OAAO,IAAI,CAACxB,MAAM,CAAC;EACrB;EAEA;EACA,IAAIwB,KAAKA,CAACU,QAAyB;IACjC,IAAI,CAACnC,YAAY,CAAC,CAACoC,eAAe,CAACD,QAAQ,CAAC;IAC5C,IAAI,CAACnC,YAAY,CAAC,GAAGqC,MAAM,CAACC,MAAM,CAAC,IAAI,CAACtC,YAAY,CAAC,CAAC;IAEtD;IACA,IAAI,CAACC,MAAM,CAAC,GAAGkC,QAAQ;EACzB;EAEA;EACA,IAAII,sBAAsBA,CAACC,KAAc;IACvC,IAAI,CAAC5C,cAAc,CAAC,CAAC2C,sBAAsB,GAAGC,KAAK;EACrD;EAEA,IAAID,sBAAsBA,CAAA;IACxB,OAAO,IAAI,CAAC3C,cAAc,CAAC,CAAC2C,sBAAsB;EACpD;EAEA,IAAIE,SAASA,CAAA;;IACX,OAAO,CAAA5B,EAAA,OAAI,CAACY,KAAK,cAAAZ,EAAA,uBAAAA,EAAA,CAAE4B,SAAS;EAC9B;EAEA,IAAIC,YAAYA,CAAA;IACd,OAAO,IAAI,CAACR,WAAW,CAACQ,YAAY;EACtC;EAEA,IAAIvB,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACtB,WAAW,CAAC,IAAI,CAAC;EAC/B;EAEA,IAAIsB,UAAUA,CAACA,UAAkB;IAC/B,IAAI,CAACtB,WAAW,CAAC,GAAGsB,UAAU;EAChC;EAEA,IAAIwB,QAAQA,CAAA;IACV,OAAO,IAAAxD,OAAA,CAAAyD,qBAAqB,EAAC,IAAI,CAAC9C,YAAY,CAAC,CAAC;EAClD;EAEA,IAAI+C,WAAWA,CAAA;IACb,OAAO,IAAI,CAAC9C,YAAY,CAAC;EAC3B;EAEA,IAAIQ,MAAMA,CAAA;IACR,OAAO,IAAI,CAACd,OAAO,CAAC;EACtB;EAEAqD,aAAaA,CAAA;IACX,IAAI,CAAChD,YAAY,CAAC,GAAG,IAAAX,OAAA,CAAAiC,GAAG,GAAE;EAC5B;EAEAU,OAAOA,CAACD,KAAY;IAClB,IAAI,IAAI,CAACb,MAAM,EAAE;MACf;;IAGF,IAAI,CAACvB,OAAO,CAAC,CAACsD,OAAO,CAAClB,KAAK,CAAC;IAE5B,IAAI,CAACb,MAAM,GAAG,IAAI;IAElB,KAAK,MAAMgC,EAAE,IAAI,IAAI,CAACrD,MAAM,CAAC,CAACsD,MAAM,EAAE,EAAE;MACtCD,EAAE,CAACE,EAAE,CAACrB,KAAK,CAAC;;IAGd,IAAI,CAAClC,MAAM,CAAC,CAACwD,KAAK,EAAE;IACpB,IAAI,CAACC,IAAI,CAAChD,UAAU,CAACiD,KAAK,CAAC;EAC7B;EAEAtB,OAAOA,CAAA;IACL,IAAI,IAAI,CAACf,MAAM,EAAE;MACf;;IAGF,IAAI,CAACA,MAAM,GAAG,IAAI;IAElB,MAAMW,OAAO,GAAG,cAAc,IAAI,CAAClB,EAAE,OAAO,IAAI,CAACC,OAAO,SAAS;IACjE,KAAK,MAAMsC,EAAE,IAAI,IAAI,CAACrD,MAAM,CAAC,CAACsD,MAAM,EAAE,EAAE;MACtCD,EAAE,CAACE,EAAE,CAAC,IAAIlE,OAAA,CAAAsE,iBAAiB,CAAC3B,OAAO,CAAC,CAAC;;IAGvC,IAAI,CAAChC,MAAM,CAAC,CAACwD,KAAK,EAAE;IACpB,IAAI,CAACC,IAAI,CAAChD,UAAU,CAACiD,KAAK,CAAC;EAC7B;EAEArB,SAASA,CAAA;IACP,IAAI,IAAI,CAAChB,MAAM,EAAE;MACf;;IAGF,IAAI,CAACb,iBAAiB,CAAC,GAAG,IAAAtB,QAAA,CAAA0E,UAAU,EAAC,MAAK;MACxC,IAAI,CAAC9D,OAAO,CAAC,CAACsD,OAAO,EAAE;MAEvB,IAAI,CAAC/B,MAAM,GAAG,IAAI;MAElB,MAAMW,OAAO,GAAG,cAAc,IAAI,CAAClB,EAAE,OAAO,IAAI,CAACC,OAAO,YAAY;MACpE,MAAM8C,eAAe,GAAG,IAAI,CAAC/B,KAAK,IAAI,IAAI;MAC1C,KAAK,MAAMuB,EAAE,IAAI,IAAI,CAACrD,MAAM,CAAC,CAACsD,MAAM,EAAE,EAAE;QACtCD,EAAE,CAACE,EAAE,CAAC,IAAIlE,OAAA,CAAAyE,wBAAwB,CAAC9B,OAAO,EAAE;UAAE6B;QAAe,CAAE,CAAC,CAAC;;MAGnE,IAAI,CAAC7D,MAAM,CAAC,CAACwD,KAAK,EAAE;MACpB,IAAI,CAACC,IAAI,CAAChD,UAAU,CAACiD,KAAK,CAAC;IAC7B,CAAC,EAAE,CAAC,CAAC,CAACK,KAAK,EAAE,CAAC,CAAC;EACjB;;EAEA9B,SAASA,CAACD,OAA0B;IAClC,MAAMgC,gBAAgB,GAAG,IAAI,CAACxD,iBAAiB,CAAC;IAChD,IAAIwD,gBAAgB,IAAI,IAAI,EAAE;MAC5B,IAAA9E,QAAA,CAAA+E,YAAY,EAACD,gBAAgB,CAAC;MAC9B,IAAI,CAACxD,iBAAiB,CAAC,GAAG,IAAI;;IAGhC;IACA,IAAI,CAACiD,IAAI,CAAC,SAAS,EAAEzB,OAAO,CAAC;IAC7B,MAAMkC,oBAAoB,GAAG,IAAI,CAAClE,MAAM,CAAC,CAACmE,GAAG,CAACnC,OAAO,CAACoC,UAAU,CAAC;IACjE,IAAI,CAACF,oBAAoB,EAAE;MACzB;;IAGF,MAAMG,QAAQ,GAAGH,oBAAoB,CAACX,EAAE;IAExC;IACA;IACA;IACA,IAAI,CAACvD,MAAM,CAAC,CAACsE,MAAM,CAACtC,OAAO,CAACoC,UAAU,CAAC;IACvC,IAAI,YAAY,IAAIpC,OAAO,IAAIA,OAAO,CAACuC,UAAU,EAAE;MACjD;MACA,IAAI,CAACvE,MAAM,CAAC,CAACwE,GAAG,CAACxC,OAAO,CAACyC,SAAS,EAAEP,oBAAoB,CAAC;KAC1D,MAAM,IAAIA,oBAAoB,CAACQ,qBAAqB,EAAE;MACrD,IAAI,CAAC5E,OAAO,CAAC,CAAC8D,UAAU,CAAC,IAAI,CAAC3C,eAAe,CAAC;;IAGhD,IAAI;MACF;MACAe,OAAO,CAAC2C,KAAK,CAACT,oBAAoB,CAAC;KACpC,CAAC,OAAOU,GAAG,EAAE;MACZ;MACA;MACA;MACAP,QAAQ,CAACO,GAAG,CAAC;MACb;;IAGF,IAAI5C,OAAO,CAAC6C,SAAS,CAAC,CAAC,CAAC,EAAE;MACxB,MAAMC,QAAQ,GAAa9C,OAAO,CAAC6C,SAAS,CAAC,CAAC,CAAC;MAC/C,MAAME,OAAO,GAAGb,oBAAoB,CAACa,OAAO;MAC5C,IAAIA,OAAO,EAAE;QACX,IAAAxF,UAAA,CAAAyF,yBAAyB,EAACD,OAAO,EAAED,QAAQ,CAAC;;MAG9C,IAAIA,QAAQ,CAACG,YAAY,EAAE;QACzB,IAAI,CAAC7E,YAAY,CAAC,GAAG0E,QAAQ,CAACG,YAAY;QAC1C,IAAI,CAACxB,IAAI,CAAChD,UAAU,CAACyE,qBAAqB,EAAEJ,QAAQ,CAACG,YAAY,CAAC;;MAGpE,IAAIf,oBAAoB,CAACiB,OAAO,EAAE;QAChC,IAAIL,QAAQ,CAACM,iBAAiB,EAAE;UAC9Bf,QAAQ,CAAC,IAAIhF,OAAA,CAAAgG,sBAAsB,CAACP,QAAQ,CAACM,iBAAiB,EAAEN,QAAQ,CAAC,CAAC;UAC1E;;QAGF,IAAIA,QAAQ,CAACQ,EAAE,KAAK,CAAC,IAAIR,QAAQ,CAACS,IAAI,IAAIT,QAAQ,CAACU,MAAM,IAAIV,QAAQ,CAACW,IAAI,EAAE;UAC1EpB,QAAQ,CAAC,IAAIhF,OAAA,CAAAqG,gBAAgB,CAACZ,QAAQ,CAAC,CAAC;UACxC;;OAEH,MAAM;QACL;QACA,IAAIA,QAAQ,CAACQ,EAAE,KAAK,CAAC,IAAIR,QAAQ,CAACS,IAAI,IAAIT,QAAQ,CAACU,MAAM,EAAE;UACzDnB,QAAQ,CAAC,IAAIhF,OAAA,CAAAqG,gBAAgB,CAACZ,QAAQ,CAAC,CAAC;UACxC;;;;IAKNT,QAAQ,CAACsB,SAAS,EAAE3D,OAAO,CAAC6C,SAAS,CAAC,CAAC,CAAC,CAAC;EAC3C;EAEAzB,OAAOA,CAACvC,OAAwB,EAAEwD,QAAmB;IACnD,IAAI,OAAOxD,OAAO,KAAK,UAAU,EAAE;MACjCwD,QAAQ,GAAGxD,OAAO;MAClBA,OAAO,GAAG;QAAE+E,KAAK,EAAE;MAAK,CAAE;;IAG5B,IAAI,CAACC,kBAAkB,CAACpF,UAAU,CAACqF,MAAM,CAAC;IAC1C,IAAI,CAACD,kBAAkB,CAACpF,UAAU,CAACsF,QAAQ,CAAC;IAE5ClF,OAAO,GAAG6B,MAAM,CAACsD,MAAM,CAAC;MAAEJ,KAAK,EAAE;IAAK,CAAE,EAAE/E,OAAO,CAAC;IAClD,IAAI,IAAI,CAACf,OAAO,CAAC,IAAI,IAAI,IAAI,IAAI,CAACwB,SAAS,EAAE;MAC3C,IAAI,CAACA,SAAS,GAAG,IAAI;MACrB,IAAI,OAAO+C,QAAQ,KAAK,UAAU,EAAE;QAClCA,QAAQ,EAAE;;MAGZ;;IAGF,IAAIxD,OAAO,CAAC+E,KAAK,EAAE;MACjB,IAAI,CAAC9F,OAAO,CAAC,CAACsD,OAAO,EAAE;MACvB,IAAI,CAAC9B,SAAS,GAAG,IAAI;MACrB,IAAI,OAAO+C,QAAQ,KAAK,UAAU,EAAE;QAClCA,QAAQ,EAAE;;MAGZ;;IAGF,IAAI,CAACvE,OAAO,CAAC,CAACmG,GAAG,CAAC,MAAK;MACrB,IAAI,CAAC3E,SAAS,GAAG,IAAI;MACrB,IAAI,OAAO+C,QAAQ,KAAK,UAAU,EAAE;QAClCA,QAAQ,EAAE;;IAEd,CAAC,CAAC;EACJ;EAEAc,OAAOA,CACLe,EAAoB,EACpBC,GAAa,EACbtF,OAAmC,EACnCwD,QAAkB;IAElB,MAAM+B,cAAc,GAAG,IAAAvG,QAAA,CAAAwG,iBAAiB,EAACF,GAAG,EAAEtF,OAAO,CAAC;IACtD,MAAMyF,cAAc,GAAGC,aAAa,CAAC,IAAI,CAAC;IAC1C,MAAMxB,OAAO,GAAGlE,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEkE,OAAO;IAEhC,IAAI7B,WAAW,GAAG,IAAI,CAACA,WAAW;IAClC,IAAIsD,QAAQ,GAAG9D,MAAM,CAACsD,MAAM,CAAC,EAAE,EAAEG,GAAG,CAAC;IAErC,IAAI,IAAI,CAAC/E,SAAS,EAAE;MAClB,MAAM;QAAEqF,OAAO;QAAEC,MAAM;QAAEC;MAAiB,CAAE,GAAG,IAAI,CAACvF,SAAS;MAC7DoF,QAAQ,CAACI,UAAU,GAAGH,OAAO;MAC7B,IAAIC,MAAM,IAAI,IAAI,EAAEF,QAAQ,CAACK,SAAS,GAAGH,MAAM;MAC/C,IAAIC,iBAAiB,IAAI,IAAI,EAAEH,QAAQ,CAACM,oBAAoB,GAAGH,iBAAiB;;IAGlF,IAAII,iBAAiB,CAAC,IAAI,CAAC,IAAIhC,OAAO,EAAE;MACtC,IACEA,OAAO,CAAC7B,WAAW,IACnBA,WAAW,IACX6B,OAAO,CAAC7B,WAAW,CAACA,WAAW,CAAC8D,WAAW,CAAC9D,WAAW,CAACA,WAAW,CAAC,EACpE;QACAA,WAAW,GAAG6B,OAAO,CAAC7B,WAAW;;MAGnC,MAAM0B,GAAG,GAAG,IAAArF,UAAA,CAAA0H,YAAY,EAAClC,OAAO,EAAEyB,QAAQ,EAAE3F,OAAO,CAAC;MACpD,IAAI+D,GAAG,EAAE;QACP,OAAOP,QAAQ,CAACO,GAAG,CAAC;;;IAIxB;IACA,IAAI1B,WAAW,EAAE;MACfsD,QAAQ,CAACvB,YAAY,GAAG/B,WAAW;;IAGrC,IAAI,IAAArD,QAAA,CAAAqH,SAAS,EAAC,IAAI,CAAC,IAAI,CAACZ,cAAc,IAAIF,cAAc,IAAIA,cAAc,CAACe,IAAI,KAAK,SAAS,EAAE;MAC7FX,QAAQ,GAAG;QACTY,MAAM,EAAEZ,QAAQ;QAChBa,eAAe,EAAEjB,cAAc,CAACkB,MAAM;OACvC;;IAGH,MAAMC,cAAc,GAAa7E,MAAM,CAACsD,MAAM,CAC5C;MACEb,OAAO,EAAE,IAAI;MACbqC,YAAY,EAAE,CAAC;MACfC,cAAc,EAAE,CAAC,CAAC;MAClBC,SAAS,EAAE,KAAK;MAChB;MACAC,WAAW,EAAEvB,cAAc,CAACuB,WAAW;KACxC,EACD9G,OAAO,CACR;IAED,MAAM+G,KAAK,GAAG,GAAG1B,EAAE,CAAC2B,EAAE,OAAO;IAC7B,MAAM7F,OAAO,GAAGsE,cAAc,GAC1B,IAAI5G,UAAA,CAAAoI,GAAG,CAACF,KAAK,EAAEpB,QAAQ,EAAEe,cAAc,CAAC,GACxC,IAAI7H,UAAA,CAAAqI,KAAK,CAACH,KAAK,EAAEpB,QAAQ,EAAEe,cAAc,CAAC;IAE9C,IAAI;MACFS,KAAK,CAAC,IAAI,EAAEhG,OAAO,EAAEuF,cAAc,EAAElD,QAAQ,CAAC;KAC/C,CAAC,OAAOO,GAAG,EAAE;MACZP,QAAQ,CAACO,GAAG,CAAC;;EAEjB;;AAxXFqD,OAAA,CAAAxH,UAAA,GAAAA,UAAA;AA8BE;AACgBA,UAAA,CAAAyH,eAAe,GAAG9I,WAAA,CAAA8I,eAAe;AACjD;AACgBzH,UAAA,CAAA0H,iBAAiB,GAAG/I,WAAA,CAAA+I,iBAAiB;AACrD;AACgB1H,UAAA,CAAA2H,cAAc,GAAGhJ,WAAA,CAAAgJ,cAAc;AAC/C;AACgB3H,UAAA,CAAAyE,qBAAqB,GAAG9F,WAAA,CAAA8F,qBAAqB;AAC7D;AACgBzE,UAAA,CAAAiD,KAAK,GAAGtE,WAAA,CAAAsE,KAAK;AAC7B;AACgBjD,UAAA,CAAA4H,OAAO,GAAGjJ,WAAA,CAAAiJ,OAAO;AACjC;AACgB5H,UAAA,CAAAqF,MAAM,GAAG1G,WAAA,CAAA0G,MAAM;AAC/B;AACgBrF,UAAA,CAAAsF,QAAQ,GAAG3G,WAAA,CAAA2G,QAAQ;AA8UrC;AACA,MAAauC,gBAAiB,SAAQ7H,UAAU;EAI9CE,YAAYC,MAAc,EAAEC,OAA0B;IACpD,KAAK,CAACD,MAAM,EAAEC,OAAO,CAAC;IACtB,IAAI,CAACN,cAAc,CAAC,GAAGM,OAAO,CAAC0H,aAAa;EAC9C;EAEA;EACSpD,OAAOA,CACde,EAAoB,EACpBC,GAAa,EACbtF,OAAuB,EACvBwD,QAAkB;IAElB,MAAMkE,aAAa,GAAG,IAAI,CAAChI,cAAc,CAAC;IAC1C,IAAI,CAACgI,aAAa,EAAE;MAClB,OAAOlE,QAAQ,CAAC,IAAIhF,OAAA,CAAAmJ,2BAA2B,CAAC,2CAA2C,CAAC,CAAC;;IAG/F,MAAMC,iBAAiB,GAAG,IAAAjJ,OAAA,CAAAkJ,cAAc,EAAC,IAAI,CAAC;IAC9C,IAAID,iBAAiB,KAAK,CAAC,EAAE;MAC3B;MACA,OAAO,KAAK,CAACtD,OAAO,CAACe,EAAE,EAAEC,GAAG,EAAEtF,OAAO,EAAEwD,QAAQ,CAAC;;IAGlD,IAAIoE,iBAAiB,GAAG,CAAC,EAAE;MACzBpE,QAAQ,CACN,IAAIhF,OAAA,CAAAsJ,uBAAuB,CAAC,2DAA2D,CAAC,CACzF;MACD;;IAGFJ,aAAa,CAACK,OAAO,CAAC1C,EAAE,CAAC2C,QAAQ,EAAE,EAAE1C,GAAG,EAAEtF,OAAO,EAAE,CAAC+D,GAAG,EAAEkE,SAAS,KAAI;MACpE,IAAIlE,GAAG,IAAIkE,SAAS,IAAI,IAAI,EAAE;QAC5BzE,QAAQ,CAACO,GAAG,EAAE,IAAI,CAAC;QACnB;;MAEF,KAAK,CAACO,OAAO,CAACe,EAAE,EAAE4C,SAAS,EAAEjI,OAAO,EAAE,CAAC+D,GAAG,EAAEpC,QAAQ,KAAI;QACtD,IAAIoC,GAAG,IAAIpC,QAAQ,IAAI,IAAI,EAAE;UAC3B6B,QAAQ,CAACO,GAAG,EAAEpC,QAAQ,CAAC;UACvB;;QAGF+F,aAAa,CAACQ,OAAO,CAACvG,QAAQ,EAAE3B,OAAO,EAAEwD,QAAQ,CAAC;MACpD,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AAhDF4D,OAAA,CAAAK,gBAAA,GAAAA,gBAAA;AAmDA;AACA,SAAgBvB,iBAAiBA,CAACiC,IAAgB;EAChD,MAAMzG,WAAW,GAAGyG,IAAI,CAACzG,WAAW;EACpC,OAAOA,WAAW,CAAC0G,4BAA4B,IAAI,IAAI,IAAI,CAAC,CAAC1G,WAAW,CAACQ,YAAY;AACvF;AAHAkF,OAAA,CAAAlB,iBAAA,GAAAA,iBAAA;AAKA,SAASR,aAAaA,CAACyC,IAAgB;EACrC,MAAMzG,WAAW,GAAGyG,IAAI,CAACzG,WAAW;EACpC,IAAIA,WAAW,IAAI,IAAI,EAAE;IACvB,OAAO,KAAK;;EAGd,OAAO,IAAA/C,OAAA,CAAAkJ,cAAc,EAACM,IAAI,CAAC,IAAI,CAAC,IAAI,CAACzG,WAAW,CAAC2G,sBAAsB;AACzE;AAEA,SAASlI,gBAAgBA,CAACJ,MAAc,EAAEC,OAA0B;EAClE,IAAIA,OAAO,CAACsI,SAAS,EAAE;IACrB;IACA;IACA,OAAOtI,OAAO,CAACuI,WAAW,CAACP,QAAQ,EAAE;;EAGvC,IAAI,OAAOjI,MAAM,CAACG,OAAO,KAAK,UAAU,EAAE;IACxC,OAAO,GAAGH,MAAM,CAACyI,aAAa,IAAIzI,MAAM,CAAC0I,UAAU,EAAE;;EAGvD,OAAO,IAAA9J,OAAA,CAAA+J,MAAM,GAAE,CAACV,QAAQ,CAAC,KAAK,CAAC;AACjC;AAEA,SAASb,KAAKA,CACZgB,IAAgB,EAChB7D,OAAiC,EACjCtE,OAAuB,EACvBwD,QAAkB;EAElBxD,OAAO,GAAGA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;EACvB,MAAMqD,oBAAoB,GAAyB;IACjDO,SAAS,EAAEU,OAAO,CAACV,SAAS;IAC5BlB,EAAE,EAAEc,QAAQ;IACZU,OAAO,EAAElE,OAAO,CAACkE,OAAO;IACxByE,UAAU,EAAE,OAAO3I,OAAO,CAAC2I,UAAU,KAAK,SAAS,GAAG3I,OAAO,CAAC2I,UAAU,GAAG,KAAK;IAChFC,mBAAmB,EAAE5I,OAAO,CAAC4I,mBAAmB;IAChDtE,OAAO,EAAE,CAAC,CAACtE,OAAO,CAACsE,OAAO;IAE1B;IACAuE,YAAY,EAAE,OAAO7I,OAAO,CAAC6I,YAAY,KAAK,SAAS,GAAG7I,OAAO,CAAC6I,YAAY,GAAG,IAAI;IACrFC,aAAa,EAAE,OAAO9I,OAAO,CAAC8I,aAAa,KAAK,SAAS,GAAG9I,OAAO,CAAC8I,aAAa,GAAG,IAAI;IACxFC,cAAc,EAAE,OAAO/I,OAAO,CAAC+I,cAAc,KAAK,SAAS,GAAG/I,OAAO,CAAC+I,cAAc,GAAG,KAAK;IAC5FC,UAAU,EAAE,OAAOhJ,OAAO,CAACgJ,UAAU,KAAK,SAAS,GAAGhJ,OAAO,CAACgJ,UAAU,GAAG,KAAK;IAChFC,oBAAoB,EAClB,OAAOjJ,OAAO,CAACiJ,oBAAoB,KAAK,SAAS,GAAGjJ,OAAO,CAACiJ,oBAAoB,GAAG,IAAI;IACzFC,GAAG,EAAE,OAAOlJ,OAAO,CAACkJ,GAAG,KAAK,SAAS,GAAGlJ,OAAO,CAACkJ,GAAG,GAAG,KAAK;IAC3DC,OAAO,EAAE;GACV;EAED,IAAIhB,IAAI,CAAC3I,YAAY,CAAC,IAAI2I,IAAI,CAAC3I,YAAY,CAAC,CAAC4J,UAAU,EAAE;IACvD/F,oBAAoB,CAACgG,gBAAgB,GAAGlB,IAAI,CAAC3I,YAAY,CAAC,CAAC4J,UAAU;IAErE,IAAIjB,IAAI,CAAC3I,YAAY,CAAC,CAAC8J,oBAAoB,EAAE;MAC3CjG,oBAAoB,CAACiG,oBAAoB,GAAGnB,IAAI,CAAC3I,YAAY,CAAC,CAAC8J,oBAAoB;;;EAIvF,IAAI,OAAOtJ,OAAO,CAACI,eAAe,KAAK,QAAQ,EAAE;IAC/CiD,oBAAoB,CAACQ,qBAAqB,GAAG,IAAI;IACjDsE,IAAI,CAAClJ,OAAO,CAAC,CAAC8D,UAAU,CAAC/C,OAAO,CAACI,eAAe,CAAC;;EAGnD;EACA,IAAI+H,IAAI,CAAC7H,eAAe,EAAE;IACxB6H,IAAI,CAACvF,IAAI,CAAChD,UAAU,CAACyH,eAAe,EAAE,IAAIzI,2BAAA,CAAA2K,mBAAmB,CAACpB,IAAI,EAAE7D,OAAO,CAAC,CAAC;IAE7EjB,oBAAoB,CAAC8F,OAAO,GAAG,IAAAxK,OAAA,CAAAiC,GAAG,GAAE;IACpCyC,oBAAoB,CAACX,EAAE,GAAG,CAACqB,GAAG,EAAEyF,KAAK,KAAI;MACvC,IAAIzF,GAAG,EAAE;QACPoE,IAAI,CAACvF,IAAI,CACPhD,UAAU,CAAC2H,cAAc,EACzB,IAAI3I,2BAAA,CAAA6K,kBAAkB,CAACtB,IAAI,EAAE7D,OAAO,EAAEP,GAAG,EAAEV,oBAAoB,CAAC8F,OAAO,CAAC,CACzE;OACF,MAAM;QACL,IAAIK,KAAK,KAAKA,KAAK,CAAC/E,EAAE,KAAK,CAAC,IAAI+E,KAAK,CAAC9E,IAAI,CAAC,EAAE;UAC3CyD,IAAI,CAACvF,IAAI,CACPhD,UAAU,CAAC2H,cAAc,EACzB,IAAI3I,2BAAA,CAAA6K,kBAAkB,CAACtB,IAAI,EAAE7D,OAAO,EAAEkF,KAAK,EAAEnG,oBAAoB,CAAC8F,OAAO,CAAC,CAC3E;SACF,MAAM;UACLhB,IAAI,CAACvF,IAAI,CACPhD,UAAU,CAAC0H,iBAAiB,EAC5B,IAAI1I,2BAAA,CAAA8K,qBAAqB,CAACvB,IAAI,EAAE7D,OAAO,EAAEkF,KAAK,EAAEnG,oBAAoB,CAAC8F,OAAO,CAAC,CAC9E;;;MAIL,IAAI,OAAO3F,QAAQ,KAAK,UAAU,EAAE;QAClCA,QAAQ,CAACO,GAAG,EAAEyF,KAAK,CAAC;;IAExB,CAAC;;EAGH,IAAI,CAACnG,oBAAoB,CAACsF,UAAU,EAAE;IACpCR,IAAI,CAAChJ,MAAM,CAAC,CAACwE,GAAG,CAACN,oBAAoB,CAACO,SAAS,EAAEP,oBAAoB,CAAC;;EAGxE,IAAI;IACF8E,IAAI,CAAC/I,cAAc,CAAC,CAACuK,YAAY,CAACrF,OAAO,EAAEjB,oBAAoB,CAAC;GACjE,CAAC,OAAOuG,CAAC,EAAE;IACV,IAAI,CAACvG,oBAAoB,CAACsF,UAAU,EAAE;MACpCR,IAAI,CAAChJ,MAAM,CAAC,CAACsE,MAAM,CAACJ,oBAAoB,CAACO,SAAS,CAAC;MACnDP,oBAAoB,CAACX,EAAE,CAACkH,CAAC,CAAC;MAC1B;;;EAIJ,IAAIvG,oBAAoB,CAACsF,UAAU,EAAE;IACnCtF,oBAAoB,CAACX,EAAE,EAAE;;AAE7B"},"metadata":{},"sourceType":"script","externalDependencies":[]}