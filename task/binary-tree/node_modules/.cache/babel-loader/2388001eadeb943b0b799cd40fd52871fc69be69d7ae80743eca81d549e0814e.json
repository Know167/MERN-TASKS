{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jatin\\\\Documents\\\\HTML PROJECTS\\\\mern-exercise\\\\task\\\\binary-tree\\\\src\\\\BinaryTree.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Traverse from \"./Traverse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BinaryTree() {\n  _s();\n  const [tree, setTree] = useState(null);\n  const [inputVal, setInputVal] = useState(\"\");\n  useEffect(() => {\n    function insert(value) {\n      setInputVal(value);\n      const newNode = {\n        left: null,\n        value: inputVal,\n        right: null\n      };\n\n      // if (!tree) {\n      //   setTree(newNode);\n      //   return;\n      // }\n\n      let currentNode = tree;\n      while (true) {\n        if (value < currentNode.value) {\n          if (currentNode.left == null) {\n            currentNode.left = newNode;\n            break;\n          }\n          currentNode = currentNode.left;\n          continue;\n        } else {\n          if (value === currentNode.value) {\n            break;\n          } else {\n            if (currentNode.right == null) {\n              currentNode.right = newNode;\n              break;\n            }\n            currentNode = currentNode.right;\n            continue;\n          }\n        }\n      }\n      setTree({\n        ...tree\n      });\n    }\n    function setRoot(value) {\n      setInputVal(value);\n      const newNode = {\n        value: inputVal,\n        left: null,\n        right: null\n      };\n      setTree(newNode);\n    }\n    setRoot(5);\n    insert(2);\n    insert(3);\n    // insert(4);\n    insert(-5);\n    insert(6);\n    insert(-3);\n    // insert(-6);\n\n    // insert(-7)\n    // insert(8);\n  }, [tree]);\n\n  // function onSubmitHandler(event) {\n  //   event.preventDefault();\n  //   insert(Number(inputVal));\n  //   setInputVal(\"\");\n  //   console.log(tree);\n  // }\n  // function onChangeHandler(event) {\n  //   setInputVal(event.target.value);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Traverse, {\n      node: tree\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(BinaryTree, \"0SnD3p4XFMHsVDW7vjoNDp527WE=\");\n_c = BinaryTree;\nexport default BinaryTree;\nvar _c;\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"names":["useState","useEffect","Traverse","jsxDEV","_jsxDEV","BinaryTree","_s","tree","setTree","inputVal","setInputVal","insert","value","newNode","left","right","currentNode","setRoot","children","node","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/BinaryTree.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Traverse from \"./Traverse\";\r\n\r\nfunction BinaryTree() {\r\n  const [tree, setTree] = useState(null);\r\n  const [inputVal, setInputVal] = useState(\"\");\r\n\r\n \r\n \r\n  useEffect(() => {\r\n\r\n     function insert(value) {\r\n       setInputVal(value);\r\n       const newNode = {\r\n         left: null,\r\n         value: inputVal,\r\n         right: null,\r\n       };\r\n\r\n       // if (!tree) {\r\n       //   setTree(newNode);\r\n       //   return;\r\n       // }\r\n\r\n       let currentNode = tree;\r\n\r\n       while (true) {\r\n         if (value < currentNode.value) {\r\n           if (currentNode.left == null) {\r\n             currentNode.left = newNode;\r\n             break;\r\n           }\r\n           currentNode = currentNode.left;\r\n\r\n           continue;\r\n         } else {\r\n           if (value === currentNode.value) {\r\n             break;\r\n           } else {\r\n             if (currentNode.right == null) {\r\n               currentNode.right = newNode;\r\n               break;\r\n             }\r\n             currentNode = currentNode.right;\r\n             continue;\r\n           }\r\n         }\r\n       }\r\n\r\n       setTree({ ...tree });\r\n     }\r\n\r\n     function setRoot(value) {\r\n       setInputVal(value);\r\n       const newNode = { value: inputVal, left: null, right: null };\r\n       setTree(newNode);\r\n     }\r\n    setRoot(5);\r\n    insert(2)\r\n    insert(3)\r\n    // insert(4);\r\n    insert(-5);\r\n    insert(6)\r\n    insert(-3);\r\n    // insert(-6);\r\n   \r\n    // insert(-7)\r\n    // insert(8);\r\n  },[tree]);\r\n\r\n  \r\n  // function onSubmitHandler(event) {\r\n  //   event.preventDefault();\r\n  //   insert(Number(inputVal));\r\n  //   setInputVal(\"\");\r\n  //   console.log(tree);\r\n  // }\r\n  // function onChangeHandler(event) {\r\n  //   setInputVal(event.target.value);\r\n  // }\r\n\r\n  return (\r\n    <div>\r\n      <Traverse node={tree}/>\r\n      {/* <hr />\r\n      <form onSubmit={onSubmitHandler} style={{ marginTop: \"20px\" }}>\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"enter the value here\"\r\n          onChange={onChangeHandler}\r\n          value={inputVal}\r\n        />\r\n        <button type=\"submit\">Insert</button>\r\n      </form> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BinaryTree;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAI5CC,SAAS,CAAC,MAAM;IAEb,SAASU,MAAMA,CAACC,KAAK,EAAE;MACrBF,WAAW,CAACE,KAAK,CAAC;MAClB,MAAMC,OAAO,GAAG;QACdC,IAAI,EAAE,IAAI;QACVF,KAAK,EAAEH,QAAQ;QACfM,KAAK,EAAE;MACT,CAAC;;MAED;MACA;MACA;MACA;;MAEA,IAAIC,WAAW,GAAGT,IAAI;MAEtB,OAAO,IAAI,EAAE;QACX,IAAIK,KAAK,GAAGI,WAAW,CAACJ,KAAK,EAAE;UAC7B,IAAII,WAAW,CAACF,IAAI,IAAI,IAAI,EAAE;YAC5BE,WAAW,CAACF,IAAI,GAAGD,OAAO;YAC1B;UACF;UACAG,WAAW,GAAGA,WAAW,CAACF,IAAI;UAE9B;QACF,CAAC,MAAM;UACL,IAAIF,KAAK,KAAKI,WAAW,CAACJ,KAAK,EAAE;YAC/B;UACF,CAAC,MAAM;YACL,IAAII,WAAW,CAACD,KAAK,IAAI,IAAI,EAAE;cAC7BC,WAAW,CAACD,KAAK,GAAGF,OAAO;cAC3B;YACF;YACAG,WAAW,GAAGA,WAAW,CAACD,KAAK;YAC/B;UACF;QACF;MACF;MAEAP,OAAO,CAAC;QAAE,GAAGD;MAAK,CAAC,CAAC;IACtB;IAEA,SAASU,OAAOA,CAACL,KAAK,EAAE;MACtBF,WAAW,CAACE,KAAK,CAAC;MAClB,MAAMC,OAAO,GAAG;QAAED,KAAK,EAAEH,QAAQ;QAAEK,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC;MAC5DP,OAAO,CAACK,OAAO,CAAC;IAClB;IACDI,OAAO,CAAC,CAAC,CAAC;IACVN,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,CAAC,CAAC;IACT;IACAA,MAAM,CAAC,CAAC,CAAC,CAAC;IACVA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,CAAC,CAAC,CAAC;IACV;;IAEA;IACA;EACF,CAAC,EAAC,CAACJ,IAAI,CAAC,CAAC;;EAGT;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACEH,OAAA;IAAAc,QAAA,eACEd,OAAA,CAACF,QAAQ;MAACiB,IAAI,EAAEZ;IAAK;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAWnB;AAEV;AAACjB,EAAA,CA7FQD,UAAU;AAAAmB,EAAA,GAAVnB,UAAU;AA+FnB,eAAeA,UAAU;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}