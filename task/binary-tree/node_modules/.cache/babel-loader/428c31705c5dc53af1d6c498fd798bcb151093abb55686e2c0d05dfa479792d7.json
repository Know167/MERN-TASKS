{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RTTPinger = exports.Monitor = void 0;\nconst timers_1 = require(\"timers\");\nconst bson_1 = require(\"../bson\");\nconst connect_1 = require(\"../cmap/connect\");\nconst connection_1 = require(\"../cmap/connection\");\nconst constants_1 = require(\"../constants\");\nconst error_1 = require(\"../error\");\nconst mongo_types_1 = require(\"../mongo_types\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst server_1 = require(\"./server\");\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kConnection = Symbol('connection');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRTTPinger = Symbol('rttPinger');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, STATE_IDLE, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, common_1.STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, common_1.STATE_CLOSING]\n});\nconst INVALID_REQUEST_CHECK_STATES = new Set([common_1.STATE_CLOSING, common_1.STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor) {\n  return monitor.s.state === common_1.STATE_CLOSED || monitor.s.state === common_1.STATE_CLOSING;\n}\n/** @internal */\nclass Monitor extends mongo_types_1.TypedEventEmitter {\n  constructor(server, options) {\n    var _a, _b, _c;\n    super();\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: common_1.STATE_CLOSED\n    };\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: (_a = options.connectTimeoutMS) !== null && _a !== void 0 ? _a : 10000,\n      heartbeatFrequencyMS: (_b = options.heartbeatFrequencyMS) !== null && _b !== void 0 ? _b : 10000,\n      minHeartbeatFrequencyMS: (_c = options.minHeartbeatFrequencyMS) !== null && _c !== void 0 ? _c : 500\n    });\n    const cancellationToken = this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = Object.assign({\n      id: '<monitor>',\n      generation: server.s.pool.generation,\n      connectionType: connection_1.Connection,\n      cancellationToken,\n      hostAddress: server.description.hostAddress\n    }, options,\n    // force BSON serialization options\n    {\n      raw: false,\n      promoteLongs: true,\n      promoteValues: true,\n      promoteBuffers: true\n    });\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n  get connection() {\n    return this[kConnection];\n  }\n  connect() {\n    if (this.s.state !== common_1.STATE_CLOSED) {\n      return;\n    }\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = (0, utils_1.makeInterruptibleAsyncInterval)(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n  requestCheck() {\n    var _a;\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n    (_a = this[kMonitorId]) === null || _a === void 0 ? void 0 : _a.wake();\n  }\n  reset() {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this);\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = (0, utils_1.makeInterruptibleAsyncInterval)(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS\n    });\n  }\n  close() {\n    if (isInCloseState(this)) {\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    resetMonitorState(this);\n    // close monitor\n    this.emit('close');\n    stateTransition(this, common_1.STATE_CLOSED);\n  }\n}\nexports.Monitor = Monitor;\nfunction resetMonitorState(monitor) {\n  var _a, _b, _c;\n  (_a = monitor[kMonitorId]) === null || _a === void 0 ? void 0 : _a.stop();\n  monitor[kMonitorId] = undefined;\n  (_b = monitor[kRTTPinger]) === null || _b === void 0 ? void 0 : _b.close();\n  monitor[kRTTPinger] = undefined;\n  monitor[kCancellationToken].emit('cancel');\n  (_c = monitor[kConnection]) === null || _c === void 0 ? void 0 : _c.destroy({\n    force: true\n  });\n  monitor[kConnection] = undefined;\n}\nfunction checkServer(monitor, callback) {\n  let start = (0, utils_1.now)();\n  monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n  function failureHandler(err) {\n    var _a;\n    (_a = monitor[kConnection]) === null || _a === void 0 ? void 0 : _a.destroy({\n      force: true\n    });\n    monitor[kConnection] = undefined;\n    monitor.emit(server_1.Server.SERVER_HEARTBEAT_FAILED, new events_1.ServerHeartbeatFailedEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), err));\n    monitor.emit('resetServer', err);\n    monitor.emit('resetConnectionPool');\n    callback(err);\n  }\n  const connection = monitor[kConnection];\n  if (connection && !connection.closed) {\n    const {\n      serverApi,\n      helloOk\n    } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = topologyVersion != null;\n    const cmd = {\n      [(serverApi === null || serverApi === void 0 ? void 0 : serverApi.version) || helloOk ? 'hello' : constants_1.LEGACY_HELLO_COMMAND]: true,\n      ...(isAwaitable && topologyVersion ? {\n        maxAwaitTimeMS,\n        topologyVersion: makeTopologyVersion(topologyVersion)\n      } : {})\n    };\n    const options = isAwaitable ? {\n      socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n      exhaustAllowed: true\n    } : {\n      socketTimeoutMS: connectTimeoutMS\n    };\n    if (isAwaitable && monitor[kRTTPinger] == null) {\n      monitor[kRTTPinger] = new RTTPinger(monitor[kCancellationToken], Object.assign({\n        heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS\n      }, monitor.connectOptions));\n    }\n    connection.command((0, utils_1.ns)('admin.$cmd'), cmd, options, (err, hello) => {\n      var _a;\n      if (err) {\n        return failureHandler(err);\n      }\n      if (!('isWritablePrimary' in hello)) {\n        // Provide hello-style response document.\n        hello.isWritablePrimary = hello[constants_1.LEGACY_HELLO_COMMAND];\n      }\n      const rttPinger = monitor[kRTTPinger];\n      const duration = isAwaitable && rttPinger ? rttPinger.roundTripTime : (0, utils_1.calculateDurationInMs)(start);\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, duration, hello));\n      // if we are using the streaming protocol then we immediately issue another `started`\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      if (isAwaitable && hello.topologyVersion) {\n        monitor.emit(server_1.Server.SERVER_HEARTBEAT_STARTED, new events_1.ServerHeartbeatStartedEvent(monitor.address));\n        start = (0, utils_1.now)();\n      } else {\n        (_a = monitor[kRTTPinger]) === null || _a === void 0 ? void 0 : _a.close();\n        monitor[kRTTPinger] = undefined;\n        callback(undefined, hello);\n      }\n    });\n    return;\n  }\n  // connecting does an implicit `hello`\n  (0, connect_1.connect)(monitor.connectOptions, (err, conn) => {\n    if (err) {\n      monitor[kConnection] = undefined;\n      // we already reset the connection pool on network errors in all cases\n      if (!(err instanceof error_1.MongoNetworkError)) {\n        monitor.emit('resetConnectionPool');\n      }\n      failureHandler(err);\n      return;\n    }\n    if (conn) {\n      // Tell the connection that we are using the streaming protocol so that the\n      // connection's message stream will only read the last hello on the buffer.\n      conn.isMonitoringConnection = true;\n      if (isInCloseState(monitor)) {\n        conn.destroy({\n          force: true\n        });\n        return;\n      }\n      monitor[kConnection] = conn;\n      monitor.emit(server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, new events_1.ServerHeartbeatSucceededEvent(monitor.address, (0, utils_1.calculateDurationInMs)(start), conn.hello));\n      callback(undefined, conn.hello);\n    }\n  });\n}\nfunction monitorServer(monitor) {\n  return callback => {\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n      callback();\n    }\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === common_1.ServerType.Unknown) {\n          monitor.emit('resetServer', err);\n          return done();\n        }\n      }\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (hello && hello.topologyVersion) {\n        (0, timers_1.setTimeout)(() => {\n          var _a;\n          if (!isInCloseState(monitor)) {\n            (_a = monitor[kMonitorId]) === null || _a === void 0 ? void 0 : _a.wake();\n          }\n        }, 0);\n      }\n      done();\n    });\n  };\n}\nfunction makeTopologyVersion(tv) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    counter: bson_1.Long.isLong(tv.counter) ? tv.counter : bson_1.Long.fromNumber(tv.counter)\n  };\n}\n/** @internal */\nclass RTTPinger {\n  constructor(cancellationToken, options) {\n    this[kConnection] = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n  get roundTripTime() {\n    return this[kRoundTripTime];\n  }\n  close() {\n    var _a;\n    this.closed = true;\n    (0, timers_1.clearTimeout)(this[kMonitorId]);\n    (_a = this[kConnection]) === null || _a === void 0 ? void 0 : _a.destroy({\n      force: true\n    });\n    this[kConnection] = undefined;\n  }\n}\nexports.RTTPinger = RTTPinger;\nfunction measureRoundTripTime(rttPinger, options) {\n  const start = (0, utils_1.now)();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n  if (rttPinger.closed) {\n    return;\n  }\n  function measureAndReschedule(conn) {\n    if (rttPinger.closed) {\n      conn === null || conn === void 0 ? void 0 : conn.destroy({\n        force: true\n      });\n      return;\n    }\n    if (rttPinger[kConnection] == null) {\n      rttPinger[kConnection] = conn;\n    }\n    rttPinger[kRoundTripTime] = (0, utils_1.calculateDurationInMs)(start);\n    rttPinger[kMonitorId] = (0, timers_1.setTimeout)(() => measureRoundTripTime(rttPinger, options), heartbeatFrequencyMS);\n  }\n  const connection = rttPinger[kConnection];\n  if (connection == null) {\n    (0, connect_1.connect)(options, (err, conn) => {\n      if (err) {\n        rttPinger[kConnection] = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n      measureAndReschedule(conn);\n    });\n    return;\n  }\n  connection.command((0, utils_1.ns)('admin.$cmd'), {\n    [constants_1.LEGACY_HELLO_COMMAND]: 1\n  }, undefined, err => {\n    if (err) {\n      rttPinger[kConnection] = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n    measureAndReschedule();\n  });\n}","map":{"version":3,"names":["timers_1","require","bson_1","connect_1","connection_1","constants_1","error_1","mongo_types_1","utils_1","common_1","events_1","server_1","kServer","Symbol","kMonitorId","kConnection","kCancellationToken","kRTTPinger","kRoundTripTime","STATE_IDLE","STATE_MONITORING","stateTransition","makeStateMachine","STATE_CLOSING","STATE_CLOSED","INVALID_REQUEST_CHECK_STATES","Set","isInCloseState","monitor","s","state","Monitor","TypedEventEmitter","constructor","server","options","undefined","CancellationToken","setMaxListeners","Infinity","address","description","Object","freeze","connectTimeoutMS","_a","heartbeatFrequencyMS","_b","minHeartbeatFrequencyMS","_c","cancellationToken","connectOptions","assign","id","generation","pool","connectionType","Connection","hostAddress","raw","promoteLongs","promoteValues","promoteBuffers","credentials","autoEncrypter","connection","connect","makeInterruptibleAsyncInterval","monitorServer","interval","minInterval","immediate","requestCheck","has","wake","reset","topologyVersion","resetMonitorState","close","emit","exports","stop","destroy","force","checkServer","callback","start","now","Server","SERVER_HEARTBEAT_STARTED","ServerHeartbeatStartedEvent","failureHandler","err","SERVER_HEARTBEAT_FAILED","ServerHeartbeatFailedEvent","calculateDurationInMs","closed","serverApi","helloOk","maxAwaitTimeMS","isAwaitable","cmd","version","LEGACY_HELLO_COMMAND","makeTopologyVersion","socketTimeoutMS","exhaustAllowed","RTTPinger","command","ns","hello","isWritablePrimary","rttPinger","duration","roundTripTime","SERVER_HEARTBEAT_SUCCEEDED","ServerHeartbeatSucceededEvent","conn","MongoNetworkError","isMonitoringConnection","done","type","ServerType","Unknown","setTimeout","tv","processId","counter","Long","isLong","fromNumber","measureRoundTripTime","clearTimeout","measureAndReschedule"],"sources":["C:\\Users\\Jatin\\node_modules\\mongodb\\src\\sdam\\monitor.ts"],"sourcesContent":["import { clearTimeout, setTimeout } from 'timers';\n\nimport { Document, Long } from '../bson';\nimport { connect } from '../cmap/connect';\nimport { Connection, ConnectionOptions } from '../cmap/connection';\nimport { LEGACY_HELLO_COMMAND } from '../constants';\nimport { MongoNetworkError } from '../error';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\nimport type { Callback, InterruptibleAsyncInterval } from '../utils';\nimport {\n  calculateDurationInMs,\n  EventEmitterWithState,\n  makeInterruptibleAsyncInterval,\n  makeStateMachine,\n  now,\n  ns\n} from '../utils';\nimport { ServerType, STATE_CLOSED, STATE_CLOSING } from './common';\nimport {\n  ServerHeartbeatFailedEvent,\n  ServerHeartbeatStartedEvent,\n  ServerHeartbeatSucceededEvent\n} from './events';\nimport { Server } from './server';\nimport type { TopologyVersion } from './server_description';\n\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kMonitorId = Symbol('monitorId');\n/** @internal */\nconst kConnection = Symbol('connection');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kRTTPinger = Symbol('rttPinger');\n/** @internal */\nconst kRoundTripTime = Symbol('roundTripTime');\n\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_IDLE, STATE_CLOSED],\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, STATE_CLOSING]\n});\n\nconst INVALID_REQUEST_CHECK_STATES = new Set([STATE_CLOSING, STATE_CLOSED, STATE_MONITORING]);\nfunction isInCloseState(monitor: Monitor) {\n  return monitor.s.state === STATE_CLOSED || monitor.s.state === STATE_CLOSING;\n}\n\n/** @internal */\nexport interface MonitorPrivate {\n  state: string;\n}\n\n/** @public */\nexport interface MonitorOptions\n  extends Omit<ConnectionOptions, 'id' | 'generation' | 'hostAddress'> {\n  connectTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n}\n\n/** @public */\nexport type MonitorEvents = {\n  serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n  serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n  serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n  resetServer(error?: Error): void;\n  resetConnectionPool(): void;\n  close(): void;\n} & EventEmitterWithState;\n\n/** @internal */\nexport class Monitor extends TypedEventEmitter<MonitorEvents> {\n  /** @internal */\n  s: MonitorPrivate;\n  address: string;\n  options: Readonly<\n    Pick<MonitorOptions, 'connectTimeoutMS' | 'heartbeatFrequencyMS' | 'minHeartbeatFrequencyMS'>\n  >;\n  connectOptions: ConnectionOptions;\n  [kServer]: Server;\n  [kConnection]?: Connection;\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kMonitorId]?: InterruptibleAsyncInterval;\n  [kRTTPinger]?: RTTPinger;\n\n  get connection(): Connection | undefined {\n    return this[kConnection];\n  }\n\n  constructor(server: Server, options: MonitorOptions) {\n    super();\n\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = undefined;\n    this.s = {\n      state: STATE_CLOSED\n    };\n\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS: options.connectTimeoutMS ?? 10000,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS ?? 10000,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS ?? 500\n    });\n\n    const cancellationToken = this[kCancellationToken];\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = Object.assign(\n      {\n        id: '<monitor>' as const,\n        generation: server.s.pool.generation,\n        connectionType: Connection,\n        cancellationToken,\n        hostAddress: server.description.hostAddress\n      },\n      options,\n      // force BSON serialization options\n      {\n        raw: false,\n        promoteLongs: true,\n        promoteValues: true,\n        promoteBuffers: true\n      }\n    );\n\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n    if (connectOptions.autoEncrypter) {\n      delete connectOptions.autoEncrypter;\n    }\n\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n\n  connect(): void {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = makeInterruptibleAsyncInterval(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n\n  requestCheck(): void {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n\n    this[kMonitorId]?.wake();\n  }\n\n  reset(): void {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = makeInterruptibleAsyncInterval(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS\n    });\n  }\n\n  close(): void {\n    if (isInCloseState(this)) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // close monitor\n    this.emit('close');\n    stateTransition(this, STATE_CLOSED);\n  }\n}\n\nfunction resetMonitorState(monitor: Monitor) {\n  monitor[kMonitorId]?.stop();\n  monitor[kMonitorId] = undefined;\n\n  monitor[kRTTPinger]?.close();\n  monitor[kRTTPinger] = undefined;\n\n  monitor[kCancellationToken].emit('cancel');\n\n  monitor[kConnection]?.destroy({ force: true });\n  monitor[kConnection] = undefined;\n}\n\nfunction checkServer(monitor: Monitor, callback: Callback<Document | null>) {\n  let start = now();\n  monitor.emit(Server.SERVER_HEARTBEAT_STARTED, new ServerHeartbeatStartedEvent(monitor.address));\n\n  function failureHandler(err: Error) {\n    monitor[kConnection]?.destroy({ force: true });\n    monitor[kConnection] = undefined;\n\n    monitor.emit(\n      Server.SERVER_HEARTBEAT_FAILED,\n      new ServerHeartbeatFailedEvent(monitor.address, calculateDurationInMs(start), err)\n    );\n\n    monitor.emit('resetServer', err);\n    monitor.emit('resetConnectionPool');\n    callback(err);\n  }\n\n  const connection = monitor[kConnection];\n  if (connection && !connection.closed) {\n    const { serverApi, helloOk } = connection;\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = topologyVersion != null;\n\n    const cmd = {\n      [serverApi?.version || helloOk ? 'hello' : LEGACY_HELLO_COMMAND]: true,\n      ...(isAwaitable && topologyVersion\n        ? { maxAwaitTimeMS, topologyVersion: makeTopologyVersion(topologyVersion) }\n        : {})\n    };\n\n    const options = isAwaitable\n      ? {\n          socketTimeoutMS: connectTimeoutMS ? connectTimeoutMS + maxAwaitTimeMS : 0,\n          exhaustAllowed: true\n        }\n      : { socketTimeoutMS: connectTimeoutMS };\n\n    if (isAwaitable && monitor[kRTTPinger] == null) {\n      monitor[kRTTPinger] = new RTTPinger(\n        monitor[kCancellationToken],\n        Object.assign(\n          { heartbeatFrequencyMS: monitor.options.heartbeatFrequencyMS },\n          monitor.connectOptions\n        )\n      );\n    }\n\n    connection.command(ns('admin.$cmd'), cmd, options, (err, hello) => {\n      if (err) {\n        return failureHandler(err);\n      }\n\n      if (!('isWritablePrimary' in hello)) {\n        // Provide hello-style response document.\n        hello.isWritablePrimary = hello[LEGACY_HELLO_COMMAND];\n      }\n\n      const rttPinger = monitor[kRTTPinger];\n      const duration =\n        isAwaitable && rttPinger ? rttPinger.roundTripTime : calculateDurationInMs(start);\n\n      monitor.emit(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        new ServerHeartbeatSucceededEvent(monitor.address, duration, hello)\n      );\n\n      // if we are using the streaming protocol then we immediately issue another `started`\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      if (isAwaitable && hello.topologyVersion) {\n        monitor.emit(\n          Server.SERVER_HEARTBEAT_STARTED,\n          new ServerHeartbeatStartedEvent(monitor.address)\n        );\n        start = now();\n      } else {\n        monitor[kRTTPinger]?.close();\n        monitor[kRTTPinger] = undefined;\n\n        callback(undefined, hello);\n      }\n    });\n\n    return;\n  }\n\n  // connecting does an implicit `hello`\n  connect(monitor.connectOptions, (err, conn) => {\n    if (err) {\n      monitor[kConnection] = undefined;\n\n      // we already reset the connection pool on network errors in all cases\n      if (!(err instanceof MongoNetworkError)) {\n        monitor.emit('resetConnectionPool');\n      }\n\n      failureHandler(err);\n      return;\n    }\n\n    if (conn) {\n      // Tell the connection that we are using the streaming protocol so that the\n      // connection's message stream will only read the last hello on the buffer.\n      conn.isMonitoringConnection = true;\n\n      if (isInCloseState(monitor)) {\n        conn.destroy({ force: true });\n        return;\n      }\n\n      monitor[kConnection] = conn;\n      monitor.emit(\n        Server.SERVER_HEARTBEAT_SUCCEEDED,\n        new ServerHeartbeatSucceededEvent(monitor.address, calculateDurationInMs(start), conn.hello)\n      );\n\n      callback(undefined, conn.hello);\n    }\n  });\n}\n\nfunction monitorServer(monitor: Monitor) {\n  return (callback: Callback) => {\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n\n      callback();\n    }\n\n    checkServer(monitor, (err, hello) => {\n      if (err) {\n        // otherwise an error occurred on initial discovery, also bail\n        if (monitor[kServer].description.type === ServerType.Unknown) {\n          monitor.emit('resetServer', err);\n          return done();\n        }\n      }\n\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (hello && hello.topologyVersion) {\n        setTimeout(() => {\n          if (!isInCloseState(monitor)) {\n            monitor[kMonitorId]?.wake();\n          }\n        }, 0);\n      }\n\n      done();\n    });\n  };\n}\n\nfunction makeTopologyVersion(tv: TopologyVersion) {\n  return {\n    processId: tv.processId,\n    // tests mock counter as just number, but in a real situation counter should always be a Long\n    counter: Long.isLong(tv.counter) ? tv.counter : Long.fromNumber(tv.counter)\n  };\n}\n\n/** @internal */\nexport interface RTTPingerOptions extends ConnectionOptions {\n  heartbeatFrequencyMS: number;\n}\n\n/** @internal */\nexport class RTTPinger {\n  /** @internal */\n  [kConnection]?: Connection;\n  /** @internal */\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kRoundTripTime]: number;\n  /** @internal */\n  [kMonitorId]: NodeJS.Timeout;\n  closed: boolean;\n\n  constructor(cancellationToken: CancellationToken, options: RTTPingerOptions) {\n    this[kConnection] = undefined;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = setTimeout(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n\n  get roundTripTime(): number {\n    return this[kRoundTripTime];\n  }\n\n  close(): void {\n    this.closed = true;\n    clearTimeout(this[kMonitorId]);\n\n    this[kConnection]?.destroy({ force: true });\n    this[kConnection] = undefined;\n  }\n}\n\nfunction measureRoundTripTime(rttPinger: RTTPinger, options: RTTPingerOptions) {\n  const start = now();\n  options.cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n\n  if (rttPinger.closed) {\n    return;\n  }\n\n  function measureAndReschedule(conn?: Connection) {\n    if (rttPinger.closed) {\n      conn?.destroy({ force: true });\n      return;\n    }\n\n    if (rttPinger[kConnection] == null) {\n      rttPinger[kConnection] = conn;\n    }\n\n    rttPinger[kRoundTripTime] = calculateDurationInMs(start);\n    rttPinger[kMonitorId] = setTimeout(\n      () => measureRoundTripTime(rttPinger, options),\n      heartbeatFrequencyMS\n    );\n  }\n\n  const connection = rttPinger[kConnection];\n  if (connection == null) {\n    connect(options, (err, conn) => {\n      if (err) {\n        rttPinger[kConnection] = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n\n      measureAndReschedule(conn);\n    });\n\n    return;\n  }\n\n  connection.command(ns('admin.$cmd'), { [LEGACY_HELLO_COMMAND]: 1 }, undefined, err => {\n    if (err) {\n      rttPinger[kConnection] = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n\n    measureAndReschedule();\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}