{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jatin\\\\Documents\\\\HTML PROJECTS\\\\mern-exercise\\\\task\\\\binary-tree\\\\src\\\\BinaryTree.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BinaryTree() {\n  _s();\n  const [tree, setTree] = useState({\n    value: 1,\n    left: null,\n    right: null\n  });\n  useEffect(() => {\n    function insert(value) {\n      const newNode = {\n        left: null,\n        value: value,\n        right: null\n      };\n      if (tree === null) {\n        setTree(newNode);\n        return;\n      }\n      let currentNode = tree;\n      while (true) {\n        if (value < currentNode.value) {\n          if (currentNode.left == null) {\n            currentNode.left = newNode;\n            break;\n          }\n          currentNode = currentNode.left;\n        } else {\n          if (value === currentNode.value) {\n            break;\n          } else {\n            if (currentNode.right == null) {\n              currentNode.right = newNode;\n              break;\n            }\n            currentNode = currentNode.right;\n          }\n        }\n      }\n      setTree(tree);\n    }\n    insert(4);\n    insert(3);\n    insert(8);\n    insert(12);\n    insert(1);\n    insert(23);\n    insert(11);\n    console.log(tree);\n  }, [tree, insert]);\n  function traverse(node) {\n    if (node !== null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: node.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: traverse(node.left)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: traverse(node.right)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: traverse(tree)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(BinaryTree, \"92UDoKgkWhehK1ZnzXBWGqmzYPk=\");\n_c = BinaryTree;\nexport default BinaryTree;\nvar _c;\n$RefreshReg$(_c, \"BinaryTree\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","BinaryTree","_s","tree","setTree","value","left","right","insert","newNode","currentNode","console","log","traverse","node","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/BinaryTree.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\n\r\nfunction BinaryTree() {\r\n  const [tree, setTree] = useState({\r\n    value: 1,\r\n    left: null,\r\n    right: null,\r\n  });\r\n  \r\n\r\n  \r\n  useEffect(() => {\r\n  \r\nfunction insert(value) {\r\n  const newNode = {\r\n    left: null,\r\n    value: value,\r\n    right: null,\r\n  };\r\n\r\n  if (tree === null) {\r\n    setTree(newNode);\r\n    return;\r\n  }\r\n\r\n  let currentNode = tree;\r\n\r\n  while (true) {\r\n    if (value < currentNode.value) {\r\n      if (currentNode.left == null) {\r\n        currentNode.left = newNode;\r\n        break;\r\n      }\r\n      currentNode = currentNode.left;\r\n    } else {\r\n      if (value === currentNode.value) {\r\n        break;\r\n      } else {\r\n        if (currentNode.right == null) {\r\n          currentNode.right = newNode;\r\n          break;\r\n        }\r\n        currentNode = currentNode.right;\r\n      }\r\n    }\r\n  }\r\n\r\n  setTree(tree);\r\n}\r\n\r\n  insert(4);\r\n  insert(3);\r\n  insert(8);\r\n  insert(12);\r\n  insert(1);\r\n  insert(23);\r\n  insert(11);\r\n  console.log(tree);\r\n}, [tree, insert]);\r\nfunction traverse(node) {\r\n  if (node !== null) {\r\n    return (\r\n      <div>\r\n        <div>{node.value}</div>\r\n        <div>{traverse(node.left)}</div>\r\n        <div>{traverse(node.right)}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n  return (\r\n    <div>\r\n      { traverse(tree)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BinaryTree;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG5C,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC;IAC/BO,KAAK,EAAE,CAAC;IACRC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE;EACT,CAAC,CAAC;EAIFV,SAAS,CAAC,MAAM;IAElB,SAASW,MAAMA,CAACH,KAAK,EAAE;MACrB,MAAMI,OAAO,GAAG;QACdH,IAAI,EAAE,IAAI;QACVD,KAAK,EAAEA,KAAK;QACZE,KAAK,EAAE;MACT,CAAC;MAED,IAAIJ,IAAI,KAAK,IAAI,EAAE;QACjBC,OAAO,CAACK,OAAO,CAAC;QAChB;MACF;MAEA,IAAIC,WAAW,GAAGP,IAAI;MAEtB,OAAO,IAAI,EAAE;QACX,IAAIE,KAAK,GAAGK,WAAW,CAACL,KAAK,EAAE;UAC7B,IAAIK,WAAW,CAACJ,IAAI,IAAI,IAAI,EAAE;YAC5BI,WAAW,CAACJ,IAAI,GAAGG,OAAO;YAC1B;UACF;UACAC,WAAW,GAAGA,WAAW,CAACJ,IAAI;QAChC,CAAC,MAAM;UACL,IAAID,KAAK,KAAKK,WAAW,CAACL,KAAK,EAAE;YAC/B;UACF,CAAC,MAAM;YACL,IAAIK,WAAW,CAACH,KAAK,IAAI,IAAI,EAAE;cAC7BG,WAAW,CAACH,KAAK,GAAGE,OAAO;cAC3B;YACF;YACAC,WAAW,GAAGA,WAAW,CAACH,KAAK;UACjC;QACF;MACF;MAEAH,OAAO,CAACD,IAAI,CAAC;IACf;IAEEK,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,EAAE,CAAC;IACVA,MAAM,CAAC,CAAC,CAAC;IACTA,MAAM,CAAC,EAAE,CAAC;IACVA,MAAM,CAAC,EAAE,CAAC;IACVG,OAAO,CAACC,GAAG,CAACT,IAAI,CAAC;EACnB,CAAC,EAAE,CAACA,IAAI,EAAEK,MAAM,CAAC,CAAC;EAClB,SAASK,QAAQA,CAACC,IAAI,EAAE;IACtB,IAAIA,IAAI,KAAK,IAAI,EAAE;MACjB,oBACEd,OAAA;QAAAe,QAAA,gBACEf,OAAA;UAAAe,QAAA,EAAMD,IAAI,CAACT;QAAK;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAO,eACvBnB,OAAA;UAAAe,QAAA,EAAMF,QAAQ,CAACC,IAAI,CAACR,IAAI;QAAC;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAO,eAChCnB,OAAA;UAAAe,QAAA,EAAMF,QAAQ,CAACC,IAAI,CAACP,KAAK;QAAC;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAO;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC7B;IAEV;EACF;EAEE,oBACEnB,OAAA;IAAAe,QAAA,EACIF,QAAQ,CAACV,IAAI;EAAC;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACZ;AAEV;AAACjB,EAAA,CA1EQD,UAAU;AAAAmB,EAAA,GAAVnB,UAAU;AA4EnB,eAAeA,UAAU;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}