{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nfunction Stack() {\n  _s();\n  //   function traverse(node) {\n  //     console.log(node);\n  //     if (node !== null) {\n  //       return (\n  //         <div>\n  //           <div\n  //             style={{\n  //               width: \"20px\",\n  //               height: \"20px\",\n  //               marginLeft: \"50%\",\n  //               marginBottom: \"7px\",\n  //               border: \"2px solid black\",\n  //               borderRadius: \"5px\",\n  //             }}>\n  //             {node.value}\n  //           </div>\n  //           <div\n  //             style={{\n  //               display: \"flex\",\n  //               flexDirection: \"row\",\n  //               justifyContent: \"space-evenly\",\n  //             }}>\n  //             <div style={{ marginRight: \"5px\" }}>{traverse(node.left)}</div>\n  //             <div>{traverse(node.right)}</div>\n  //           </div>\n  //         </div>\n  //       );\n  //     }\n  //   }\n  useEffect(() => {\n    function Node(value) {\n      this.value = value;\n      // this.left = null;\n      // this.right = null;\n    }\n\n    function insertNode(Tree, value) {\n      var node = Tree,\n        key;\n      while (node.value !== value) {\n        key = value < node.value ? \"left\" : \"right\";\n        if (!node[key]) {\n          node[key] = new Node(value);\n          break;\n        }\n        node = node[key];\n      }\n      return Tree;\n    }\n    function traverse(node) {\n      console.group('');\n      console.log(node.value);\n      node.left && console.log('left:') && traverse(node.left);\n      node.right && console.log(\"right:\") && traverse(node.right);\n      console.groupEnd();\n    }\n    var array = [8, 10, 12, 5, 3, 6];\n    var Tree = array.reduce((t, v) => t ? insertNode(t, v) : new Node(v), null);\n    traverse(Tree);\n  }, []);\n}\n_s(Stack, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Stack;\nexport default Stack;\nvar _c;\n$RefreshReg$(_c, \"Stack\");","map":{"version":3,"names":["React","useEffect","Stack","_s","Node","value","insertNode","Tree","node","key","traverse","console","group","log","left","right","groupEnd","array","reduce","t","v","_c","$RefreshReg$"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/Stack.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\nfunction Stack() {\r\n//   function traverse(node) {\r\n//     console.log(node);\r\n//     if (node !== null) {\r\n//       return (\r\n//         <div>\r\n//           <div\r\n//             style={{\r\n//               width: \"20px\",\r\n//               height: \"20px\",\r\n//               marginLeft: \"50%\",\r\n//               marginBottom: \"7px\",\r\n//               border: \"2px solid black\",\r\n//               borderRadius: \"5px\",\r\n//             }}>\r\n//             {node.value}\r\n//           </div>\r\n//           <div\r\n//             style={{\r\n//               display: \"flex\",\r\n//               flexDirection: \"row\",\r\n//               justifyContent: \"space-evenly\",\r\n//             }}>\r\n//             <div style={{ marginRight: \"5px\" }}>{traverse(node.left)}</div>\r\n//             <div>{traverse(node.right)}</div>\r\n//           </div>\r\n//         </div>\r\n//       );\r\n//     }\r\n//   }\r\n  useEffect(() => {\r\n    function Node(value) {\r\n      this.value = value;\r\n      // this.left = null;\r\n      // this.right = null;\r\n    }\r\n\r\n    function insertNode(Tree, value) {\r\n      var node = Tree,\r\n        key;\r\n      while (node.value !== value) {\r\n        key = value < node.value ? \"left\" : \"right\";\r\n        if (!node[key]) {\r\n          node[key] = new Node(value);\r\n          break;\r\n        }\r\n        node = node[key];\r\n      }\r\n      return Tree;\r\n    }\r\n\r\n      function traverse(node) {\r\n          console.group('');\r\n          console.log(node.value)\r\n          node.left&&console.log('left:')&&traverse(node.left);\r\n          node.right && console.log(\"right:\") && traverse(node.right);\r\n          console.groupEnd();\r\n      }\r\n\r\n    var array = [8, 10, 12, 5, 3, 6];\r\n    var Tree = array.reduce(\r\n      (t, v) => (t ? insertNode(t, v) : new Node(v)),\r\n      null\r\n      );\r\n      traverse(Tree);\r\n  }, []);\r\n}\r\n\r\nexport default Stack;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAExC,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACjB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACEF,SAAS,CAAC,MAAM;IACd,SAASG,IAAIA,CAACC,KAAK,EAAE;MACnB,IAAI,CAACA,KAAK,GAAGA,KAAK;MAClB;MACA;IACF;;IAEA,SAASC,UAAUA,CAACC,IAAI,EAAEF,KAAK,EAAE;MAC/B,IAAIG,IAAI,GAAGD,IAAI;QACbE,GAAG;MACL,OAAOD,IAAI,CAACH,KAAK,KAAKA,KAAK,EAAE;QAC3BI,GAAG,GAAGJ,KAAK,GAAGG,IAAI,CAACH,KAAK,GAAG,MAAM,GAAG,OAAO;QAC3C,IAAI,CAACG,IAAI,CAACC,GAAG,CAAC,EAAE;UACdD,IAAI,CAACC,GAAG,CAAC,GAAG,IAAIL,IAAI,CAACC,KAAK,CAAC;UAC3B;QACF;QACAG,IAAI,GAAGA,IAAI,CAACC,GAAG,CAAC;MAClB;MACA,OAAOF,IAAI;IACb;IAEE,SAASG,QAAQA,CAACF,IAAI,EAAE;MACpBG,OAAO,CAACC,KAAK,CAAC,EAAE,CAAC;MACjBD,OAAO,CAACE,GAAG,CAACL,IAAI,CAACH,KAAK,CAAC;MACvBG,IAAI,CAACM,IAAI,IAAEH,OAAO,CAACE,GAAG,CAAC,OAAO,CAAC,IAAEH,QAAQ,CAACF,IAAI,CAACM,IAAI,CAAC;MACpDN,IAAI,CAACO,KAAK,IAAIJ,OAAO,CAACE,GAAG,CAAC,QAAQ,CAAC,IAAIH,QAAQ,CAACF,IAAI,CAACO,KAAK,CAAC;MAC3DJ,OAAO,CAACK,QAAQ,EAAE;IACtB;IAEF,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAChC,IAAIV,IAAI,GAAGU,KAAK,CAACC,MAAM,CACrB,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,GAAGb,UAAU,CAACa,CAAC,EAAEC,CAAC,CAAC,GAAG,IAAIhB,IAAI,CAACgB,CAAC,CAAE,EAC9C,IAAI,CACH;IACDV,QAAQ,CAACH,IAAI,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;AACR;AAACJ,EAAA,CAlEQD,KAAK;AAAAmB,EAAA,GAALnB,KAAK;AAoEd,eAAeA,KAAK;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}