{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nfunction Stack() {\n  _s();\n  function traverse(node) {\n    console.log(node);\n    // if (node !== null) {\n    //   return (\n    //     <div>\n    //       <div\n    //         style={{\n    //           width: \"20px\",\n    //           height: \"20px\",\n    //           marginLeft: \"50%\",\n    //           marginBottom: \"7px\",\n    //           border: \"2px solid black\",\n    //           borderRadius: \"5px\",\n    //         }}>\n    //         {node.value}\n    //       </div>\n    //       <div\n    //         style={{\n    //           display: \"flex\",\n    //           flexDirection: \"row\",\n    //           justifyContent: \"space-evenly\",\n    //         }}>\n    //         <div style={{ marginRight: \"5px\" }}>{traverse(node.left)}</div>\n    //         <div>{traverse(node.right)}</div>\n    //       </div>\n    //     </div>\n    //   );\n    // }\n  }\n\n  useEffect(() => {\n    function Node(value) {\n      this.value = value;\n      // this.left = null;\n      // this.right = null;\n    }\n\n    function insertNode(Tree, value) {\n      var node = Tree,\n        key;\n      while (node.value !== value) {\n        key = value < node.value ? \"left\" : \"right\";\n        if (!node[key]) {\n          node[key] = new Node(value);\n          break;\n        }\n        node = node[key];\n      }\n      return Tree;\n    }\n    var array = [8, 10, 12, 5, 3, 6];\n    var Tree = array.reduce((t, v) => t ? insertNode(t, v) : new Node(v), null);\n    traverse(Tree);\n  }, []);\n}\n_s(Stack, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Stack;\nexport default Stack;\nvar _c;\n$RefreshReg$(_c, \"Stack\");","map":{"version":3,"names":["React","useEffect","useState","Stack","_s","traverse","node","console","log","Node","value","insertNode","Tree","key","array","reduce","t","v","_c","$RefreshReg$"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/Stack.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction Stack() {\r\n  function traverse(node) {\r\n    console.log(node);\r\n    // if (node !== null) {\r\n    //   return (\r\n    //     <div>\r\n    //       <div\r\n    //         style={{\r\n    //           width: \"20px\",\r\n    //           height: \"20px\",\r\n    //           marginLeft: \"50%\",\r\n    //           marginBottom: \"7px\",\r\n    //           border: \"2px solid black\",\r\n    //           borderRadius: \"5px\",\r\n    //         }}>\r\n    //         {node.value}\r\n    //       </div>\r\n    //       <div\r\n    //         style={{\r\n    //           display: \"flex\",\r\n    //           flexDirection: \"row\",\r\n    //           justifyContent: \"space-evenly\",\r\n    //         }}>\r\n    //         <div style={{ marginRight: \"5px\" }}>{traverse(node.left)}</div>\r\n    //         <div>{traverse(node.right)}</div>\r\n    //       </div>\r\n    //     </div>\r\n    //   );\r\n    // }\r\n  }\r\n  useEffect(() => {\r\n    function Node(value) {\r\n      this.value = value;\r\n      // this.left = null;\r\n      // this.right = null;\r\n    }\r\n\r\n    function insertNode(Tree, value) {\r\n      var node = Tree,\r\n        key;\r\n      while (node.value !== value) {\r\n        key = value < node.value ? \"left\" : \"right\";\r\n        if (!node[key]) {\r\n          node[key] = new Node(value);\r\n          break;\r\n        }\r\n        node = node[key];\r\n      }\r\n      return Tree;\r\n    }\r\n\r\n    var array = [8, 10, 12, 5, 3, 6];\r\n    var Tree = array.reduce(\r\n      (t, v) => (t ? insertNode(t, v) : new Node(v)),\r\n      null\r\n    );\r\n    traverse(Tree);\r\n  }, []);\r\n}\r\n\r\nexport default Stack;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,SAASC,QAAQA,CAACC,IAAI,EAAE;IACtBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF;;EACAL,SAAS,CAAC,MAAM;IACd,SAASQ,IAAIA,CAACC,KAAK,EAAE;MACnB,IAAI,CAACA,KAAK,GAAGA,KAAK;MAClB;MACA;IACF;;IAEA,SAASC,UAAUA,CAACC,IAAI,EAAEF,KAAK,EAAE;MAC/B,IAAIJ,IAAI,GAAGM,IAAI;QACbC,GAAG;MACL,OAAOP,IAAI,CAACI,KAAK,KAAKA,KAAK,EAAE;QAC3BG,GAAG,GAAGH,KAAK,GAAGJ,IAAI,CAACI,KAAK,GAAG,MAAM,GAAG,OAAO;QAC3C,IAAI,CAACJ,IAAI,CAACO,GAAG,CAAC,EAAE;UACdP,IAAI,CAACO,GAAG,CAAC,GAAG,IAAIJ,IAAI,CAACC,KAAK,CAAC;UAC3B;QACF;QACAJ,IAAI,GAAGA,IAAI,CAACO,GAAG,CAAC;MAClB;MACA,OAAOD,IAAI;IACb;IAEA,IAAIE,KAAK,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAChC,IAAIF,IAAI,GAAGE,KAAK,CAACC,MAAM,CACrB,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,GAAGL,UAAU,CAACK,CAAC,EAAEC,CAAC,CAAC,GAAG,IAAIR,IAAI,CAACQ,CAAC,CAAE,EAC9C,IAAI,CACL;IACDZ,QAAQ,CAACO,IAAI,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;AACR;AAACR,EAAA,CA1DQD,KAAK;AAAAe,EAAA,GAALf,KAAK;AA4Dd,eAAeA,KAAK;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}