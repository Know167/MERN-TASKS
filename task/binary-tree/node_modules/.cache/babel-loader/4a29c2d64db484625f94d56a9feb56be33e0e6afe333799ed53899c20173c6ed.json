{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\nconst zlib = require(\"zlib\");\nconst constants_1 = require(\"../../constants\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\n/** @public */\nexports.Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2,\n  zstd: 3\n});\nexports.uncompressibleCommands = new Set([constants_1.LEGACY_HELLO_COMMAND, 'saslStart', 'saslContinue', 'getnonce', 'authenticate', 'createUser', 'updateUser', 'copydbSaslStart', 'copydbgetnonce', 'copydb']);\nconst MAX_COMPRESSOR_ID = 3;\nconst ZSTD_COMPRESSION_LEVEL = 3;\n// Facilitate compressing a message using an agreed compressor\nfunction compress(self, dataToBeCompressed, callback) {\n  const zlibOptions = {};\n  switch (self.options.agreedCompressor) {\n    case 'snappy':\n      {\n        if ('kModuleError' in deps_1.Snappy) {\n          return callback(deps_1.Snappy['kModuleError']);\n        }\n        if (deps_1.Snappy[deps_1.PKG_VERSION].major <= 6) {\n          deps_1.Snappy.compress(dataToBeCompressed, callback);\n        } else {\n          deps_1.Snappy.compress(dataToBeCompressed).then(buffer => callback(undefined, buffer), error => callback(error));\n        }\n        break;\n      }\n    case 'zlib':\n      // Determine zlibCompressionLevel\n      if (self.options.zlibCompressionLevel) {\n        zlibOptions.level = self.options.zlibCompressionLevel;\n      }\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback);\n      break;\n    case 'zstd':\n      if ('kModuleError' in deps_1.ZStandard) {\n        return callback(deps_1.ZStandard['kModuleError']);\n      }\n      deps_1.ZStandard.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL).then(buffer => callback(undefined, buffer), error => callback(error));\n      break;\n    default:\n      throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${self.options.agreedCompressor} failed to compress`);\n  }\n}\nexports.compress = compress;\n// Decompress a message using the given compressor\nfunction decompress(compressorID, compressedData, callback) {\n  if (compressorID < 0 || compressorID > MAX_COMPRESSOR_ID) {\n    throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n  }\n  switch (compressorID) {\n    case exports.Compressor.snappy:\n      {\n        if ('kModuleError' in deps_1.Snappy) {\n          return callback(deps_1.Snappy['kModuleError']);\n        }\n        if (deps_1.Snappy[deps_1.PKG_VERSION].major <= 6) {\n          deps_1.Snappy.uncompress(compressedData, {\n            asBuffer: true\n          }, callback);\n        } else {\n          deps_1.Snappy.uncompress(compressedData, {\n            asBuffer: true\n          }).then(buffer => callback(undefined, buffer), error => callback(error));\n        }\n        break;\n      }\n    case exports.Compressor.zstd:\n      {\n        if ('kModuleError' in deps_1.ZStandard) {\n          return callback(deps_1.ZStandard['kModuleError']);\n        }\n        deps_1.ZStandard.decompress(compressedData).then(buffer => callback(undefined, buffer), error => callback(error));\n        break;\n      }\n    case exports.Compressor.zlib:\n      zlib.inflate(compressedData, callback);\n      break;\n    default:\n      callback(undefined, compressedData);\n  }\n}\nexports.decompress = decompress;","map":{"version":3,"names":["zlib","require","constants_1","deps_1","error_1","exports","Compressor","Object","freeze","none","snappy","zstd","uncompressibleCommands","Set","LEGACY_HELLO_COMMAND","MAX_COMPRESSOR_ID","ZSTD_COMPRESSION_LEVEL","compress","self","dataToBeCompressed","callback","zlibOptions","options","agreedCompressor","Snappy","PKG_VERSION","major","then","buffer","undefined","error","zlibCompressionLevel","level","deflate","ZStandard","MongoInvalidArgumentError","decompress","compressorID","compressedData","MongoDecompressionError","uncompress","asBuffer","inflate"],"sources":["C:\\Users\\Jatin\\node_modules\\mongodb\\src\\cmap\\wire_protocol\\compression.ts"],"sourcesContent":["import * as zlib from 'zlib';\n\nimport { LEGACY_HELLO_COMMAND } from '../../constants';\nimport { PKG_VERSION, Snappy, ZStandard } from '../../deps';\nimport { MongoDecompressionError, MongoInvalidArgumentError } from '../../error';\nimport type { Callback } from '../../utils';\nimport type { OperationDescription } from '../message_stream';\n\n/** @public */\nexport const Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2,\n  zstd: 3\n} as const);\n\n/** @public */\nexport type Compressor = typeof Compressor[CompressorName];\n\n/** @public */\nexport type CompressorName = keyof typeof Compressor;\n\nexport const uncompressibleCommands = new Set([\n  LEGACY_HELLO_COMMAND,\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'authenticate',\n  'createUser',\n  'updateUser',\n  'copydbSaslStart',\n  'copydbgetnonce',\n  'copydb'\n]);\n\nconst MAX_COMPRESSOR_ID = 3;\nconst ZSTD_COMPRESSION_LEVEL = 3;\n\n// Facilitate compressing a message using an agreed compressor\nexport function compress(\n  self: { options: OperationDescription & zlib.ZlibOptions },\n  dataToBeCompressed: Buffer,\n  callback: Callback<Buffer>\n): void {\n  const zlibOptions = {} as zlib.ZlibOptions;\n  switch (self.options.agreedCompressor) {\n    case 'snappy': {\n      if ('kModuleError' in Snappy) {\n        return callback(Snappy['kModuleError']);\n      }\n\n      if (Snappy[PKG_VERSION].major <= 6) {\n        Snappy.compress(dataToBeCompressed, callback);\n      } else {\n        Snappy.compress(dataToBeCompressed).then(\n          buffer => callback(undefined, buffer),\n          error => callback(error)\n        );\n      }\n      break;\n    }\n    case 'zlib':\n      // Determine zlibCompressionLevel\n      if (self.options.zlibCompressionLevel) {\n        zlibOptions.level = self.options.zlibCompressionLevel;\n      }\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback as zlib.CompressCallback);\n      break;\n    case 'zstd':\n      if ('kModuleError' in ZStandard) {\n        return callback(ZStandard['kModuleError']);\n      }\n      ZStandard.compress(dataToBeCompressed, ZSTD_COMPRESSION_LEVEL).then(\n        buffer => callback(undefined, buffer),\n        error => callback(error)\n      );\n      break;\n    default:\n      throw new MongoInvalidArgumentError(\n        `Unknown compressor ${self.options.agreedCompressor} failed to compress`\n      );\n  }\n}\n\n// Decompress a message using the given compressor\nexport function decompress(\n  compressorID: Compressor,\n  compressedData: Buffer,\n  callback: Callback<Buffer>\n): void {\n  if (compressorID < 0 || compressorID > MAX_COMPRESSOR_ID) {\n    throw new MongoDecompressionError(\n      `Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`\n    );\n  }\n\n  switch (compressorID) {\n    case Compressor.snappy: {\n      if ('kModuleError' in Snappy) {\n        return callback(Snappy['kModuleError']);\n      }\n\n      if (Snappy[PKG_VERSION].major <= 6) {\n        Snappy.uncompress(compressedData, { asBuffer: true }, callback);\n      } else {\n        Snappy.uncompress(compressedData, { asBuffer: true }).then(\n          buffer => callback(undefined, buffer),\n          error => callback(error)\n        );\n      }\n      break;\n    }\n    case Compressor.zstd: {\n      if ('kModuleError' in ZStandard) {\n        return callback(ZStandard['kModuleError']);\n      }\n\n      ZStandard.decompress(compressedData).then(\n        buffer => callback(undefined, buffer),\n        error => callback(error)\n      );\n      break;\n    }\n    case Compressor.zlib:\n      zlib.inflate(compressedData, callback as zlib.CompressCallback);\n      break;\n    default:\n      callback(undefined, compressedData);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}