{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FEATURE_FLAGS = exports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.checkTLSOptions = exports.resolveSRVRecord = void 0;\nconst dns = require(\"dns\");\nconst fs = require(\"fs\");\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nconst url_1 = require(\"url\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst providers_1 = require(\"./cmap/auth/providers\");\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\nconst encrypter_1 = require(\"./encrypter\");\nconst error_1 = require(\"./error\");\nconst logger_1 = require(\"./logger\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst promise_provider_1 = require(\"./promise_provider\");\nconst read_concern_1 = require(\"./read_concern\");\nconst read_preference_1 = require(\"./read_preference\");\nconst utils_1 = require(\"./utils\");\nconst write_concern_1 = require(\"./write_concern\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nfunction resolveSRVRecord(options, callback) {\n  if (typeof options.srvHost !== 'string') {\n    return callback(new error_1.MongoAPIError('Option \"srvHost\" must not be empty'));\n  }\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    return callback(new error_1.MongoAPIError('URI must include hostname, domain name, and tld'));\n  }\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  dns.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n    if (addresses.length === 0) {\n      return callback(new error_1.MongoAPIError('No addresses found at host'));\n    }\n    for (const {\n      name\n    } of addresses) {\n      if (!matchesParentDomain(name, lookupAddress)) {\n        return callback(new error_1.MongoAPIError('Server record does not share hostname with parent URI'));\n      }\n    }\n    const hostAddresses = addresses.map(r => {\n      var _a;\n      return utils_1.HostAddress.fromString(`${r.name}:${(_a = r.port) !== null && _a !== void 0 ? _a : 27017}`);\n    });\n    const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n    if (lbError) {\n      return callback(lbError);\n    }\n    // Resolve TXT record and add options from there if they exist.\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      var _a, _b, _c;\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n      } else {\n        if (record.length > 1) {\n          return callback(new error_1.MongoParseError('Multiple text records not allowed'));\n        }\n        const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n        const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n        if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n          return callback(new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`));\n        }\n        if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n          return callback(new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n        }\n        const source = (_a = txtRecordOptions.get('authSource')) !== null && _a !== void 0 ? _a : undefined;\n        const replicaSet = (_b = txtRecordOptions.get('replicaSet')) !== null && _b !== void 0 ? _b : undefined;\n        const loadBalanced = (_c = txtRecordOptions.get('loadBalanced')) !== null && _c !== void 0 ? _c : undefined;\n        if (!options.userSpecifiedAuthSource && source && options.credentials && !providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)) {\n          options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n            source\n          });\n        }\n        if (!options.userSpecifiedReplicaSet && replicaSet) {\n          options.replicaSet = replicaSet;\n        }\n        if (loadBalanced === 'true') {\n          options.loadBalanced = true;\n        }\n        if (options.replicaSet && options.srvMaxHosts > 0) {\n          return callback(new error_1.MongoParseError('Cannot combine replicaSet option with srvMaxHosts'));\n        }\n        const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n        if (lbError) {\n          return callback(lbError);\n        }\n      }\n      callback(undefined, hostAddresses);\n    });\n  });\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\nfunction checkTLSOptions(options) {\n  if (!options) return;\n  const check = (a, b) => {\n    if (Reflect.has(options, a) && Reflect.has(options, b)) {\n      throw new error_1.MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nexports.checkTLSOptions = checkTLSOptions;\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`);\n    }\n    return true;\n  }\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      (0, utils_1.emitWarningOnce)(`deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`);\n    }\n    return false;\n  }\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\nfunction getInt(name, value) {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  if (!Number.isNaN(parsedValue)) return parsedValue;\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUint(name, value) {\n  const parsedValue = getInt(name, value);\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\nfunction* entriesFromString(value) {\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n    if (value == null) {\n      throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n    }\n    yield [key, value];\n  }\n}\nclass CaseInsensitiveMap extends Map {\n  constructor() {\n    let entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    super(entries.map(_ref => {\n      let [k, v] = _ref;\n      return [k.toLowerCase(), v];\n    }));\n  }\n  has(k) {\n    return super.has(k.toLowerCase());\n  }\n  get(k) {\n    return super.get(k.toLowerCase());\n  }\n  set(k, v) {\n    return super.set(k.toLowerCase(), v);\n  }\n  delete(k) {\n    return super.delete(k.toLowerCase());\n  }\n}\nfunction parseOptions(uri) {\n  let mongoClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n  const url = new mongodb_connection_string_url_1.default(uri);\n  const {\n    hosts,\n    isSRV\n  } = url;\n  const mongoOptions = Object.create(null);\n  // Feature flags\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (exports.FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  const urlOptions = new CaseInsensitiveMap();\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n  if (url.username !== '') {\n    const auth = {\n      username: decodeURIComponent(url.username)\n    };\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n    urlOptions.set('auth', [auth]);\n  }\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n    if (values.includes('')) {\n      throw new error_1.MongoAPIError('URI cannot contain options with no value');\n    }\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n  const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(_ref2 => {\n    let [, v] = _ref2;\n    return v != null;\n  }));\n  // Validate options that can only be provided by one of uri or object\n  if (urlOptions.has('serverApi')) {\n    throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n  }\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n  // All option collection\n  const allOptions = new CaseInsensitiveMap();\n  const allKeys = new Set([...urlOptions.keys(), ...objectOptions.keys(), ...exports.DEFAULT_OPTIONS.keys()]);\n  for (const key of allKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n    const urlValue = urlOptions.get(key);\n    if (urlValue != null) {\n      values.push(...urlValue);\n    }\n    const defaultOptionsValue = exports.DEFAULT_OPTIONS.get(key);\n    if (defaultOptionsValue != null) {\n      values.push(defaultOptionsValue);\n    }\n    allOptions.set(key, values);\n  }\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    const tlsAndSslOpts = (allOptions.get('tls') || []).concat(allOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n  const unsupportedOptions = (0, utils_1.setDifference)(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n  }\n  // Option parsing and setting\n  for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_AWS;\n    if ((isGssapi || isX509) && allOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(`${mongoOptions.credentials} can only have authSource set to '$external'`);\n    }\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n    mongoOptions.credentials.validate();\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (mongoOptions.credentials.password === '' && mongoOptions.credentials.username === '' && mongoOptions.credentials.mechanism === providers_1.AuthMechanism.MONGODB_DEFAULT && Object.keys(mongoOptions.credentials.mechanismProperties).length === 0) {\n      delete mongoOptions.credentials;\n    }\n  }\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n  checkTLSOptions(mongoOptions);\n  if (options.promiseLibrary) promise_provider_1.PromiseProvider.set(options.promiseLibrary);\n  const lbError = validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n  if (lbError) {\n    throw lbError;\n  }\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n  // Potential SRV Overrides and SRV connection string validations\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n    if (mongoOptions.directConnection) {\n      throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n    }\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions = urlOptions.has('srvMaxHosts') || objectOptions.has('srvMaxHosts') || urlOptions.has('srvServiceName') || objectOptions.has('srvServiceName');\n    if (userSpecifiedSrvOptions) {\n      throw new error_1.MongoParseError('Cannot use srvMaxHosts or srvServiceName with a non-srv connection string');\n    }\n  }\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new error_1.MongoParseError('directConnection option requires exactly one host');\n  }\n  if (!mongoOptions.proxyHost && (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)) {\n    throw new error_1.MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n  if (mongoOptions.proxyUsername && !mongoOptions.proxyPassword || !mongoOptions.proxyUsername && mongoOptions.proxyPassword) {\n    throw new error_1.MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(key => {\n    var _a;\n    return (_a = urlOptions.get(key)) !== null && _a !== void 0 ? _a : [];\n  });\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new error_1.MongoParseError('Proxy options cannot be specified multiple times in the connection string');\n  }\n  return mongoOptions;\n}\nexports.parseOptions = parseOptions;\nfunction validateLoadBalancedOptions(hosts, mongoOptions, isSrv) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      return new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      return new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      return new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      return new error_1.MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n  const {\n    target,\n    type,\n    transform,\n    deprecated\n  } = descriptor;\n  const name = target !== null && target !== void 0 ? target : key;\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getInt(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUint(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!(0, utils_1.isRecord)(values[0])) {\n        throw new error_1.MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n        const transformValue = transform({\n          name,\n          options: mongoOptions,\n          values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\nexports.OPTIONS = {\n  appName: {\n    target: 'metadata',\n    transform(_ref3) {\n      let {\n        options,\n        values: [value]\n      } = _ref3;\n      return (0, utils_1.makeClientMetadata)({\n        ...options.driverInfo,\n        appName: String(value)\n      });\n    }\n  },\n  auth: {\n    target: 'credentials',\n    transform(_ref4) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref4;\n      if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform(_ref5) {\n      let {\n        options,\n        values: [value]\n      } = _ref5;\n      var _a, _b;\n      const mechanisms = Object.values(providers_1.AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = (_a = options.credentials) === null || _a === void 0 ? void 0 : _a.source;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_PLAIN || providers_1.AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n      let password = (_b = options.credentials) === null || _b === void 0 ? void 0 : _b.password;\n      if (mechanism === providers_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform(_ref6) {\n      let {\n        options,\n        values: [optionValue]\n      } = _ref6;\n      if (typeof optionValue === 'string') {\n        const mechanismProperties = Object.create(null);\n        for (const [key, value] of entriesFromString(optionValue)) {\n          try {\n            mechanismProperties[key] = getBoolean(key, value);\n          } catch {\n            mechanismProperties[key] = value;\n          }\n        }\n        return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n          mechanismProperties\n        });\n      }\n      if (!(0, utils_1.isRecord)(optionValue)) {\n        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties: optionValue\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform(_ref7) {\n      let {\n        options,\n        values: [value]\n      } = _ref7;\n      const source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform(_ref8) {\n      let {\n        values: [version]\n      } = _ref8;\n      const serverApiToValidate = typeof version === 'string' ? {\n        version\n      } : version;\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform(_ref9) {\n      let {\n        values\n      } = _ref9;\n      const compressionList = new Set();\n      for (const compVal of values) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n        }\n        for (const c of compValArray) {\n          if (Object.keys(compression_1.Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: (0, utils_1.makeClientMetadata)(),\n    transform(_ref10) {\n      let {\n        options,\n        values: [value]\n      } = _ref10;\n      var _a, _b;\n      if (!(0, utils_1.isRecord)(value)) throw new error_1.MongoParseError('DriverInfo must be an object');\n      return (0, utils_1.makeClientMetadata)({\n        driverInfo: value,\n        appName: (_b = (_a = options.metadata) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.name\n      });\n    }\n  },\n  enableUtf8Validation: {\n    type: 'boolean',\n    default: true\n  },\n  family: {\n    transform(_ref11) {\n      let {\n        name,\n        values: [value]\n      } = _ref11;\n      const transformValue = getInt(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform(_ref12) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref12;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform(_ref13) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref13;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  journal: {\n    target: 'writeConcern',\n    transform(_ref14) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref14;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new logger_1.Logger('MongoClient'),\n    transform(_ref15) {\n      let {\n        values: [value]\n      } = _ref15;\n      if (value instanceof logger_1.Logger) {\n        return value;\n      }\n      (0, utils_1.emitWarning)('Alternative loggers might not be supported');\n      // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n      return;\n    }\n  },\n  loggerLevel: {\n    target: 'logger',\n    transform(_ref16) {\n      let {\n        values: [value]\n      } = _ref16;\n      return new logger_1.Logger('MongoClient', {\n        loggerLevel: value\n      });\n    }\n  },\n  maxConnecting: {\n    default: 2,\n    transform(_ref17) {\n      let {\n        name,\n        values: [value]\n      } = _ref17;\n      const maxConnecting = getUint(name, value);\n      if (maxConnecting === 0) {\n        throw new error_1.MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform(_ref18) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref18;\n      const maxStalenessSeconds = getUint(name, value);\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            maxStalenessSeconds\n          }\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds\n        });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform(_ref19) {\n      let {\n        values: [value],\n        options\n      } = _ref19;\n      return {\n        ...options.driverInfo,\n        name: String(value)\n      };\n    }\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n    transform(_ref20) {\n      let {\n        values: [value]\n      } = _ref20;\n      if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n      throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n    }\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform(_ref21) {\n      let {\n        values: [value],\n        options\n      } = _ref21;\n      if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions({\n          ...options.readConcern,\n          ...value\n        });\n      }\n      throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform(_ref22) {\n      let {\n        values: [level],\n        options\n      } = _ref22;\n      return read_concern_1.ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level\n      });\n    }\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n    transform(_ref23) {\n      let {\n        values: [value],\n        options\n      } = _ref23;\n      var _a, _b, _c;\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n      }\n      if ((0, utils_1.isRecord)(value, ['mode'])) {\n        const rp = read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n        if (rp) return rp;else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: (_a = options.readPreference) === null || _a === void 0 ? void 0 : _a.hedge,\n          maxStalenessSeconds: (_b = options.readPreference) === null || _b === void 0 ? void 0 : _b.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, (_c = options.readPreference) === null || _c === void 0 ? void 0 : _c.tags, rpOpts);\n      }\n      throw new error_1.MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform(_ref24) {\n      let {\n        values,\n        options\n      } = _ref24;\n      const tags = Array.isArray(values[0]) ? values[0] : values;\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if ((0, utils_1.isRecord)(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform(_ref25) {\n      let {\n        values: [value]\n      } = _ref25;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform(_ref26) {\n      let {\n        values: [value]\n      } = _ref26;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform(_ref27) {\n      let {\n        values: [value]\n      } = _ref27;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform(_ref28) {\n      let {\n        values: [value]\n      } = _ref28;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform(_ref29) {\n      let {\n        name,\n        values: [value]\n      } = _ref29;\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform(_ref30) {\n      let {\n        name,\n        values: [value]\n      } = _ref30;\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform(_ref31) {\n      let {\n        values: [value]\n      } = _ref31;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform(_ref32) {\n      let {\n        values: [value]\n      } = _ref32;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform(_ref33) {\n      let {\n        values: [value]\n      } = _ref33;\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform(_ref34) {\n      let {\n        name,\n        options,\n        values: [value]\n      } = _ref34;\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? () => undefined : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform(_ref35) {\n      let {\n        values: [value],\n        options\n      } = _ref35;\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          w: value\n        }\n      });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform(_ref36) {\n      let {\n        values: [value],\n        options\n      } = _ref36;\n      if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n      throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform(_ref37) {\n      let {\n        values: [value],\n        options\n      } = _ref37;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUint('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform(_ref38) {\n      let {\n        values: [value],\n        options\n      } = _ref38;\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUint('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: {\n    type: 'boolean'\n  },\n  useUnifiedTopology: {\n    type: 'boolean'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(_ref39 => {\n  let [, descriptor] = _ref39;\n  return descriptor.default != null;\n}).map(_ref40 => {\n  let [k, d] = _ref40;\n  return [k, d.default];\n}));\n/**\n * Set of permitted feature flags\n * @internal\n */\nexports.FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect')]);","map":{"version":3,"names":["dns","require","fs","mongodb_connection_string_url_1","url_1","mongo_credentials_1","providers_1","compression_1","encrypter_1","error_1","logger_1","mongo_client_1","promise_provider_1","read_concern_1","read_preference_1","utils_1","write_concern_1","VALID_TXT_RECORDS","LB_SINGLE_HOST_ERROR","LB_REPLICA_SET_ERROR","LB_DIRECT_CONNECTION_ERROR","matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","resolveSRVRecord","options","callback","srvHost","MongoAPIError","split","length","lookupAddress","resolveSrv","srvServiceName","err","addresses","name","hostAddresses","map","r","_a","HostAddress","fromString","port","lbError","validateLoadBalancedOptions","resolveTxt","record","code","MongoParseError","txtRecordOptions","URLSearchParams","join","txtRecordOptionKeys","keys","some","key","includes","option","get","source","undefined","replicaSet","_b","loadBalanced","_c","userSpecifiedAuthSource","credentials","AUTH_MECHS_AUTH_SRC_EXTERNAL","has","mechanism","MongoCredentials","merge","userSpecifiedReplicaSet","srvMaxHosts","exports","checkTLSOptions","check","a","b","Reflect","TRUTHS","Set","FALSEHOODS","getBoolean","value","valueString","String","toLowerCase","emitWarningOnce","getInt","Math","trunc","parsedValue","Number","parseInt","isNaN","getUint","entriesFromString","keyValuePairs","keyValue","CaseInsensitiveMap","Map","constructor","entries","arguments","_ref","k","v","set","delete","parseOptions","uri","mongoClient","MongoClient","url","default","hosts","isSRV","mongoOptions","Object","create","flag","getOwnPropertySymbols","FEATURE_FLAGS","urlOptions","pathname","dbName","decodeURIComponent","slice","username","auth","password","searchParams","values","getAll","objectOptions","filter","_ref2","allOptions","allKeys","DEFAULT_OPTIONS","objectOptionValue","push","urlValue","defaultOptionsValue","tlsAndSslOpts","concat","bind","size","unsupportedOptions","setDifference","Array","from","OPTIONS","s","optionWord","isOrAre","descriptor","setOption","isGssapi","AuthMechanism","MONGODB_GSSAPI","isX509","MONGODB_X509","isAws","MONGODB_AWS","validate","MONGODB_DEFAULT","mechanismProperties","promiseLibrary","PromiseProvider","autoEncryption","Encrypter","checkForMongoCrypt","encrypter","autoEncrypter","directConnection","noUserSpecifiedTLS","noUserSpecifiedSSL","tls","userSpecifiedSrvOptions","proxyHost","proxyPort","proxyUsername","proxyPassword","proxyOptions","isSrv","target","type","transform","deprecated","deprecatedMsg","emitWarning","isRecord","transformValue","appName","_ref3","makeClientMetadata","driverInfo","_ref4","authMechanism","_ref5","mechanisms","m","match","RegExp","raw","MONGODB_PLAIN","authMechanismProperties","_ref6","optionValue","authSource","_ref7","bsonRegExp","serverApi","_ref8","version","serverApiToValidate","versionToValidate","ServerApiVersion","checkKeys","compressors","_ref9","compressionList","compVal","compValArray","isArray","MongoInvalidArgumentError","c","Compressor","add","connectTimeoutMS","_ref10","metadata","application","enableUtf8Validation","family","_ref11","fieldsAsRaw","forceServerObjectId","fsync","_ref12","wc","WriteConcern","fromOptions","writeConcern","heartbeatFrequencyMS","ignoreUndefined","j","_ref13","journal","_ref14","keepAlive","keepAliveInitialDelay","localThresholdMS","logger","Logger","_ref15","loggerLevel","_ref16","maxConnecting","_ref17","maxIdleTimeMS","maxPoolSize","maxStalenessSeconds","_ref18","readPreference","ReadPreference","minInternalBufferSize","minPoolSize","minHeartbeatFrequencyMS","monitorCommands","_ref19","noDelay","pkFactory","DEFAULT_PK_FACTORY","_ref20","createPk","promoteBuffers","promoteLongs","promoteValues","readConcern","_ref21","ReadConcern","JSON","stringify","readConcernLevel","_ref22","level","primary","_ref23","rp","rpOpts","hedge","tags","readPreferenceTags","_ref24","tag","readPreferenceTag","retryReads","retryWrites","serializeFunctions","serverSelectionTimeoutMS","servername","socketTimeoutMS","ssl","sslCA","_ref25","readFileSync","encoding","sslCRL","_ref26","sslCert","_ref27","sslKey","_ref28","sslPass","sslValidate","tlsAllowInvalidCertificates","_ref29","tlsAllowInvalidHostnames","_ref30","tlsCAFile","_ref31","tlsCertificateFile","_ref32","tlsCertificateKeyFile","_ref33","tlsCertificateKeyFilePassword","tlsInsecure","_ref34","checkServerIdentity","rejectUnauthorized","w","_ref35","waitQueueTimeoutMS","_ref36","wtimeout","_ref37","wtimeoutMS","_ref38","zlibCompressionLevel","connectionType","srvPoller","minDHSize","pskCallback","secureContext","enableTrace","requestCert","ALPNProtocols","SNICallback","session","requestOCSP","localAddress","localPort","hints","lookup","ca","cert","ciphers","crl","ecdhCurve","passphrase","pfx","secureProtocol","index","useNewUrlParser","useUnifiedTopology","_ref39","_ref40","d","Symbol","for"],"sources":["C:\\Users\\Jatin\\node_modules\\mongodb\\src\\connection_string.ts"],"sourcesContent":["import * as dns from 'dns';\nimport * as fs from 'fs';\nimport ConnectionString from 'mongodb-connection-string-url';\nimport { URLSearchParams } from 'url';\n\nimport type { Document } from './bson';\nimport { MongoCredentials } from './cmap/auth/mongo_credentials';\nimport { AUTH_MECHS_AUTH_SRC_EXTERNAL, AuthMechanism } from './cmap/auth/providers';\nimport { Compressor, CompressorName } from './cmap/wire_protocol/compression';\nimport { Encrypter } from './encrypter';\nimport { MongoAPIError, MongoInvalidArgumentError, MongoParseError } from './error';\nimport { Logger, LoggerLevel } from './logger';\nimport {\n  DriverInfo,\n  MongoClient,\n  MongoClientOptions,\n  MongoOptions,\n  PkFactory,\n  ServerApi,\n  ServerApiVersion\n} from './mongo_client';\nimport { PromiseProvider } from './promise_provider';\nimport { ReadConcern, ReadConcernLevel } from './read_concern';\nimport { ReadPreference, ReadPreferenceMode } from './read_preference';\nimport type { TagSet } from './sdam/server_description';\nimport {\n  AnyOptions,\n  Callback,\n  DEFAULT_PK_FACTORY,\n  emitWarning,\n  emitWarningOnce,\n  HostAddress,\n  isRecord,\n  makeClientMetadata,\n  setDifference\n} from './utils';\nimport { W, WriteConcern } from './write_concern';\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\n\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR =\n  'loadBalanced option not supported when directConnection is provided';\n\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress: string, parentDomain: string): boolean {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nexport function resolveSRVRecord(options: MongoOptions, callback: Callback<HostAddress[]>): void {\n  if (typeof options.srvHost !== 'string') {\n    return callback(new MongoAPIError('Option \"srvHost\" must not be empty'));\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    return callback(new MongoAPIError('URI must include hostname, domain name, and tld'));\n  }\n\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  dns.resolveSrv(`_${options.srvServiceName}._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new MongoAPIError('No addresses found at host'));\n    }\n\n    for (const { name } of addresses) {\n      if (!matchesParentDomain(name, lookupAddress)) {\n        return callback(new MongoAPIError('Server record does not share hostname with parent URI'));\n      }\n    }\n\n    const hostAddresses = addresses.map(r =>\n      HostAddress.fromString(`${r.name}:${r.port ?? 27017}`)\n    );\n\n    const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n    if (lbError) {\n      return callback(lbError);\n    }\n\n    // Resolve TXT record and add options from there if they exist.\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n      } else {\n        if (record.length > 1) {\n          return callback(new MongoParseError('Multiple text records not allowed'));\n        }\n\n        const txtRecordOptions = new URLSearchParams(record[0].join(''));\n        const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n        if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n          return callback(\n            new MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`)\n          );\n        }\n\n        if (VALID_TXT_RECORDS.some(option => txtRecordOptions.get(option) === '')) {\n          return callback(new MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n        }\n\n        const source = txtRecordOptions.get('authSource') ?? undefined;\n        const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n        const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n\n        if (\n          !options.userSpecifiedAuthSource &&\n          source &&\n          options.credentials &&\n          !AUTH_MECHS_AUTH_SRC_EXTERNAL.has(options.credentials.mechanism)\n        ) {\n          options.credentials = MongoCredentials.merge(options.credentials, { source });\n        }\n\n        if (!options.userSpecifiedReplicaSet && replicaSet) {\n          options.replicaSet = replicaSet;\n        }\n\n        if (loadBalanced === 'true') {\n          options.loadBalanced = true;\n        }\n\n        if (options.replicaSet && options.srvMaxHosts > 0) {\n          return callback(new MongoParseError('Cannot combine replicaSet option with srvMaxHosts'));\n        }\n\n        const lbError = validateLoadBalancedOptions(hostAddresses, options, true);\n        if (lbError) {\n          return callback(lbError);\n        }\n      }\n\n      callback(undefined, hostAddresses);\n    });\n  });\n}\n\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\nexport function checkTLSOptions(options: AnyOptions): void {\n  if (!options) return;\n  const check = (a: string, b: string) => {\n    if (Reflect.has(options, a) && Reflect.has(options, b)) {\n      throw new MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\n\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name: string, value: unknown): boolean {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) {\n    if (valueString !== 'true') {\n      emitWarningOnce(\n        `deprecated value for ${name} : ${valueString} - please update to ${name} : true instead`\n      );\n    }\n    return true;\n  }\n  if (FALSEHOODS.has(valueString)) {\n    if (valueString !== 'false') {\n      emitWarningOnce(\n        `deprecated value for ${name} : ${valueString} - please update to ${name} : false instead`\n      );\n    }\n    return false;\n  }\n  throw new MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\n\nfunction getInt(name: string, value: unknown): number {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  if (!Number.isNaN(parsedValue)) return parsedValue;\n  throw new MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUint(name: string, value: unknown): number {\n  const parsedValue = getInt(name, value);\n  if (parsedValue < 0) {\n    throw new MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\n\nfunction* entriesFromString(value: string): Generator<[string, string]> {\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n    if (value == null) {\n      throw new MongoParseError('Cannot have undefined values in key value pairs');\n    }\n\n    yield [key, value];\n  }\n}\n\nclass CaseInsensitiveMap<Value = any> extends Map<string, Value> {\n  constructor(entries: Array<[string, any]> = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  override has(k: string) {\n    return super.has(k.toLowerCase());\n  }\n  override get(k: string) {\n    return super.get(k.toLowerCase());\n  }\n  override set(k: string, v: any) {\n    return super.set(k.toLowerCase(), v);\n  }\n  override delete(k: string): boolean {\n    return super.delete(k.toLowerCase());\n  }\n}\n\nexport function parseOptions(\n  uri: string,\n  mongoClient: MongoClient | MongoClientOptions | undefined = undefined,\n  options: MongoClientOptions = {}\n): MongoOptions {\n  if (mongoClient != null && !(mongoClient instanceof MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  const url = new ConnectionString(uri);\n  const { hosts, isSRV } = url;\n\n  const mongoOptions = Object.create(null);\n\n  // Feature flags\n  for (const flag of Object.getOwnPropertySymbols(options)) {\n    if (FEATURE_FLAGS.has(flag)) {\n      mongoOptions[flag] = options[flag];\n    }\n  }\n\n  mongoOptions.hosts = isSRV ? [] : hosts.map(HostAddress.fromString);\n\n  const urlOptions = new CaseInsensitiveMap<any[]>();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(\n      url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname\n    );\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth: Document = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n\n    if (values.includes('')) {\n      throw new MongoAPIError('URI cannot contain options with no value');\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap(\n    Object.entries(options).filter(([, v]) => v != null)\n  );\n\n  // Validate options that can only be provided by one of uri or object\n\n  if (urlOptions.has('serverApi')) {\n    throw new MongoParseError(\n      'URI cannot contain `serverApi`, it can only be passed to the client'\n    );\n  }\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n\n  // All option collection\n\n  const allOptions = new CaseInsensitiveMap();\n\n  const allKeys = new Set<string>([\n    ...urlOptions.keys(),\n    ...objectOptions.keys(),\n    ...DEFAULT_OPTIONS.keys()\n  ]);\n\n  for (const key of allKeys) {\n    const values = [];\n    const objectOptionValue = objectOptions.get(key);\n    if (objectOptionValue != null) {\n      values.push(objectOptionValue);\n    }\n    const urlValue = urlOptions.get(key);\n    if (urlValue != null) {\n      values.push(...urlValue);\n    }\n    const defaultOptionsValue = DEFAULT_OPTIONS.get(key);\n    if (defaultOptionsValue != null) {\n      values.push(defaultOptionsValue);\n    }\n    allOptions.set(key, values);\n  }\n\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    const tlsAndSslOpts = (allOptions.get('tls') || [])\n      .concat(allOptions.get('ssl') || [])\n      .map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  const unsupportedOptions = setDifference(\n    allKeys,\n    Array.from(Object.keys(OPTIONS)).map(s => s.toLowerCase())\n  );\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new MongoParseError(\n      `${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`\n    );\n  }\n\n  // Option parsing and setting\n\n  for (const [key, descriptor] of Object.entries(OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_AWS;\n    if (\n      (isGssapi || isX509) &&\n      allOptions.has('authSource') &&\n      mongoOptions.credentials.source !== '$external'\n    ) {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new MongoParseError(\n        `${mongoOptions.credentials} can only have authSource set to '$external'`\n      );\n    }\n\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    mongoOptions.credentials.validate();\n\n    // Check if the only auth related option provided was authSource, if so we can remove credentials\n    if (\n      mongoOptions.credentials.password === '' &&\n      mongoOptions.credentials.username === '' &&\n      mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_DEFAULT &&\n      Object.keys(mongoOptions.credentials.mechanismProperties).length === 0\n    ) {\n      delete mongoOptions.credentials;\n    }\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  checkTLSOptions(mongoOptions);\n\n  if (options.promiseLibrary) PromiseProvider.set(options.promiseLibrary);\n\n  const lbError = validateLoadBalancedOptions(hosts, mongoOptions, isSRV);\n  if (lbError) {\n    throw lbError;\n  }\n  if (mongoClient && mongoOptions.autoEncryption) {\n    Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n\n  // Potential SRV Overrides and SRV connection string validations\n\n  mongoOptions.userSpecifiedAuthSource =\n    objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet =\n    objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n\n    if (mongoOptions.directConnection) {\n      throw new MongoAPIError('SRV URI does not support directConnection');\n    }\n\n    if (mongoOptions.srvMaxHosts > 0 && typeof mongoOptions.replicaSet === 'string') {\n      throw new MongoParseError('Cannot use srvMaxHosts option with replicaSet');\n    }\n\n    // SRV turns on TLS by default, but users can override and turn it off\n    const noUserSpecifiedTLS = !objectOptions.has('tls') && !urlOptions.has('tls');\n    const noUserSpecifiedSSL = !objectOptions.has('ssl') && !urlOptions.has('ssl');\n    if (noUserSpecifiedTLS && noUserSpecifiedSSL) {\n      mongoOptions.tls = true;\n    }\n  } else {\n    const userSpecifiedSrvOptions =\n      urlOptions.has('srvMaxHosts') ||\n      objectOptions.has('srvMaxHosts') ||\n      urlOptions.has('srvServiceName') ||\n      objectOptions.has('srvServiceName');\n\n    if (userSpecifiedSrvOptions) {\n      throw new MongoParseError(\n        'Cannot use srvMaxHosts or srvServiceName with a non-srv connection string'\n      );\n    }\n  }\n\n  if (mongoOptions.directConnection && mongoOptions.hosts.length !== 1) {\n    throw new MongoParseError('directConnection option requires exactly one host');\n  }\n\n  if (\n    !mongoOptions.proxyHost &&\n    (mongoOptions.proxyPort || mongoOptions.proxyUsername || mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Must specify proxyHost if other proxy options are passed');\n  }\n\n  if (\n    (mongoOptions.proxyUsername && !mongoOptions.proxyPassword) ||\n    (!mongoOptions.proxyUsername && mongoOptions.proxyPassword)\n  ) {\n    throw new MongoParseError('Can only specify both of proxy username/password or neither');\n  }\n\n  const proxyOptions = ['proxyHost', 'proxyPort', 'proxyUsername', 'proxyPassword'].map(\n    key => urlOptions.get(key) ?? []\n  );\n\n  if (proxyOptions.some(options => options.length > 1)) {\n    throw new MongoParseError(\n      'Proxy options cannot be specified multiple times in the connection string'\n    );\n  }\n\n  return mongoOptions;\n}\n\nfunction validateLoadBalancedOptions(\n  hosts: HostAddress[] | string[],\n  mongoOptions: MongoOptions,\n  isSrv: boolean\n): MongoParseError | undefined {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      return new MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      return new MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      return new MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n\n    if (isSrv && mongoOptions.srvMaxHosts > 0) {\n      return new MongoParseError('Cannot limit srv hosts with loadBalanced enabled');\n    }\n  }\n  return;\n}\n\nfunction setOption(\n  mongoOptions: any,\n  key: string,\n  descriptor: OptionDescriptor,\n  values: unknown[]\n) {\n  const { target, type, transform, deprecated } = descriptor;\n  const name = target ?? key;\n\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getInt(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUint(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!isRecord(values[0])) {\n        throw new MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default: {\n      if (!transform) {\n        throw new MongoParseError('Descriptors missing a type must define a transform');\n      }\n      const transformValue = transform({ name, options: mongoOptions, values });\n      mongoOptions[name] = transformValue;\n      break;\n    }\n  }\n}\n\ninterface OptionDescriptor {\n  target?: string;\n  type?: 'boolean' | 'int' | 'uint' | 'record' | 'string' | 'any';\n  default?: any;\n\n  deprecated?: boolean | string;\n  /**\n   * @param name - the original option name\n   * @param options - the options so far for resolution\n   * @param values - the possible values in precedence order\n   */\n  transform?: (args: { name: string; options: MongoOptions; values: unknown[] }) => unknown;\n}\n\nexport const OPTIONS = {\n  appName: {\n    target: 'metadata',\n    transform({ options, values: [value] }): DriverInfo {\n      return makeClientMetadata({ ...options.driverInfo, appName: String(value) });\n    }\n  },\n  auth: {\n    target: 'credentials',\n    transform({ name, options, values: [value] }): MongoCredentials {\n      if (!isRecord(value, ['username', 'password'] as const)) {\n        throw new MongoParseError(\n          `${name} must be an object with 'username' and 'password' properties`\n        );\n      }\n      return MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const mechanisms = Object.values(AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (\n        mechanism === AuthMechanism.MONGODB_PLAIN ||\n        AUTH_MECHS_AUTH_SRC_EXTERNAL.has(mechanism)\n      ) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = options.credentials?.password;\n      if (mechanism === AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({ options, values: [optionValue] }): MongoCredentials {\n      if (typeof optionValue === 'string') {\n        const mechanismProperties = Object.create(null);\n\n        for (const [key, value] of entriesFromString(optionValue)) {\n          try {\n            mechanismProperties[key] = getBoolean(key, value);\n          } catch {\n            mechanismProperties[key] = value;\n          }\n        }\n\n        return MongoCredentials.merge(options.credentials, {\n          mechanismProperties\n        });\n      }\n      if (!isRecord(optionValue)) {\n        throw new MongoParseError('AuthMechanismProperties must be an object');\n      }\n      return MongoCredentials.merge(options.credentials, { mechanismProperties: optionValue });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const source = String(value);\n      return MongoCredentials.merge(options.credentials, { source });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({ values: [version] }): ServerApi {\n      const serverApiToValidate =\n        typeof version === 'string' ? ({ version } as ServerApi) : (version as ServerApi);\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new MongoParseError(\n          `Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      if (!Object.values(ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new MongoParseError(\n          `Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({ values }) {\n      const compressionList = new Set();\n      for (const compVal of values as (CompressorName[] | string)[]) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new MongoInvalidArgumentError(\n            'compressors must be an array or a comma-delimited list of strings'\n          );\n        }\n        for (const c of compValArray) {\n          if (Object.keys(Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new MongoInvalidArgumentError(\n              `${c} is not a valid compression mechanism. Must be one of: ${Object.keys(\n                Compressor\n              )}.`\n            );\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: makeClientMetadata(),\n    transform({ options, values: [value] }) {\n      if (!isRecord(value)) throw new MongoParseError('DriverInfo must be an object');\n      return makeClientMetadata({\n        driverInfo: value,\n        appName: options.metadata?.application?.name\n      });\n    }\n  },\n  enableUtf8Validation: { type: 'boolean', default: true },\n  family: {\n    transform({ name, values: [value] }): 4 | 6 {\n      const transformValue = getInt(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  journal: {\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new Logger('MongoClient'),\n    transform({ values: [value] }) {\n      if (value instanceof Logger) {\n        return value;\n      }\n      emitWarning('Alternative loggers might not be supported');\n      // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n      return;\n    }\n  },\n  loggerLevel: {\n    target: 'logger',\n    transform({ values: [value] }) {\n      return new Logger('MongoClient', { loggerLevel: value as LoggerLevel });\n    }\n  },\n  maxConnecting: {\n    default: 2,\n    transform({ name, values: [value] }): number {\n      const maxConnecting = getUint(name, value);\n      if (maxConnecting === 0) {\n        throw new MongoInvalidArgumentError('maxConnecting must be > 0 if specified');\n      }\n      return maxConnecting;\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({ name, options, values: [value] }) {\n      const maxStalenessSeconds = getUint(name, value);\n      if (options.readPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, maxStalenessSeconds }\n        });\n      } else {\n        return new ReadPreference('secondary', undefined, { maxStalenessSeconds });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({ values: [value], options }) {\n      return { ...options.driverInfo, name: String(value) };\n    }\n  } as OptionDescriptor,\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: DEFAULT_PK_FACTORY,\n    transform({ values: [value] }): PkFactory {\n      if (isRecord(value, ['createPk'] as const) && typeof value.createPk === 'function') {\n        return value as PkFactory;\n      }\n      throw new MongoParseError(\n        `Option pkFactory must be an object with a createPk function, got ${value}`\n      );\n    }\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  proxyHost: {\n    type: 'string'\n  },\n  proxyPassword: {\n    type: 'string'\n  },\n  proxyPort: {\n    type: 'uint'\n  },\n  proxyUsername: {\n    type: 'string'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({ values: [value], options }) {\n      if (value instanceof ReadConcern || isRecord(value, ['level'] as const)) {\n        return ReadConcern.fromOptions({ ...options.readConcern, ...value } as any);\n      }\n      throw new MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({ values: [level], options }) {\n      return ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level as ReadConcernLevel\n      });\n    }\n  },\n  readPreference: {\n    default: ReadPreference.primary,\n    transform({ values: [value], options }) {\n      if (value instanceof ReadPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n      }\n      if (isRecord(value, ['mode'] as const)) {\n        const rp = ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n        if (rp) return rp;\n        else throw new MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new ReadPreference(\n          value as ReadPreferenceMode,\n          options.readPreference?.tags,\n          rpOpts\n        );\n      }\n      throw new MongoParseError(`Unknown ReadPreference value: ${value}`);\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({\n      values,\n      options\n    }: {\n      values: Array<string | Record<string, string>[]>;\n      options: MongoClientOptions;\n    }) {\n      const tags: Array<string | Record<string, string>> = Array.isArray(values[0])\n        ? values[0]\n        : (values as Array<string>);\n      const readPreferenceTags = [];\n      for (const tag of tags) {\n        const readPreferenceTag: TagSet = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of entriesFromString(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if (isRecord(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  srvMaxHosts: {\n    type: 'uint',\n    default: 0\n  },\n  srvServiceName: {\n    type: 'string',\n    default: 'mongodb'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({ name, values: [value] }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({ name, values: [value] }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({ name, options, values: [value] }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames\n          ? () => undefined\n          : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      return WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value as W } });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      if (isRecord(value) || value instanceof WriteConcern) {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  } as OptionDescriptor,\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUint('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  } as OptionDescriptor,\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUint('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: { type: 'any' },\n  srvPoller: { type: 'any' },\n  // Accepted NodeJS Options\n  minDHSize: { type: 'any' },\n  pskCallback: { type: 'any' },\n  secureContext: { type: 'any' },\n  enableTrace: { type: 'any' },\n  requestCert: { type: 'any' },\n  rejectUnauthorized: { type: 'any' },\n  checkServerIdentity: { type: 'any' },\n  ALPNProtocols: { type: 'any' },\n  SNICallback: { type: 'any' },\n  session: { type: 'any' },\n  requestOCSP: { type: 'any' },\n  localAddress: { type: 'any' },\n  localPort: { type: 'any' },\n  hints: { type: 'any' },\n  lookup: { type: 'any' },\n  ca: { type: 'any' },\n  cert: { type: 'any' },\n  ciphers: { type: 'any' },\n  crl: { type: 'any' },\n  ecdhCurve: { type: 'any' },\n  key: { type: 'any' },\n  passphrase: { type: 'any' },\n  pfx: { type: 'any' },\n  secureProtocol: { type: 'any' },\n  index: { type: 'any' },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: { type: 'boolean' } as OptionDescriptor,\n  useUnifiedTopology: { type: 'boolean' } as OptionDescriptor\n} as Record<keyof MongoClientOptions, OptionDescriptor>;\n\nexport const DEFAULT_OPTIONS = new CaseInsensitiveMap(\n  Object.entries(OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default])\n);\n\n/**\n * Set of permitted feature flags\n * @internal\n */\nexport const FEATURE_FLAGS = new Set([Symbol.for('@@mdb.skipPingOnConnect')]);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}