{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jatin\\\\Documents\\\\HTML PROJECTS\\\\mern-exercise\\\\task\\\\binary-tree\\\\src\\\\Stack.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Traverse from \"./Traverse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Stack() {\n  _s();\n  const [tree, setTree] = useState(null);\n  useEffect(() => {\n    function Node(value) {\n      this.value = value;\n      // this.left = null;\n      // this.right = null;\n    }\n\n    // insert function\n    function insertNode(Tree, value) {\n      var node = Tree,\n        key;\n      while (node.value !== value) {\n        key = value < node.value ? \"left\" : \"right\";\n        if (!node[key]) {\n          node[key] = new Node(value);\n          break;\n        }\n        node = node[key];\n      }\n      return Tree;\n    }\n    // traverse function\n    function traverse(node) {\n      console.log(\"value:\" + node.value);\n      if (node.left) {\n        console.groupCollapsed(\"left:\");\n        traverse(node.left);\n        console.groupEnd();\n      } else {\n        console.log(\"left:\" + null);\n      }\n      if (node.right) {\n        console.groupCollapsed(\"right:\");\n        traverse(node.right);\n        console.groupEnd();\n      } else {\n        console.log(\"right:\" + null);\n      }\n    }\n    // driver methods\n    var array = [8, 10, 12, 5, 3, 6, 22, -3, -5];\n    var Tree = array.reduce((t, v) => t ? insertNode(t, v) : new Node(v), null);\n    setTree(Tree);\n    console.group(\"R00T\");\n    // traverse(Tree);\n    console.log(Tree);\n    console.groupEnd();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Traverse, {\n      node: tree\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(Stack, \"C2wasZ4/w/uTJY5LyroNkQBd1w0=\");\n_c = Stack;\nexport default Stack;\nvar _c;\n$RefreshReg$(_c, \"Stack\");","map":{"version":3,"names":["React","useState","useEffect","Traverse","jsxDEV","_jsxDEV","Stack","_s","tree","setTree","Node","value","insertNode","Tree","node","key","traverse","console","log","left","groupCollapsed","groupEnd","right","array","reduce","t","v","group","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Jatin/Documents/HTML PROJECTS/mern-exercise/task/binary-tree/src/Stack.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport Traverse from \"./Traverse\";\r\n\r\nfunction Stack() {\r\n  const [tree, setTree] = useState(null);\r\n   \r\n  useEffect(() => {\r\n    function Node(value) {\r\n      this.value = value;\r\n      // this.left = null;\r\n      // this.right = null;\r\n    }\r\n\r\n    // insert function\r\n    function insertNode(Tree, value) {\r\n      var node = Tree,\r\n        key;\r\n      while (node.value !== value) {\r\n        key = value < node.value ? \"left\" : \"right\";\r\n        if (!node[key]) {\r\n          node[key] = new Node(value);\r\n          break;\r\n        }\r\n        node = node[key];\r\n      }\r\n      return Tree;\r\n    }\r\n    // traverse function\r\n    function traverse(node) {\r\n      console.log(\"value:\" + node.value);\r\n      if (node.left) {\r\n        console.groupCollapsed(\"left:\");\r\n        traverse(node.left);\r\n        console.groupEnd();\r\n      } else {\r\n        console.log(\"left:\" + null);\r\n      }\r\n\r\n      if (node.right) {\r\n        console.groupCollapsed(\"right:\");\r\n        traverse(node.right);\r\n        console.groupEnd();\r\n      } else {\r\n        console.log(\"right:\" + null);\r\n      }\r\n    }\r\n    // driver methods\r\n    var array = [8, 10, 12, 5, 3, 6, 22, -3, -5];\r\n    var Tree = array.reduce(\r\n      (t, v) => (t ? insertNode(t, v) : new Node(v)),\r\n      null\r\n    );\r\n    setTree(Tree);\r\n    console.group(\"R00T\");\r\n    // traverse(Tree);\r\n      console.log(Tree);\r\n    console.groupEnd();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Traverse node={tree} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Stack;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,OAAOC,QAAQ,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd,SAASQ,IAAIA,CAACC,KAAK,EAAE;MACnB,IAAI,CAACA,KAAK,GAAGA,KAAK;MAClB;MACA;IACF;;IAEA;IACA,SAASC,UAAUA,CAACC,IAAI,EAAEF,KAAK,EAAE;MAC/B,IAAIG,IAAI,GAAGD,IAAI;QACbE,GAAG;MACL,OAAOD,IAAI,CAACH,KAAK,KAAKA,KAAK,EAAE;QAC3BI,GAAG,GAAGJ,KAAK,GAAGG,IAAI,CAACH,KAAK,GAAG,MAAM,GAAG,OAAO;QAC3C,IAAI,CAACG,IAAI,CAACC,GAAG,CAAC,EAAE;UACdD,IAAI,CAACC,GAAG,CAAC,GAAG,IAAIL,IAAI,CAACC,KAAK,CAAC;UAC3B;QACF;QACAG,IAAI,GAAGA,IAAI,CAACC,GAAG,CAAC;MAClB;MACA,OAAOF,IAAI;IACb;IACA;IACA,SAASG,QAAQA,CAACF,IAAI,EAAE;MACtBG,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAGJ,IAAI,CAACH,KAAK,CAAC;MAClC,IAAIG,IAAI,CAACK,IAAI,EAAE;QACbF,OAAO,CAACG,cAAc,CAAC,OAAO,CAAC;QAC/BJ,QAAQ,CAACF,IAAI,CAACK,IAAI,CAAC;QACnBF,OAAO,CAACI,QAAQ,EAAE;MACpB,CAAC,MAAM;QACLJ,OAAO,CAACC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;MAC7B;MAEA,IAAIJ,IAAI,CAACQ,KAAK,EAAE;QACdL,OAAO,CAACG,cAAc,CAAC,QAAQ,CAAC;QAChCJ,QAAQ,CAACF,IAAI,CAACQ,KAAK,CAAC;QACpBL,OAAO,CAACI,QAAQ,EAAE;MACpB,CAAC,MAAM;QACLJ,OAAO,CAACC,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC;MAC9B;IACF;IACA;IACA,IAAIK,KAAK,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,IAAIV,IAAI,GAAGU,KAAK,CAACC,MAAM,CACrB,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,GAAGb,UAAU,CAACa,CAAC,EAAEC,CAAC,CAAC,GAAG,IAAIhB,IAAI,CAACgB,CAAC,CAAE,EAC9C,IAAI,CACL;IACDjB,OAAO,CAACI,IAAI,CAAC;IACbI,OAAO,CAACU,KAAK,CAAC,MAAM,CAAC;IACrB;IACEV,OAAO,CAACC,GAAG,CAACL,IAAI,CAAC;IACnBI,OAAO,CAACI,QAAQ,EAAE;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEhB,OAAA;IAAAuB,QAAA,eACEvB,OAAA,CAACF,QAAQ;MAACW,IAAI,EAAEN;IAAK;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAG;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACpB;AAEV;AAACzB,EAAA,CA7DQD,KAAK;AAAA2B,EAAA,GAAL3B,KAAK;AA+Dd,eAAeA,KAAK;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}